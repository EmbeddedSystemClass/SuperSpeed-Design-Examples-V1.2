   1              		.cpu arm926ej-s
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 18, 4
  11              		.file	"StartUp.c"
  19              	.Ltext0:
  20              		.cfi_sections	.debug_frame
  21              		.section	.rodata
  22              		.align	2
  23              	.LC0:
  24 0000 46415441 		.ascii	"FATAL ERROR = %d\000"
  24      4C204552 
  24      524F5220 
  24      3D202564 
  24      00
  25 0011 000000   		.section	.text.IndicateError,"ax",%progbits
  26              		.align	2
  27              		.global	IndicateError
  29              	IndicateError:
  30              	.LFB0:
  31              		.file 1 "../StartUp.c"
   1:../StartUp.c  **** // StartUp.c - set up the CPU environment then start the RTOS
   2:../StartUp.c  **** //
   3:../StartUp.c  **** // john@usb-by-example.com
   4:../StartUp.c  **** //
   5:../StartUp.c  **** 
   6:../StartUp.c  **** #include "Application.h"
   7:../StartUp.c  **** 
   8:../StartUp.c  **** void IndicateError(uint16_t ErrorCode)
   9:../StartUp.c  **** {
  32              		.loc 1 9 0
  33              		.cfi_startproc
  34              		@ args = 0, pretend = 0, frame = 40
  35              		@ frame_needed = 1, uses_anonymous_args = 0
  36 0000 00482DE9 		stmfd	sp!, {fp, lr}
  37              	.LCFI0:
  38              		.cfi_def_cfa_offset 8
  39 0004 04B08DE2 		add	fp, sp, #4
  40              		.cfi_offset 14, -4
  41              		.cfi_offset 11, -8
  42              	.LCFI1:
  43              		.cfi_def_cfa 11, 4
  44 0008 28D04DE2 		sub	sp, sp, #40
  45 000c 0030A0E1 		mov	r3, r0
  46 0010 B6324BE1 		strh	r3, [fp, #-38]	@ movhi
  10:../StartUp.c  **** 	DebugPrint(1, "FATAL ERROR = %d", ErrorCode);	// This probably won't display
  47              		.loc 1 10 0
  48 0014 B6325BE1 		ldrh	r3, [fp, #-38]
  49 0018 0100A0E3 		mov	r0, #1
  50 001c 98109FE5 		ldr	r1, .L4
  51 0020 0320A0E1 		mov	r2, r3
  52 0024 FEFFFFEB 		bl	CyU3PDebugPrint
  11:../StartUp.c  **** 	// Setup a PWM to blink the SuperSpeed Explorer's only user LED at an "error rate"
  12:../StartUp.c  ****     CyU3PGpioComplexConfig_t gpioConfig;
  13:../StartUp.c  **** 	// LED is on UART_CTS which has been assigned to the UART driver, claim it back
  14:../StartUp.c  ****     CyU3PDeviceGpioOverride(UART_CTS, CyFalse);
  53              		.loc 1 14 0
  54 0028 3600A0E3 		mov	r0, #54
  55 002c 0010A0E3 		mov	r1, #0
  56 0030 FEFFFFEB 		bl	CyU3PDeviceGpioOverride
  15:../StartUp.c  ****     // ConFigure UART_CTS as PWM output
  16:../StartUp.c  ****     CyU3PMemSet((uint8_t *)&gpioConfig, 0, sizeof(gpioConfig));
  57              		.loc 1 16 0
  58 0034 24304BE2 		sub	r3, fp, #36
  59 0038 0300A0E1 		mov	r0, r3
  60 003c 0010A0E3 		mov	r1, #0
  61 0040 2020A0E3 		mov	r2, #32
  62 0044 FEFFFFEB 		bl	CyU3PMemSet
  17:../StartUp.c  ****     gpioConfig.outValue = CyTrue;
  63              		.loc 1 17 0
  64 0048 0130A0E3 		mov	r3, #1
  65 004c 24300BE5 		str	r3, [fp, #-36]
  18:../StartUp.c  ****     gpioConfig.driveLowEn = CyTrue;
  66              		.loc 1 18 0
  67 0050 0130A0E3 		mov	r3, #1
  68 0054 20300BE5 		str	r3, [fp, #-32]
  19:../StartUp.c  ****     gpioConfig.driveHighEn = CyTrue;
  69              		.loc 1 19 0
  70 0058 0130A0E3 		mov	r3, #1
  71 005c 1C300BE5 		str	r3, [fp, #-28]
  20:../StartUp.c  ****     gpioConfig.pinMode = (ErrorCode == 0) ? CY_U3P_GPIO_MODE_STATIC : CY_U3P_GPIO_MODE_PWM;
  72              		.loc 1 20 0
  73 0060 B6325BE1 		ldrh	r3, [fp, #-38]
  74 0064 000053E3 		cmp	r3, #0
  75 0068 0100001A 		bne	.L2
  76              		.loc 1 20 0 is_stmt 0 discriminator 1
  77 006c 0030A0E3 		mov	r3, #0
  78 0070 000000EA 		b	.L3
  79              	.L2:
  80              		.loc 1 20 0 discriminator 2
  81 0074 0530A0E3 		mov	r3, #5
  82              	.L3:
  83              		.loc 1 20 0 discriminator 3
  84 0078 14304BE5 		strb	r3, [fp, #-20]
  21:../StartUp.c  ****     gpioConfig.timerMode = CY_U3P_GPIO_TIMER_HIGH_FREQ;
  85              		.loc 1 21 0 is_stmt 1 discriminator 3
  86 007c 0130A0E3 		mov	r3, #1
  87 0080 12304BE5 		strb	r3, [fp, #-18]
  22:../StartUp.c  ****     gpioConfig.period = PWM_PERIOD << ErrorCode;
  88              		.loc 1 22 0 discriminator 3
  89 0084 B6325BE1 		ldrh	r3, [fp, #-38]
  90 0088 30209FE5 		ldr	r2, .L4+4
  91 008c 1233A0E1 		mov	r3, r2, asl r3
  92 0090 0C300BE5 		str	r3, [fp, #-12]
  23:../StartUp.c  ****     gpioConfig.threshold = PWM_THRESHOLD << ErrorCode;
  93              		.loc 1 23 0 discriminator 3
  94 0094 B6325BE1 		ldrh	r3, [fp, #-38]
  95 0098 24209FE5 		ldr	r2, .L4+8
  96 009c 1233A0E1 		mov	r3, r2, asl r3
  97 00a0 08300BE5 		str	r3, [fp, #-8]
  24:../StartUp.c  ****     CyU3PGpioSetComplexConfig(UART_CTS, &gpioConfig);
  98              		.loc 1 24 0 discriminator 3
  99 00a4 24304BE2 		sub	r3, fp, #36
 100 00a8 3600A0E3 		mov	r0, #54
 101 00ac 0310A0E1 		mov	r1, r3
 102 00b0 FEFFFFEB 		bl	CyU3PGpioSetComplexConfig
  25:../StartUp.c  **** }
 103              		.loc 1 25 0 discriminator 3
 104 00b4 04D04BE2 		sub	sp, fp, #4
 105 00b8 0088BDE8 		ldmfd	sp!, {fp, pc}
 106              	.L5:
 107              		.align	2
 108              	.L4:
 109 00bc 00000000 		.word	.LC0
 110 00c0 002D3101 		.word	20000000
 111 00c4 404B4C00 		.word	5000000
 112              		.cfi_endproc
 113              	.LFE0:
 115              		.section	.text.main,"ax",%progbits
 116              		.align	2
 117              		.global	main
 119              	main:
 120              	.LFB1:
  26:../StartUp.c  **** 
  27:../StartUp.c  **** // Main sets up the CPU environment the starts the RTOS
  28:../StartUp.c  **** int main (void)
  29:../StartUp.c  **** {
 121              		.loc 1 29 0
 122              		.cfi_startproc
 123              		@ args = 0, pretend = 0, frame = 56
 124              		@ frame_needed = 1, uses_anonymous_args = 0
 125 0000 00482DE9 		stmfd	sp!, {fp, lr}
 126              	.LCFI2:
 127              		.cfi_def_cfa_offset 8
 128 0004 04B08DE2 		add	fp, sp, #4
 129              		.cfi_offset 14, -4
 130              		.cfi_offset 11, -8
 131              	.LCFI3:
 132              		.cfi_def_cfa 11, 4
 133 0008 38D04DE2 		sub	sp, sp, #56
  30:../StartUp.c  ****     CyU3PGpioClock_t GpioClock;
  31:../StartUp.c  ****     CyU3PIoMatrixConfig_t io_Config;
  32:../StartUp.c  ****     CyU3PReturnStatus_t Status;
  33:../StartUp.c  **** 
  34:../StartUp.c  ****     // The default clock runs at 384MHz
  35:../StartUp.c  ****     Status = CyU3PDeviceInit(0);
 134              		.loc 1 35 0
 135 000c 0000A0E3 		mov	r0, #0
 136 0010 FEFFFFEB 		bl	CyU3PDeviceInit
 137 0014 08000BE5 		str	r0, [fp, #-8]
  36:../StartUp.c  ****     if (Status == CY_U3P_SUCCESS)
 138              		.loc 1 36 0
 139 0018 08301BE5 		ldr	r3, [fp, #-8]
 140 001c 000053E3 		cmp	r3, #0
 141 0020 2E00001A 		bne	.L7
  37:../StartUp.c  ****     {
  38:../StartUp.c  ****         // Startup the GPIO module clocks, needed for ErrorIndicator
  39:../StartUp.c  ****         GpioClock.fastClkDiv = 2;
 142              		.loc 1 39 0
 143 0024 0230A0E3 		mov	r3, #2
 144 0028 14304BE5 		strb	r3, [fp, #-20]
  40:../StartUp.c  ****         GpioClock.slowClkDiv = 0;
 145              		.loc 1 40 0
 146 002c 0030A0E3 		mov	r3, #0
 147 0030 13304BE5 		strb	r3, [fp, #-19]
  41:../StartUp.c  ****         GpioClock.simpleDiv = CY_U3P_GPIO_SIMPLE_DIV_BY_2;
 148              		.loc 1 41 0
 149 0034 0030A0E3 		mov	r3, #0
 150 0038 0C304BE5 		strb	r3, [fp, #-12]
  42:../StartUp.c  ****         GpioClock.clkSrc = CY_U3P_SYS_CLK;
 151              		.loc 1 42 0
 152 003c 0330A0E3 		mov	r3, #3
 153 0040 0B304BE5 		strb	r3, [fp, #-11]
  43:../StartUp.c  ****         GpioClock.halfDiv = 0;
 154              		.loc 1 43 0
 155 0044 0030A0E3 		mov	r3, #0
 156 0048 10300BE5 		str	r3, [fp, #-16]
  44:../StartUp.c  ****         Status = CyU3PGpioInit(&GpioClock, 0);
 157              		.loc 1 44 0
 158 004c 14304BE2 		sub	r3, fp, #20
 159 0050 0300A0E1 		mov	r0, r3
 160 0054 0010A0E3 		mov	r1, #0
 161 0058 FEFFFFEB 		bl	CyU3PGpioInit
 162 005c 08000BE5 		str	r0, [fp, #-8]
  45:../StartUp.c  ****         if (Status == CY_U3P_SUCCESS)
 163              		.loc 1 45 0
 164 0060 08301BE5 		ldr	r3, [fp, #-8]
 165 0064 000053E3 		cmp	r3, #0
 166 0068 1C00001A 		bne	.L7
  46:../StartUp.c  ****         {
  47:../StartUp.c  **** 			Status = CyU3PDeviceCacheControl(CyTrue, CyTrue, CyTrue);
 167              		.loc 1 47 0
 168 006c 0100A0E3 		mov	r0, #1
 169 0070 0110A0E3 		mov	r1, #1
 170 0074 0120A0E3 		mov	r2, #1
 171 0078 FEFFFFEB 		bl	CyU3PDeviceCacheControl
 172 007c 08000BE5 		str	r0, [fp, #-8]
  48:../StartUp.c  **** 			if (Status == CY_U3P_SUCCESS)
 173              		.loc 1 48 0
 174 0080 08301BE5 		ldr	r3, [fp, #-8]
 175 0084 000053E3 		cmp	r3, #0
 176 0088 1400001A 		bne	.L7
  49:../StartUp.c  **** 			{
  50:../StartUp.c  **** 				CyU3PMemSet((uint8_t *)&io_Config, 0, sizeof(io_Config));
 177              		.loc 1 50 0
 178 008c 3C304BE2 		sub	r3, fp, #60
 179 0090 0300A0E1 		mov	r0, r3
 180 0094 0010A0E3 		mov	r1, #0
 181 0098 2820A0E3 		mov	r2, #40
 182 009c FEFFFFEB 		bl	CyU3PMemSet
  51:../StartUp.c  **** 				io_Config.isDQ32Bit = CyTrue;
 183              		.loc 1 51 0
 184 00a0 0130A0E3 		mov	r3, #1
 185 00a4 3C300BE5 		str	r3, [fp, #-60]
  52:../StartUp.c  **** 				io_Config.useUart   = CyTrue;
 186              		.loc 1 52 0
 187 00a8 0130A0E3 		mov	r3, #1
 188 00ac 38300BE5 		str	r3, [fp, #-56]
  53:../StartUp.c  **** 				io_Config.lppMode   = CY_U3P_IO_MATRIX_LPP_DEFAULT;
 189              		.loc 1 53 0
 190 00b0 0030A0E3 		mov	r3, #0
 191 00b4 26304BE5 		strb	r3, [fp, #-38]
  54:../StartUp.c  **** 				Status = CyU3PDeviceConfigureIOMatrix(&io_Config);
 192              		.loc 1 54 0
 193 00b8 3C304BE2 		sub	r3, fp, #60
 194 00bc 0300A0E1 		mov	r0, r3
 195 00c0 FEFFFFEB 		bl	CyU3PDeviceConfigureIOMatrix
 196 00c4 08000BE5 		str	r0, [fp, #-8]
  55:../StartUp.c  **** 				IndicateError(1);		// Turn on so we know if RTOS Start fails
 197              		.loc 1 55 0
 198 00c8 0100A0E3 		mov	r0, #1
 199 00cc FEFFFFEB 		bl	IndicateError
  56:../StartUp.c  **** 				if (Status == CY_U3P_SUCCESS) CyU3PKernelEntry();// This does not return
 200              		.loc 1 56 0
 201 00d0 08301BE5 		ldr	r3, [fp, #-8]
 202 00d4 000053E3 		cmp	r3, #0
 203 00d8 0000001A 		bne	.L7
 204              		.loc 1 56 0 is_stmt 0 discriminator 1
 205 00dc FEFFFFEB 		bl	_tx_initialize_kernel_enter
 206              	.L7:
  57:../StartUp.c  **** 			}
  58:../StartUp.c  **** 		}
  59:../StartUp.c  **** 	}
  60:../StartUp.c  ****     // Get here on a failure, can't recover, just hang here
  61:../StartUp.c  ****     while (1);
 207              		.loc 1 61 0 is_stmt 1 discriminator 1
 208 00e0 FEFFFFEA 		b	.L7
 209              		.cfi_endproc
 210              	.LFE1:
 212              		.text
 213              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 StartUp.c
C:\Users\John\AppData\Local\Temp\cc6U4vMg.s:22     .rodata:00000000 $d
C:\Users\John\AppData\Local\Temp\cc6U4vMg.s:26     .text.IndicateError:00000000 $a
C:\Users\John\AppData\Local\Temp\cc6U4vMg.s:29     .text.IndicateError:00000000 IndicateError
C:\Users\John\AppData\Local\Temp\cc6U4vMg.s:109    .text.IndicateError:000000bc $d
C:\Users\John\AppData\Local\Temp\cc6U4vMg.s:116    .text.main:00000000 $a
C:\Users\John\AppData\Local\Temp\cc6U4vMg.s:119    .text.main:00000000 main
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
CyU3PDebugPrint
CyU3PDeviceGpioOverride
CyU3PMemSet
CyU3PGpioSetComplexConfig
CyU3PDeviceInit
CyU3PGpioInit
CyU3PDeviceCacheControl
CyU3PDeviceConfigureIOMatrix
_tx_initialize_kernel_enter
