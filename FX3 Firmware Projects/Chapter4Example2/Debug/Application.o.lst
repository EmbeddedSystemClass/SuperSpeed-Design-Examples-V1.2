   1              		.cpu arm926ej-s
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 18, 4
  11              		.file	"Application.c"
  19              	.Ltext0:
  20              		.cfi_sections	.debug_frame
  21              		.comm	ThreadHandle,636,4
  22              		.comm	DataToProcess,36,4
  23              		.comm	DataToOutput,36,4
  24              		.comm	InputDataTimer,64,4
  25              		.comm	DataOverrun,4,4
  26              		.comm	TotalData,4,4
  27              		.comm	InputDataBuffer,400,4
  28              		.comm	ProcessedDataBuffer,40,4
  29              		.comm	TempCounter,4,4
  30              		.global	SampleTime
  31              		.section	.data.SampleTime,"aw",%progbits
  32              		.align	2
  35              	SampleTime:
  36 0000 AC0D0000 		.word	3500
  37              		.section	.rodata
  38              		.align	2
  39              	.LC0:
  40 0000 0A257320 		.ascii	"\012%s is busy working\000"
  40      69732062 
  40      75737920 
  40      776F726B 
  40      696E6700 
  41              		.section	.text.DoWork,"ax",%progbits
  42              		.align	2
  43              		.global	DoWork
  45              	DoWork:
  46              	.LFB0:
  47              		.file 1 "../Application.c"
   1:../Application.c **** // Chapter4Example1 - demonstrate the operation of an RTOS Semaphore
   2:../Application.c **** //
   3:../Application.c **** // john@usb-by-example.com
   4:../Application.c **** //
   5:../Application.c **** 
   6:../Application.c **** #include "Application.h"
   7:../Application.c **** 
   8:../Application.c **** extern CyU3PReturnStatus_t InitializeDebugConsole(void);
   9:../Application.c **** extern void CheckStatus(char* StringPtr, CyU3PReturnStatus_t Status);
  10:../Application.c **** 
  11:../Application.c **** CyU3PThread ThreadHandle[3];				// Handles to my Application Threads
  12:../Application.c **** CyU3PSemaphore DataToProcess, DataToOutput;	// Used for thread communications
  13:../Application.c **** CyU3PTimer InputDataTimer;					// Used to create periodic input data
  14:../Application.c **** uint32_t DataOverrun, TotalData;			// Used to monitor for missed input data
  15:../Application.c **** uint32_t InputDataBuffer[100];				// InputData thread puts data here
  16:../Application.c **** uint32_t ProcessedDataBuffer[10];			// ProcessData thread puts data here
  17:../Application.c **** uint32_t TempCounter;						// Used to generate 'data'
  18:../Application.c **** uint32_t SampleTime = 3500;					// Time between data collections in Input Thread
  19:../Application.c **** 
  20:../Application.c **** 
  21:../Application.c **** // Declare some helper routines so that I can simply add/remove progress messages
  22:../Application.c **** void DoWork(uint32_t Time, char* Name)
  23:../Application.c **** {
  48              		.loc 1 23 0
  49              		.cfi_startproc
  50              		@ args = 0, pretend = 0, frame = 8
  51              		@ frame_needed = 1, uses_anonymous_args = 0
  52 0000 00482DE9 		stmfd	sp!, {fp, lr}
  53              	.LCFI0:
  54              		.cfi_def_cfa_offset 8
  55 0004 04B08DE2 		add	fp, sp, #4
  56              		.cfi_offset 14, -4
  57              		.cfi_offset 11, -8
  58              	.LCFI1:
  59              		.cfi_def_cfa 11, 4
  60 0008 08D04DE2 		sub	sp, sp, #8
  61 000c 08000BE5 		str	r0, [fp, #-8]
  62 0010 0C100BE5 		str	r1, [fp, #-12]
  24:../Application.c **** 	DebugPrint(4, "\n%s is busy working", Name);
  63              		.loc 1 24 0
  64 0014 0400A0E3 		mov	r0, #4
  65 0018 14109FE5 		ldr	r1, .L2
  66 001c 0C201BE5 		ldr	r2, [fp, #-12]
  67 0020 FEFFFFEB 		bl	CyU3PDebugPrint
  25:../Application.c **** 	CyU3PThreadSleep(Time);
  68              		.loc 1 25 0
  69 0024 08001BE5 		ldr	r0, [fp, #-8]
  70 0028 FEFFFFEB 		bl	_tx_thread_sleep
  26:../Application.c **** }
  71              		.loc 1 26 0
  72 002c 04D04BE2 		sub	sp, fp, #4
  73 0030 0088BDE8 		ldmfd	sp!, {fp, pc}
  74              	.L3:
  75              		.align	2
  76              	.L2:
  77 0034 00000000 		.word	.LC0
  78              		.cfi_endproc
  79              	.LFE0:
  81              		.section	.rodata
  82              		.align	2
  83              	.LC1:
  84 0014 0A257320 		.ascii	"\012%s started\000"
  84      73746172 
  84      74656400 
  85              		.section	.text.InputDataThread,"ax",%progbits
  86              		.align	2
  87              		.global	InputDataThread
  89              	InputDataThread:
  90              	.LFB1:
  27:../Application.c **** 
  28:../Application.c **** // Declare main application code
  29:../Application.c **** void InputDataThread(uint32_t Value)
  30:../Application.c **** {
  91              		.loc 1 30 0
  92              		.cfi_startproc
  93              		@ args = 0, pretend = 0, frame = 24
  94              		@ frame_needed = 1, uses_anonymous_args = 0
  95 0000 00482DE9 		stmfd	sp!, {fp, lr}
  96              	.LCFI2:
  97              		.cfi_def_cfa_offset 8
  98 0004 04B08DE2 		add	fp, sp, #4
  99              		.cfi_offset 14, -4
 100              		.cfi_offset 11, -8
 101              	.LCFI3:
 102              		.cfi_def_cfa 11, 4
 103 0008 30D04DE2 		sub	sp, sp, #48
 104 000c 18000BE5 		str	r0, [fp, #-24]
  31:../Application.c ****     char* ThreadName;
  32:../Application.c ****     CyU3PThread *ThisThread;
  33:../Application.c ****     uint32_t i, CurrentValue;
  34:../Application.c **** 
  35:../Application.c **** 	ThisThread = CyU3PThreadIdentify();
 105              		.loc 1 35 0
 106 0010 FEFFFFEB 		bl	_tx_thread_identify
 107 0014 0C000BE5 		str	r0, [fp, #-12]
  36:../Application.c **** 	CyU3PThreadInfoGet(ThisThread, &ThreadName, 0, 0, 0);
 108              		.loc 1 36 0
 109 0018 10304BE2 		sub	r3, fp, #16
 110 001c 0020A0E3 		mov	r2, #0
 111 0020 00208DE5 		str	r2, [sp, #0]
 112 0024 0020A0E3 		mov	r2, #0
 113 0028 04208DE5 		str	r2, [sp, #4]
 114 002c 0020A0E3 		mov	r2, #0
 115 0030 08208DE5 		str	r2, [sp, #8]
 116 0034 0020A0E3 		mov	r2, #0
 117 0038 0C208DE5 		str	r2, [sp, #12]
 118 003c 0020A0E3 		mov	r2, #0
 119 0040 10208DE5 		str	r2, [sp, #16]
 120 0044 0C001BE5 		ldr	r0, [fp, #-12]
 121 0048 0310A0E1 		mov	r1, r3
 122 004c 0020A0E3 		mov	r2, #0
 123 0050 0030A0E3 		mov	r3, #0
 124 0054 FEFFFFEB 		bl	_txe_thread_info_get
  37:../Application.c **** 	DebugPrint(4, "\n%s started", ThreadName);
 125              		.loc 1 37 0
 126 0058 10301BE5 		ldr	r3, [fp, #-16]
 127 005c 0400A0E3 		mov	r0, #4
 128 0060 CC109FE5 		ldr	r1, .L10
 129 0064 0320A0E1 		mov	r2, r3
 130 0068 FEFFFFEB 		bl	CyU3PDebugPrint
 131              	.L9:
  38:../Application.c ****     // Now run forever
  39:../Application.c ****    	while (1)
  40:../Application.c ****    	{
  41:../Application.c ****    		// Gather some input data
  42:../Application.c ****    		for (i = 0; i<Elements(InputDataBuffer); i++) InputDataBuffer[i] = TempCounter++;
 132              		.loc 1 42 0
 133 006c 0030A0E3 		mov	r3, #0
 134 0070 08300BE5 		str	r3, [fp, #-8]
 135 0074 0A0000EA 		b	.L5
 136              	.L6:
 137              		.loc 1 42 0 is_stmt 0 discriminator 2
 138 0078 B8309FE5 		ldr	r3, .L10+4
 139 007c 003093E5 		ldr	r3, [r3, #0]
 140 0080 B4209FE5 		ldr	r2, .L10+8
 141 0084 08101BE5 		ldr	r1, [fp, #-8]
 142 0088 013182E7 		str	r3, [r2, r1, asl #2]
 143 008c 012083E2 		add	r2, r3, #1
 144 0090 A0309FE5 		ldr	r3, .L10+4
 145 0094 002083E5 		str	r2, [r3, #0]
 146 0098 08301BE5 		ldr	r3, [fp, #-8]
 147 009c 013083E2 		add	r3, r3, #1
 148 00a0 08300BE5 		str	r3, [fp, #-8]
 149              	.L5:
 150              		.loc 1 42 0 discriminator 1
 151 00a4 08301BE5 		ldr	r3, [fp, #-8]
 152 00a8 630053E3 		cmp	r3, #99
 153 00ac F1FFFF9A 		bls	.L6
  43:../Application.c ****    		DoWork(SampleTime, ThreadName);		// Pad the actual work for demonstration
 154              		.loc 1 43 0 is_stmt 1
 155 00b0 88309FE5 		ldr	r3, .L10+12
 156 00b4 002093E5 		ldr	r2, [r3, #0]
 157 00b8 10301BE5 		ldr	r3, [fp, #-16]
 158 00bc 0200A0E1 		mov	r0, r2
 159 00c0 0310A0E1 		mov	r1, r3
 160 00c4 FEFFFFEB 		bl	DoWork
  44:../Application.c ****    		TotalData++;
 161              		.loc 1 44 0
 162 00c8 74309FE5 		ldr	r3, .L10+16
 163 00cc 003093E5 		ldr	r3, [r3, #0]
 164 00d0 012083E2 		add	r2, r3, #1
 165 00d4 68309FE5 		ldr	r3, .L10+16
 166 00d8 002083E5 		str	r2, [r3, #0]
  45:../Application.c **** 		// Check that the previous data has been processed
  46:../Application.c **** 		tx_semaphore_info_get(&DataToProcess, 0, &CurrentValue, 0, 0, 0);
 167              		.loc 1 46 0
 168 00dc 14304BE2 		sub	r3, fp, #20
 169 00e0 0020A0E3 		mov	r2, #0
 170 00e4 00208DE5 		str	r2, [sp, #0]
 171 00e8 0020A0E3 		mov	r2, #0
 172 00ec 04208DE5 		str	r2, [sp, #4]
 173 00f0 50009FE5 		ldr	r0, .L10+20
 174 00f4 0010A0E3 		mov	r1, #0
 175 00f8 0320A0E1 		mov	r2, r3
 176 00fc 0030A0E3 		mov	r3, #0
 177 0100 FEFFFFEB 		bl	_txe_semaphore_info_get
  47:../Application.c **** 		if (CurrentValue == 1) DataOverrun++;
 178              		.loc 1 47 0
 179 0104 14301BE5 		ldr	r3, [fp, #-20]
 180 0108 010053E3 		cmp	r3, #1
 181 010c 0500001A 		bne	.L7
 182              		.loc 1 47 0 is_stmt 0 discriminator 1
 183 0110 34309FE5 		ldr	r3, .L10+24
 184 0114 003093E5 		ldr	r3, [r3, #0]
 185 0118 012083E2 		add	r2, r3, #1
 186 011c 28309FE5 		ldr	r3, .L10+24
 187 0120 002083E5 		str	r2, [r3, #0]
  48:../Application.c **** 		// Set an Semaphore to indicate at input data has been created/collected/found
  49:../Application.c **** 		else CyU3PSemaphorePut(&DataToProcess);
  50:../Application.c ****    	}
 188              		.loc 1 50 0 is_stmt 1 discriminator 1
 189 0124 D0FFFFEA 		b	.L9
 190              	.L7:
  49:../Application.c **** 		else CyU3PSemaphorePut(&DataToProcess);
 191              		.loc 1 49 0
 192 0128 18009FE5 		ldr	r0, .L10+20
 193 012c FEFFFFEB 		bl	_txe_semaphore_put
 194              		.loc 1 50 0
 195 0130 CDFFFFEA 		b	.L9
 196              	.L11:
 197              		.align	2
 198              	.L10:
 199 0134 14000000 		.word	.LC1
 200 0138 00000000 		.word	TempCounter
 201 013c 00000000 		.word	InputDataBuffer
 202 0140 00000000 		.word	SampleTime
 203 0144 00000000 		.word	TotalData
 204 0148 00000000 		.word	DataToProcess
 205 014c 00000000 		.word	DataOverrun
 206              		.cfi_endproc
 207              	.LFE1:
 209              		.section	.rodata
 210              		.align	2
 211              	.LC2:
 212 0020 0A476574 		.ascii	"\012Get on 'DataToProcess' error = %x\000"
 212      206F6E20 
 212      27446174 
 212      61546F50 
 212      726F6365 
 213              		.section	.text.ProcessDataThread,"ax",%progbits
 214              		.align	2
 215              		.global	ProcessDataThread
 217              	ProcessDataThread:
 218              	.LFB2:
  51:../Application.c **** }
  52:../Application.c **** 
  53:../Application.c **** void ProcessDataThread(uint32_t Value)
  54:../Application.c **** {
 219              		.loc 1 54 0
 220              		.cfi_startproc
 221              		@ args = 0, pretend = 0, frame = 32
 222              		@ frame_needed = 1, uses_anonymous_args = 0
 223 0000 00482DE9 		stmfd	sp!, {fp, lr}
 224              	.LCFI4:
 225              		.cfi_def_cfa_offset 8
 226 0004 04B08DE2 		add	fp, sp, #4
 227              		.cfi_offset 14, -4
 228              		.cfi_offset 11, -8
 229              	.LCFI5:
 230              		.cfi_def_cfa 11, 4
 231 0008 38D04DE2 		sub	sp, sp, #56
 232 000c 20000BE5 		str	r0, [fp, #-32]
  55:../Application.c ****     char* ThreadName;
  56:../Application.c ****     CyU3PThread *ThisThread;
  57:../Application.c ****     uint32_t i, j;
  58:../Application.c ****     uint16_t TX_Status;
  59:../Application.c **** 
  60:../Application.c **** 	ThisThread = CyU3PThreadIdentify();
 233              		.loc 1 60 0
 234 0010 FEFFFFEB 		bl	_tx_thread_identify
 235 0014 10000BE5 		str	r0, [fp, #-16]
  61:../Application.c **** 	CyU3PThreadInfoGet(ThisThread, &ThreadName, 0, 0, 0);
 236              		.loc 1 61 0
 237 0018 18304BE2 		sub	r3, fp, #24
 238 001c 0020A0E3 		mov	r2, #0
 239 0020 00208DE5 		str	r2, [sp, #0]
 240 0024 0020A0E3 		mov	r2, #0
 241 0028 04208DE5 		str	r2, [sp, #4]
 242 002c 0020A0E3 		mov	r2, #0
 243 0030 08208DE5 		str	r2, [sp, #8]
 244 0034 0020A0E3 		mov	r2, #0
 245 0038 0C208DE5 		str	r2, [sp, #12]
 246 003c 0020A0E3 		mov	r2, #0
 247 0040 10208DE5 		str	r2, [sp, #16]
 248 0044 10001BE5 		ldr	r0, [fp, #-16]
 249 0048 0310A0E1 		mov	r1, r3
 250 004c 0020A0E3 		mov	r2, #0
 251 0050 0030A0E3 		mov	r3, #0
 252 0054 FEFFFFEB 		bl	_txe_thread_info_get
  62:../Application.c **** 	DebugPrint(4, "\n%s started", ThreadName);
 253              		.loc 1 62 0
 254 0058 18301BE5 		ldr	r3, [fp, #-24]
 255 005c 0400A0E3 		mov	r0, #4
 256 0060 04119FE5 		ldr	r1, .L20
 257 0064 0320A0E1 		mov	r2, r3
 258 0068 FEFFFFEB 		bl	CyU3PDebugPrint
 259              	.L19:
  63:../Application.c ****     // Now run forever
  64:../Application.c ****    	while (1)
  65:../Application.c ****    	{
  66:../Application.c ****    		// Wait for some input data to process
  67:../Application.c ****    		TX_Status = tx_semaphore_get(&DataToProcess, A_LONG_TIME);
 260              		.loc 1 67 0
 261 006c FC009FE5 		ldr	r0, .L20+4
 262 0070 FC109FE5 		ldr	r1, .L20+8
 263 0074 FEFFFFEB 		bl	_txe_semaphore_get
 264 0078 0030A0E1 		mov	r3, r0
 265 007c B2314BE1 		strh	r3, [fp, #-18]	@ movhi
  68:../Application.c ****    		if (TX_Status) DebugPrint(4, "\nGet on 'DataToProcess' error = %x", TX_Status);
 266              		.loc 1 68 0
 267 0080 B2315BE1 		ldrh	r3, [fp, #-18]
 268 0084 000053E3 		cmp	r3, #0
 269 0088 0500000A 		beq	.L13
 270              		.loc 1 68 0 is_stmt 0 discriminator 1
 271 008c B2315BE1 		ldrh	r3, [fp, #-18]
 272 0090 0400A0E3 		mov	r0, #4
 273 0094 DC109FE5 		ldr	r1, .L20+12
 274 0098 0320A0E1 		mov	r2, r3
 275 009c FEFFFFEB 		bl	CyU3PDebugPrint
  69:../Application.c ****    		else
  70:../Application.c ****    		{
  71:../Application.c **** 			for (i = 0; i<Elements(ProcessedDataBuffer); i++)
  72:../Application.c **** 			{
  73:../Application.c **** 				ProcessedDataBuffer[i] = 0;
  74:../Application.c **** 				for (j = 0; j<10; j++) ProcessedDataBuffer[i] += InputDataBuffer[(10*i)+j];
  75:../Application.c **** 			}
  76:../Application.c **** 			DoWork(2000, ThreadName);		// Pad the actual work for demonstration
  77:../Application.c **** 			// Hand off the processed data to the Output thread
  78:../Application.c **** 			CyU3PSemaphorePut(&DataToOutput);
  79:../Application.c **** 			// Do any tidy-up required
  80:../Application.c **** 			DoWork(100, ThreadName);
  81:../Application.c **** 			// Go back and find more work
  82:../Application.c ****    		}
  83:../Application.c ****     }
 276              		.loc 1 83 0 is_stmt 1 discriminator 1
 277 00a0 F1FFFFEA 		b	.L19
 278              	.L13:
  71:../Application.c **** 			for (i = 0; i<Elements(ProcessedDataBuffer); i++)
 279              		.loc 1 71 0
 280 00a4 0030A0E3 		mov	r3, #0
 281 00a8 08300BE5 		str	r3, [fp, #-8]
 282 00ac 200000EA 		b	.L15
 283              	.L18:
  73:../Application.c **** 				ProcessedDataBuffer[i] = 0;
 284              		.loc 1 73 0
 285 00b0 C4309FE5 		ldr	r3, .L20+16
 286 00b4 08201BE5 		ldr	r2, [fp, #-8]
 287 00b8 0010A0E3 		mov	r1, #0
 288 00bc 021183E7 		str	r1, [r3, r2, asl #2]
  74:../Application.c **** 				for (j = 0; j<10; j++) ProcessedDataBuffer[i] += InputDataBuffer[(10*i)+j];
 289              		.loc 1 74 0
 290 00c0 0030A0E3 		mov	r3, #0
 291 00c4 0C300BE5 		str	r3, [fp, #-12]
 292 00c8 130000EA 		b	.L16
 293              	.L17:
  74:../Application.c **** 				for (j = 0; j<10; j++) ProcessedDataBuffer[i] += InputDataBuffer[(10*i)+j];
 294              		.loc 1 74 0 is_stmt 0 discriminator 2
 295 00cc A8309FE5 		ldr	r3, .L20+16
 296 00d0 08201BE5 		ldr	r2, [fp, #-8]
 297 00d4 021193E7 		ldr	r1, [r3, r2, asl #2]
 298 00d8 08201BE5 		ldr	r2, [fp, #-8]
 299 00dc 0230A0E1 		mov	r3, r2
 300 00e0 0331A0E1 		mov	r3, r3, asl #2
 301 00e4 023083E0 		add	r3, r3, r2
 302 00e8 8330A0E1 		mov	r3, r3, asl #1
 303 00ec 0320A0E1 		mov	r2, r3
 304 00f0 0C301BE5 		ldr	r3, [fp, #-12]
 305 00f4 032082E0 		add	r2, r2, r3
 306 00f8 80309FE5 		ldr	r3, .L20+20
 307 00fc 023193E7 		ldr	r3, [r3, r2, asl #2]
 308 0100 031081E0 		add	r1, r1, r3
 309 0104 70309FE5 		ldr	r3, .L20+16
 310 0108 08201BE5 		ldr	r2, [fp, #-8]
 311 010c 021183E7 		str	r1, [r3, r2, asl #2]
 312 0110 0C301BE5 		ldr	r3, [fp, #-12]
 313 0114 013083E2 		add	r3, r3, #1
 314 0118 0C300BE5 		str	r3, [fp, #-12]
 315              	.L16:
  74:../Application.c **** 				for (j = 0; j<10; j++) ProcessedDataBuffer[i] += InputDataBuffer[(10*i)+j];
 316              		.loc 1 74 0 discriminator 1
 317 011c 0C301BE5 		ldr	r3, [fp, #-12]
 318 0120 090053E3 		cmp	r3, #9
 319 0124 E8FFFF9A 		bls	.L17
  71:../Application.c **** 			for (i = 0; i<Elements(ProcessedDataBuffer); i++)
 320              		.loc 1 71 0 is_stmt 1
 321 0128 08301BE5 		ldr	r3, [fp, #-8]
 322 012c 013083E2 		add	r3, r3, #1
 323 0130 08300BE5 		str	r3, [fp, #-8]
 324              	.L15:
  71:../Application.c **** 			for (i = 0; i<Elements(ProcessedDataBuffer); i++)
 325              		.loc 1 71 0 is_stmt 0 discriminator 1
 326 0134 08301BE5 		ldr	r3, [fp, #-8]
 327 0138 090053E3 		cmp	r3, #9
 328 013c DBFFFF9A 		bls	.L18
  76:../Application.c **** 			DoWork(2000, ThreadName);		// Pad the actual work for demonstration
 329              		.loc 1 76 0 is_stmt 1
 330 0140 18301BE5 		ldr	r3, [fp, #-24]
 331 0144 7D0EA0E3 		mov	r0, #2000
 332 0148 0310A0E1 		mov	r1, r3
 333 014c FEFFFFEB 		bl	DoWork
  78:../Application.c **** 			CyU3PSemaphorePut(&DataToOutput);
 334              		.loc 1 78 0
 335 0150 2C009FE5 		ldr	r0, .L20+24
 336 0154 FEFFFFEB 		bl	_txe_semaphore_put
  80:../Application.c **** 			DoWork(100, ThreadName);
 337              		.loc 1 80 0
 338 0158 18301BE5 		ldr	r3, [fp, #-24]
 339 015c 6400A0E3 		mov	r0, #100
 340 0160 0310A0E1 		mov	r1, r3
 341 0164 FEFFFFEB 		bl	DoWork
 342              		.loc 1 83 0
 343 0168 BFFFFFEA 		b	.L19
 344              	.L21:
 345              		.align	2
 346              	.L20:
 347 016c 14000000 		.word	.LC1
 348 0170 00000000 		.word	DataToProcess
 349 0174 10270000 		.word	10000
 350 0178 20000000 		.word	.LC2
 351 017c 00000000 		.word	ProcessedDataBuffer
 352 0180 00000000 		.word	InputDataBuffer
 353 0184 00000000 		.word	DataToOutput
 354              		.cfi_endproc
 355              	.LFE2:
 357              		.section	.rodata
 358 0043 00       		.align	2
 359              	.LC3:
 360 0044 0A476574 		.ascii	"\012Get on 'DataToOutput' error = %x\000"
 360      206F6E20 
 360      27446174 
 360      61546F4F 
 360      75747075 
 361              		.section	.text.OutputDataThread,"ax",%progbits
 362              		.align	2
 363              		.global	OutputDataThread
 365              	OutputDataThread:
 366              	.LFB3:
  84:../Application.c **** }
  85:../Application.c **** 
  86:../Application.c **** void OutputDataThread(uint32_t Value)
  87:../Application.c **** {
 367              		.loc 1 87 0
 368              		.cfi_startproc
 369              		@ args = 0, pretend = 0, frame = 24
 370              		@ frame_needed = 1, uses_anonymous_args = 0
 371 0000 00482DE9 		stmfd	sp!, {fp, lr}
 372              	.LCFI6:
 373              		.cfi_def_cfa_offset 8
 374 0004 04B08DE2 		add	fp, sp, #4
 375              		.cfi_offset 14, -4
 376              		.cfi_offset 11, -8
 377              	.LCFI7:
 378              		.cfi_def_cfa 11, 4
 379 0008 30D04DE2 		sub	sp, sp, #48
 380 000c 18000BE5 		str	r0, [fp, #-24]
  88:../Application.c ****     char* ThreadName;
  89:../Application.c ****     CyU3PThread *ThisThread;
  90:../Application.c ****     uint16_t TX_Status;
  91:../Application.c **** 
  92:../Application.c **** 	ThisThread = CyU3PThreadIdentify();
 381              		.loc 1 92 0
 382 0010 FEFFFFEB 		bl	_tx_thread_identify
 383 0014 08000BE5 		str	r0, [fp, #-8]
  93:../Application.c **** 	CyU3PThreadInfoGet(ThisThread, &ThreadName, 0, 0, 0);
 384              		.loc 1 93 0
 385 0018 10304BE2 		sub	r3, fp, #16
 386 001c 0020A0E3 		mov	r2, #0
 387 0020 00208DE5 		str	r2, [sp, #0]
 388 0024 0020A0E3 		mov	r2, #0
 389 0028 04208DE5 		str	r2, [sp, #4]
 390 002c 0020A0E3 		mov	r2, #0
 391 0030 08208DE5 		str	r2, [sp, #8]
 392 0034 0020A0E3 		mov	r2, #0
 393 0038 0C208DE5 		str	r2, [sp, #12]
 394 003c 0020A0E3 		mov	r2, #0
 395 0040 10208DE5 		str	r2, [sp, #16]
 396 0044 08001BE5 		ldr	r0, [fp, #-8]
 397 0048 0310A0E1 		mov	r1, r3
 398 004c 0020A0E3 		mov	r2, #0
 399 0050 0030A0E3 		mov	r3, #0
 400 0054 FEFFFFEB 		bl	_txe_thread_info_get
  94:../Application.c **** 	DebugPrint(4, "\n%s started", ThreadName);
 401              		.loc 1 94 0
 402 0058 10301BE5 		ldr	r3, [fp, #-16]
 403 005c 0400A0E3 		mov	r0, #4
 404 0060 4C109FE5 		ldr	r1, .L25
 405 0064 0320A0E1 		mov	r2, r3
 406 0068 FEFFFFEB 		bl	CyU3PDebugPrint
 407              	.L24:
  95:../Application.c ****     // Now run forever
  96:../Application.c ****    	while (1)
  97:../Application.c ****    	{
  98:../Application.c ****    		// Wait for some processed data to output
  99:../Application.c ****    		TX_Status = tx_semaphore_get(&DataToOutput, A_LONG_TIME);
 408              		.loc 1 99 0
 409 006c 44009FE5 		ldr	r0, .L25+4
 410 0070 44109FE5 		ldr	r1, .L25+8
 411 0074 FEFFFFEB 		bl	_txe_semaphore_get
 412 0078 0030A0E1 		mov	r3, r0
 413 007c BA304BE1 		strh	r3, [fp, #-10]	@ movhi
 100:../Application.c ****    		if (TX_Status) DebugPrint(4, "\nGet on 'DataToOutput' error = %x", TX_Status);
 414              		.loc 1 100 0
 415 0080 BA305BE1 		ldrh	r3, [fp, #-10]
 416 0084 000053E3 		cmp	r3, #0
 417 0088 0400000A 		beq	.L23
 418              		.loc 1 100 0 is_stmt 0 discriminator 1
 419 008c BA305BE1 		ldrh	r3, [fp, #-10]
 420 0090 0400A0E3 		mov	r0, #4
 421 0094 24109FE5 		ldr	r1, .L25+12
 422 0098 0320A0E1 		mov	r2, r3
 423 009c FEFFFFEB 		bl	CyU3PDebugPrint
 424              	.L23:
 101:../Application.c ****    		DoWork(1000, ThreadName);		// Pad the actual work for demonstration
 425              		.loc 1 101 0 is_stmt 1
 426 00a0 10301BE5 		ldr	r3, [fp, #-16]
 427 00a4 FA0FA0E3 		mov	r0, #1000
 428 00a8 0310A0E1 		mov	r1, r3
 429 00ac FEFFFFEB 		bl	DoWork
 102:../Application.c ****    		// Go back and find more work
 103:../Application.c ****     }
 430              		.loc 1 103 0
 431 00b0 EDFFFFEA 		b	.L24
 432              	.L26:
 433              		.align	2
 434              	.L25:
 435 00b4 14000000 		.word	.LC1
 436 00b8 00000000 		.word	DataToOutput
 437 00bc 10270000 		.word	10000
 438 00c0 44000000 		.word	.LC3
 439              		.cfi_endproc
 440              	.LFE3:
 442              		.section	.rodata
 443 0066 0000     		.align	2
 444              	.LC4:
 445 0068 456E6162 		.ascii	"Enable DebugConsole\000"
 445      6C652044 
 445      65627567 
 445      436F6E73 
 445      6F6C6500 
 446              		.align	2
 447              	.LC5:
 448 007c 43726561 		.ascii	"Create ToProcess Semaphore\000"
 448      74652054 
 448      6F50726F 
 448      63657373 
 448      2053656D 
 449 0097 00       		.align	2
 450              	.LC6:
 451 0098 43726561 		.ascii	"Create ToOutput Semaphore\000"
 451      74652054 
 451      6F4F7574 
 451      70757420 
 451      53656D61 
 452 00b2 0000     		.align	2
 453              	.LC7:
 454 00b4 31303A49 		.ascii	"10:Input_Thread\000"
 454      6E707574 
 454      5F546872 
 454      65616400 
 455              		.align	2
 456              	.LC8:
 457 00c4 53746172 		.ascii	"Start InputData\000"
 457      7420496E 
 457      70757444 
 457      61746100 
 458              		.align	2
 459              	.LC9:
 460 00d4 31313A50 		.ascii	"11:Process_Thread\000"
 460      726F6365 
 460      73735F54 
 460      68726561 
 460      6400
 461 00e6 0000     		.align	2
 462              	.LC10:
 463 00e8 53746172 		.ascii	"Start ProcessData\000"
 463      74205072 
 463      6F636573 
 463      73446174 
 463      6100
 464 00fa 0000     		.align	2
 465              	.LC11:
 466 00fc 31323A4F 		.ascii	"12:Output_Thread\000"
 466      75747075 
 466      745F5468 
 466      72656164 
 466      00
 467 010d 000000   		.align	2
 468              	.LC12:
 469 0110 53746172 		.ascii	"Start OutputData\000"
 469      74204F75 
 469      74707574 
 469      44617461 
 469      00
 470 0121 000000   		.align	2
 471              	.LC13:
 472 0124 0A417420 		.ascii	"\012At %d seconds, Missed Data = %d/%d\000"
 472      25642073 
 472      65636F6E 
 472      64732C20 
 472      4D697373 
 473              		.section	.text.CyFxApplicationDefine,"ax",%progbits
 474              		.align	2
 475              		.global	CyFxApplicationDefine
 477              	CyFxApplicationDefine:
 478              	.LFB4:
 104:../Application.c **** }
 105:../Application.c **** 
 106:../Application.c **** // ApplicationDefine function called by RTOS to startup the application threads
 107:../Application.c **** void CyFxApplicationDefine(void)
 108:../Application.c **** {
 479              		.loc 1 108 0
 480              		.cfi_startproc
 481              		@ args = 0, pretend = 0, frame = 8
 482              		@ frame_needed = 1, uses_anonymous_args = 0
 483 0000 00482DE9 		stmfd	sp!, {fp, lr}
 484              	.LCFI8:
 485              		.cfi_def_cfa_offset 8
 486 0004 04B08DE2 		add	fp, sp, #4
 487              		.cfi_offset 14, -4
 488              		.cfi_offset 11, -8
 489              	.LCFI9:
 490              		.cfi_def_cfa 11, 4
 491 0008 28D04DE2 		sub	sp, sp, #40
 109:../Application.c ****     void *StackPtr;
 110:../Application.c ****     uint32_t Status;
 111:../Application.c **** 
 112:../Application.c ****     // First, get a debug console running so that we can display some progress
 113:../Application.c ****     // This DebugConsole will run in its own thread
 114:../Application.c ****     Status = InitializeDebugConsole();
 492              		.loc 1 114 0
 493 000c FEFFFFEB 		bl	InitializeDebugConsole
 494 0010 08000BE5 		str	r0, [fp, #-8]
 115:../Application.c ****     CheckStatus("Enable DebugConsole", Status);
 495              		.loc 1 115 0
 496 0014 C4019FE5 		ldr	r0, .L29
 497 0018 08101BE5 		ldr	r1, [fp, #-8]
 498 001c FEFFFFEB 		bl	CheckStatus
 116:../Application.c **** 
 117:../Application.c ****     // Create two semaphores that the threads will use to communicate
 118:../Application.c ****     Status = CyU3PSemaphoreCreate(&DataToProcess, 0);
 499              		.loc 1 118 0
 500 0020 BC019FE5 		ldr	r0, .L29+4
 501 0024 0010A0E3 		mov	r1, #0
 502 0028 0020A0E3 		mov	r2, #0
 503 002c 2430A0E3 		mov	r3, #36
 504 0030 FEFFFFEB 		bl	_txe_semaphore_create
 505 0034 08000BE5 		str	r0, [fp, #-8]
 119:../Application.c ****     CheckStatus("Create ToProcess Semaphore", Status);
 506              		.loc 1 119 0
 507 0038 A8019FE5 		ldr	r0, .L29+8
 508 003c 08101BE5 		ldr	r1, [fp, #-8]
 509 0040 FEFFFFEB 		bl	CheckStatus
 120:../Application.c ****     Status = CyU3PSemaphoreCreate(&DataToOutput, 0);
 510              		.loc 1 120 0
 511 0044 A0019FE5 		ldr	r0, .L29+12
 512 0048 0010A0E3 		mov	r1, #0
 513 004c 0020A0E3 		mov	r2, #0
 514 0050 2430A0E3 		mov	r3, #36
 515 0054 FEFFFFEB 		bl	_txe_semaphore_create
 516 0058 08000BE5 		str	r0, [fp, #-8]
 121:../Application.c ****     CheckStatus("Create ToOutput Semaphore", Status);
 517              		.loc 1 121 0
 518 005c 8C019FE5 		ldr	r0, .L29+16
 519 0060 08101BE5 		ldr	r1, [fp, #-8]
 520 0064 FEFFFFEB 		bl	CheckStatus
 122:../Application.c **** 
 123:../Application.c ****     // Create three threads, InputData, ProcessData and OutputData.  Each will need a stack
 124:../Application.c ****     StackPtr = CyU3PMemAlloc(APPLICATION_THREAD_STACK);
 521              		.loc 1 124 0
 522 0068 010AA0E3 		mov	r0, #4096
 523 006c FEFFFFEB 		bl	CyU3PMemAlloc
 524 0070 0C000BE5 		str	r0, [fp, #-12]
 125:../Application.c ****     Status = CyU3PThreadCreate(&ThreadHandle[0],// Handle for this Thread
 525              		.loc 1 125 0
 526 0074 0C301BE5 		ldr	r3, [fp, #-12]
 527 0078 00308DE5 		str	r3, [sp, #0]
 528 007c 013AA0E3 		mov	r3, #4096
 529 0080 04308DE5 		str	r3, [sp, #4]
 530 0084 0F30A0E3 		mov	r3, #15
 531 0088 08308DE5 		str	r3, [sp, #8]
 532 008c 0F30A0E3 		mov	r3, #15
 533 0090 0C308DE5 		str	r3, [sp, #12]
 534 0094 0030A0E3 		mov	r3, #0
 535 0098 10308DE5 		str	r3, [sp, #16]
 536 009c 0130A0E3 		mov	r3, #1
 537 00a0 14308DE5 		str	r3, [sp, #20]
 538 00a4 D430A0E3 		mov	r3, #212
 539 00a8 18308DE5 		str	r3, [sp, #24]
 540 00ac 40019FE5 		ldr	r0, .L29+20
 541 00b0 40119FE5 		ldr	r1, .L29+24
 542 00b4 40219FE5 		ldr	r2, .L29+28
 543 00b8 0030A0E3 		mov	r3, #0
 544 00bc FEFFFFEB 		bl	_txe_thread_create
 545 00c0 08000BE5 		str	r0, [fp, #-8]
 126:../Application.c ****             "10:Input_Thread",                	// Thread ID and name
 127:../Application.c ****             InputDataThread,     				// Thread function
 128:../Application.c ****             0,                             		// Parameter passed to Thread
 129:../Application.c ****             StackPtr,                       	// Pointer to the allocated thread stack
 130:../Application.c ****             APPLICATION_THREAD_STACK,			// Allocated thread stack size
 131:../Application.c ****             INPUT_DATA_THREAD_PRIORITY,			// Thread priority
 132:../Application.c ****             INPUT_DATA_THREAD_PRIORITY,			// = Thread priority so no preemption
 133:../Application.c ****             CYU3P_NO_TIME_SLICE,            	// Time slice no supported
 134:../Application.c ****             CYU3P_AUTO_START);                	// Start the thread immediately
 135:../Application.c ****     CheckStatus("Start InputData", Status);
 546              		.loc 1 135 0
 547 00c4 34019FE5 		ldr	r0, .L29+32
 548 00c8 08101BE5 		ldr	r1, [fp, #-8]
 549 00cc FEFFFFEB 		bl	CheckStatus
 136:../Application.c ****     StackPtr = CyU3PMemAlloc(APPLICATION_THREAD_STACK);
 550              		.loc 1 136 0
 551 00d0 010AA0E3 		mov	r0, #4096
 552 00d4 FEFFFFEB 		bl	CyU3PMemAlloc
 553 00d8 0C000BE5 		str	r0, [fp, #-12]
 137:../Application.c ****     Status = CyU3PThreadCreate(&ThreadHandle[1],// Handle for this Thread
 554              		.loc 1 137 0
 555 00dc 0C301BE5 		ldr	r3, [fp, #-12]
 556 00e0 00308DE5 		str	r3, [sp, #0]
 557 00e4 013AA0E3 		mov	r3, #4096
 558 00e8 04308DE5 		str	r3, [sp, #4]
 559 00ec 0F30A0E3 		mov	r3, #15
 560 00f0 08308DE5 		str	r3, [sp, #8]
 561 00f4 0F30A0E3 		mov	r3, #15
 562 00f8 0C308DE5 		str	r3, [sp, #12]
 563 00fc 0030A0E3 		mov	r3, #0
 564 0100 10308DE5 		str	r3, [sp, #16]
 565 0104 0130A0E3 		mov	r3, #1
 566 0108 14308DE5 		str	r3, [sp, #20]
 567 010c D430A0E3 		mov	r3, #212
 568 0110 18308DE5 		str	r3, [sp, #24]
 569 0114 E8009FE5 		ldr	r0, .L29+36
 570 0118 E8109FE5 		ldr	r1, .L29+40
 571 011c E8209FE5 		ldr	r2, .L29+44
 572 0120 0130A0E3 		mov	r3, #1
 573 0124 FEFFFFEB 		bl	_txe_thread_create
 574 0128 08000BE5 		str	r0, [fp, #-8]
 138:../Application.c ****             "11:Process_Thread",                // Thread ID and name
 139:../Application.c ****             ProcessDataThread,     				// Thread function
 140:../Application.c ****             1,                             		// Parameter passed to Thread
 141:../Application.c ****             StackPtr,                       	// Pointer to the allocated thread stack
 142:../Application.c ****             APPLICATION_THREAD_STACK,			// Allocated thread stack size
 143:../Application.c ****             PROCESS_DATA_THREAD_PRIORITY,		// Thread priority
 144:../Application.c ****             PROCESS_DATA_THREAD_PRIORITY,		// = Thread priority so no preemption
 145:../Application.c ****             CYU3P_NO_TIME_SLICE,            	// Time slice no supported
 146:../Application.c ****             CYU3P_AUTO_START);                	// Start the thread immediately
 147:../Application.c ****     CheckStatus("Start ProcessData", Status);
 575              		.loc 1 147 0
 576 012c DC009FE5 		ldr	r0, .L29+48
 577 0130 08101BE5 		ldr	r1, [fp, #-8]
 578 0134 FEFFFFEB 		bl	CheckStatus
 148:../Application.c ****     StackPtr = CyU3PMemAlloc(APPLICATION_THREAD_STACK);
 579              		.loc 1 148 0
 580 0138 010AA0E3 		mov	r0, #4096
 581 013c FEFFFFEB 		bl	CyU3PMemAlloc
 582 0140 0C000BE5 		str	r0, [fp, #-12]
 149:../Application.c ****     Status = CyU3PThreadCreate(&ThreadHandle[2],// Handle for this Thread
 583              		.loc 1 149 0
 584 0144 0C301BE5 		ldr	r3, [fp, #-12]
 585 0148 00308DE5 		str	r3, [sp, #0]
 586 014c 013AA0E3 		mov	r3, #4096
 587 0150 04308DE5 		str	r3, [sp, #4]
 588 0154 0F30A0E3 		mov	r3, #15
 589 0158 08308DE5 		str	r3, [sp, #8]
 590 015c 0F30A0E3 		mov	r3, #15
 591 0160 0C308DE5 		str	r3, [sp, #12]
 592 0164 0030A0E3 		mov	r3, #0
 593 0168 10308DE5 		str	r3, [sp, #16]
 594 016c 0130A0E3 		mov	r3, #1
 595 0170 14308DE5 		str	r3, [sp, #20]
 596 0174 D430A0E3 		mov	r3, #212
 597 0178 18308DE5 		str	r3, [sp, #24]
 598 017c 90009FE5 		ldr	r0, .L29+52
 599 0180 90109FE5 		ldr	r1, .L29+56
 600 0184 90209FE5 		ldr	r2, .L29+60
 601 0188 0230A0E3 		mov	r3, #2
 602 018c FEFFFFEB 		bl	_txe_thread_create
 603 0190 08000BE5 		str	r0, [fp, #-8]
 150:../Application.c ****     		"12:Output_Thread",                	// Thread ID and name
 151:../Application.c ****     		OutputDataThread,     				// Thread function
 152:../Application.c ****     		2,                             		// Parameter passed to Thread
 153:../Application.c ****     		StackPtr,                       	// Pointer to the allocated thread stack
 154:../Application.c ****     		APPLICATION_THREAD_STACK,			// Allocated thread stack size
 155:../Application.c ****     		OUTPUT_DATA_THREAD_PRIORITY,        // Thread priority
 156:../Application.c ****     		OUTPUT_DATA_THREAD_PRIORITY,		// = Thread priority so no preemption
 157:../Application.c ****     		CYU3P_NO_TIME_SLICE,            	// Time slice no supported
 158:../Application.c ****     		CYU3P_AUTO_START);					// Start the thread immediately
 159:../Application.c ****     CheckStatus("Start OutputData", Status);
 604              		.loc 1 159 0
 605 0194 84009FE5 		ldr	r0, .L29+64
 606 0198 08101BE5 		ldr	r1, [fp, #-8]
 607 019c FEFFFFEB 		bl	CheckStatus
 608              	.L28:
 160:../Application.c **** 
 161:../Application.c ****     // This thread now becomes a monitoring function that displays statistics of the other two thre
 162:../Application.c ****     // Check for missed data every 10 seconds
 163:../Application.c ****     while(1)
 164:../Application.c ****     {
 165:../Application.c ****     	CyU3PThreadSleep(10000);
 609              		.loc 1 165 0 discriminator 1
 610 01a0 7C009FE5 		ldr	r0, .L29+68
 611 01a4 FEFFFFEB 		bl	_tx_thread_sleep
 166:../Application.c **** 		DebugPrint(4, "\nAt %d seconds, Missed Data = %d/%d", CyU3PGetTime()/1000, DataOverrun, TotalData
 612              		.loc 1 166 0 discriminator 1
 613 01a8 FEFFFFEB 		bl	_tx_time_get
 614 01ac 0020A0E1 		mov	r2, r0
 615 01b0 70309FE5 		ldr	r3, .L29+72
 616 01b4 921383E0 		umull	r1, r3, r2, r3
 617 01b8 2323A0E1 		mov	r2, r3, lsr #6
 618 01bc 68309FE5 		ldr	r3, .L29+76
 619 01c0 003093E5 		ldr	r3, [r3, #0]
 620 01c4 64109FE5 		ldr	r1, .L29+80
 621 01c8 001091E5 		ldr	r1, [r1, #0]
 622 01cc 00108DE5 		str	r1, [sp, #0]
 623 01d0 0400A0E3 		mov	r0, #4
 624 01d4 58109FE5 		ldr	r1, .L29+84
 625 01d8 FEFFFFEB 		bl	CyU3PDebugPrint
 167:../Application.c ****     }
 626              		.loc 1 167 0 discriminator 1
 627 01dc EFFFFFEA 		b	.L28
 628              	.L30:
 629              		.align	2
 630              	.L29:
 631 01e0 68000000 		.word	.LC4
 632 01e4 00000000 		.word	DataToProcess
 633 01e8 7C000000 		.word	.LC5
 634 01ec 00000000 		.word	DataToOutput
 635 01f0 98000000 		.word	.LC6
 636 01f4 00000000 		.word	ThreadHandle
 637 01f8 B4000000 		.word	.LC7
 638 01fc 00000000 		.word	InputDataThread
 639 0200 C4000000 		.word	.LC8
 640 0204 D4000000 		.word	ThreadHandle+212
 641 0208 D4000000 		.word	.LC9
 642 020c 00000000 		.word	ProcessDataThread
 643 0210 E8000000 		.word	.LC10
 644 0214 A8010000 		.word	ThreadHandle+424
 645 0218 FC000000 		.word	.LC11
 646 021c 00000000 		.word	OutputDataThread
 647 0220 10010000 		.word	.LC12
 648 0224 10270000 		.word	10000
 649 0228 D34D6210 		.word	274877907
 650 022c 00000000 		.word	DataOverrun
 651 0230 00000000 		.word	TotalData
 652 0234 24010000 		.word	.LC13
 653              		.cfi_endproc
 654              	.LFE4:
 656              		.text
 657              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 Application.c
                            *COM*:0000027c ThreadHandle
                            *COM*:00000024 DataToProcess
                            *COM*:00000024 DataToOutput
                            *COM*:00000040 InputDataTimer
                            *COM*:00000004 DataOverrun
                            *COM*:00000004 TotalData
                            *COM*:00000190 InputDataBuffer
                            *COM*:00000028 ProcessedDataBuffer
                            *COM*:00000004 TempCounter
C:\Users\John\AppData\Local\Temp\cc3jCfEo.s:35     .data.SampleTime:00000000 SampleTime
C:\Users\John\AppData\Local\Temp\cc3jCfEo.s:32     .data.SampleTime:00000000 $d
C:\Users\John\AppData\Local\Temp\cc3jCfEo.s:38     .rodata:00000000 $d
C:\Users\John\AppData\Local\Temp\cc3jCfEo.s:42     .text.DoWork:00000000 $a
C:\Users\John\AppData\Local\Temp\cc3jCfEo.s:45     .text.DoWork:00000000 DoWork
C:\Users\John\AppData\Local\Temp\cc3jCfEo.s:77     .text.DoWork:00000034 $d
C:\Users\John\AppData\Local\Temp\cc3jCfEo.s:86     .text.InputDataThread:00000000 $a
C:\Users\John\AppData\Local\Temp\cc3jCfEo.s:89     .text.InputDataThread:00000000 InputDataThread
C:\Users\John\AppData\Local\Temp\cc3jCfEo.s:199    .text.InputDataThread:00000134 $d
C:\Users\John\AppData\Local\Temp\cc3jCfEo.s:214    .text.ProcessDataThread:00000000 $a
C:\Users\John\AppData\Local\Temp\cc3jCfEo.s:217    .text.ProcessDataThread:00000000 ProcessDataThread
C:\Users\John\AppData\Local\Temp\cc3jCfEo.s:347    .text.ProcessDataThread:0000016c $d
C:\Users\John\AppData\Local\Temp\cc3jCfEo.s:362    .text.OutputDataThread:00000000 $a
C:\Users\John\AppData\Local\Temp\cc3jCfEo.s:365    .text.OutputDataThread:00000000 OutputDataThread
C:\Users\John\AppData\Local\Temp\cc3jCfEo.s:435    .text.OutputDataThread:000000b4 $d
C:\Users\John\AppData\Local\Temp\cc3jCfEo.s:474    .text.CyFxApplicationDefine:00000000 $a
C:\Users\John\AppData\Local\Temp\cc3jCfEo.s:477    .text.CyFxApplicationDefine:00000000 CyFxApplicationDefine
C:\Users\John\AppData\Local\Temp\cc3jCfEo.s:631    .text.CyFxApplicationDefine:000001e0 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
CyU3PDebugPrint
_tx_thread_sleep
_tx_thread_identify
_txe_thread_info_get
_txe_semaphore_info_get
_txe_semaphore_put
_txe_semaphore_get
InitializeDebugConsole
CheckStatus
_txe_semaphore_create
CyU3PMemAlloc
_txe_thread_create
_tx_time_get
