   1              		.cpu arm926ej-s
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 18, 4
  11              		.file	"DebugConsole.c"
  19              	.Ltext0:
  20              		.cfi_sections	.debug_frame
  21              		.section	.bss.DebugTxEnabled,"aw",%nobits
  22              		.align	2
  25              	DebugTxEnabled:
  26 0000 00000000 		.space	4
  27              		.section	.bss.UARTtoCPU_Handle,"aw",%nobits
  28              		.align	2
  31              	UARTtoCPU_Handle:
  32 0000 00000000 		.space	220
  32      00000000 
  32      00000000 
  32      00000000 
  32      00000000 
  33              		.section	.bss.ConsoleInBuffer,"aw",%nobits
  34              		.align	2
  37              	ConsoleInBuffer:
  38 0000 00000000 		.space	32
  38      00000000 
  38      00000000 
  38      00000000 
  38      00000000 
  39              		.section	.bss.ConsoleInIndex,"aw",%nobits
  40              		.align	2
  43              	ConsoleInIndex:
  44 0000 00000000 		.space	4
  45              		.section	.rodata
  46              		.align	2
  47              	.LC0:
  48 0000 0A257320 		.ascii	"\012%s Successful\000"
  48      53756363 
  48      65737366 
  48      756C00
  49 000f 00       		.align	2
  50              	.LC1:
  51 0010 0A257320 		.ascii	"\012%s failed, Status = %d\012\000"
  51      6661696C 
  51      65642C20 
  51      53746174 
  51      7573203D 
  52 0029 000000   		.align	2
  53              	.LC2:
  54 002c 3F00     		.ascii	"?\000"
  55              		.section	.text.CheckStatus,"ax",%progbits
  56              		.align	2
  57              		.global	CheckStatus
  59              	CheckStatus:
  60              	.LFB0:
  61              		.file 1 "../DebugConsole.c"
   1:../DebugConsole.c **** // DebugConsole.c	include the Cypress UART-based Debug Console into the project
   2:../DebugConsole.c **** 
   3:../DebugConsole.c **** #include "Application.h"
   4:../DebugConsole.c **** 
   5:../DebugConsole.c **** extern uint32_t SampleTime;						// Application variable that we need to change
   6:../DebugConsole.c **** extern CyU3PThread ThreadHandle[APP_THREADS];	// Handles to my Application Threads
   7:../DebugConsole.c **** extern void *StackPtr[APP_THREADS];				// Stack allocated to each thread
   8:../DebugConsole.c **** 
   9:../DebugConsole.c **** static CyBool_t DebugTxEnabled = CyFalse;	// Set true once I can output messages to the Console
  10:../DebugConsole.c **** static CyU3PDmaChannel UARTtoCPU_Handle;	// Handle needed by Uart Callback routine
  11:../DebugConsole.c **** static char ConsoleInBuffer[32];			// Buffer for user Console Input
  12:../DebugConsole.c **** static uint32_t ConsoleInIndex;				// Index into ConsoleIn buffer
  13:../DebugConsole.c **** 
  14:../DebugConsole.c **** void CheckStatus(char* StringPtr, CyU3PReturnStatus_t Status)
  15:../DebugConsole.c **** // In this initial debugging stage I stall on an un-successful system call, else I display progress
  16:../DebugConsole.c **** // Note that this assumes that there were no errors bringing up the Debug Console
  17:../DebugConsole.c **** {
  62              		.loc 1 17 0
  63              		.cfi_startproc
  64              		@ args = 0, pretend = 0, frame = 8
  65              		@ frame_needed = 1, uses_anonymous_args = 0
  66 0000 00482DE9 		stmfd	sp!, {fp, lr}
  67              	.LCFI0:
  68              		.cfi_def_cfa_offset 8
  69 0004 04B08DE2 		add	fp, sp, #4
  70              		.cfi_offset 14, -4
  71              		.cfi_offset 11, -8
  72              	.LCFI1:
  73              		.cfi_def_cfa 11, 4
  74 0008 08D04DE2 		sub	sp, sp, #8
  75 000c 08000BE5 		str	r0, [fp, #-8]
  76 0010 0C100BE5 		str	r1, [fp, #-12]
  18:../DebugConsole.c **** 	if (DebugTxEnabled)				// Need to wait until ConsoleOut is enabled
  77              		.loc 1 18 0
  78 0014 60309FE5 		ldr	r3, .L5
  79 0018 003093E5 		ldr	r3, [r3, #0]
  80 001c 000053E3 		cmp	r3, #0
  81 0020 1300000A 		beq	.L1
  19:../DebugConsole.c **** 	{
  20:../DebugConsole.c **** 		if (Status == CY_U3P_SUCCESS)
  82              		.loc 1 20 0
  83 0024 0C301BE5 		ldr	r3, [fp, #-12]
  84 0028 000053E3 		cmp	r3, #0
  85 002c 0500001A 		bne	.L3
  21:../DebugConsole.c **** 		{
  22:../DebugConsole.c **** 			DebugPrint(7, "\n%s Successful", StringPtr);
  86              		.loc 1 22 0
  87 0030 0700A0E3 		mov	r0, #7
  88 0034 44109FE5 		ldr	r1, .L5+4
  89 0038 08201BE5 		ldr	r2, [fp, #-8]
  90 003c FEFFFFEB 		bl	CyU3PDebugPrint
  23:../DebugConsole.c **** 			return;
  91              		.loc 1 23 0
  92 0040 0000A0E1 		mov	r0, r0	@ nop
  93 0044 0A0000EA 		b	.L1
  94              	.L3:
  24:../DebugConsole.c **** 		}
  25:../DebugConsole.c **** 		// else hang here
  26:../DebugConsole.c **** 		DebugPrint(4, "\n%s failed, Status = %d\n", StringPtr, Status);
  95              		.loc 1 26 0
  96 0048 0400A0E3 		mov	r0, #4
  97 004c 30109FE5 		ldr	r1, .L5+8
  98 0050 08201BE5 		ldr	r2, [fp, #-8]
  99 0054 0C301BE5 		ldr	r3, [fp, #-12]
 100 0058 FEFFFFEB 		bl	CyU3PDebugPrint
 101              	.L4:
  27:../DebugConsole.c **** 		while (1)
  28:../DebugConsole.c **** 		{
  29:../DebugConsole.c **** 			DebugPrint(4, "?");
 102              		.loc 1 29 0 discriminator 1
 103 005c 0400A0E3 		mov	r0, #4
 104 0060 20109FE5 		ldr	r1, .L5+12
 105 0064 FEFFFFEB 		bl	CyU3PDebugPrint
  30:../DebugConsole.c **** 			CyU3PThreadSleep (1000);
 106              		.loc 1 30 0 discriminator 1
 107 0068 FA0FA0E3 		mov	r0, #1000
 108 006c FEFFFFEB 		bl	_tx_thread_sleep
  31:../DebugConsole.c **** 		}
 109              		.loc 1 31 0 discriminator 1
 110 0070 F9FFFFEA 		b	.L4
 111              	.L1:
  32:../DebugConsole.c **** 	}
  33:../DebugConsole.c **** }
 112              		.loc 1 33 0
 113 0074 04D04BE2 		sub	sp, fp, #4
 114 0078 0088BDE8 		ldmfd	sp!, {fp, pc}
 115              	.L6:
 116              		.align	2
 117              	.L5:
 118 007c 00000000 		.word	DebugTxEnabled
 119 0080 00000000 		.word	.LC0
 120 0084 10000000 		.word	.LC1
 121 0088 2C000000 		.word	.LC2
 122              		.cfi_endproc
 123              	.LFE0:
 125              		.section	.text.ASCII_Digit,"ax",%progbits
 126              		.align	2
 127              		.global	ASCII_Digit
 129              	ASCII_Digit:
 130              	.LFB1:
  34:../DebugConsole.c **** 
  35:../DebugConsole.c **** CyBool_t ASCII_Digit(char Char)
  36:../DebugConsole.c **** {
 131              		.loc 1 36 0
 132              		.cfi_startproc
 133              		@ args = 0, pretend = 0, frame = 8
 134              		@ frame_needed = 1, uses_anonymous_args = 0
 135              		@ link register save eliminated.
 136 0000 04B02DE5 		str	fp, [sp, #-4]!
 137              	.LCFI2:
 138              		.cfi_def_cfa_offset 4
 139 0004 00B08DE2 		add	fp, sp, #0
 140              		.cfi_offset 11, -4
 141              	.LCFI3:
 142              		.cfi_def_cfa_register 11
 143 0008 0CD04DE2 		sub	sp, sp, #12
 144 000c 0030A0E1 		mov	r3, r0
 145 0010 05304BE5 		strb	r3, [fp, #-5]
  37:../DebugConsole.c **** 	return ((Char >= '0') && (Char <= '9'));
 146              		.loc 1 37 0
 147 0014 05305BE5 		ldrb	r3, [fp, #-5]	@ zero_extendqisi2
 148 0018 2F0053E3 		cmp	r3, #47
 149 001c 0400009A 		bls	.L8
 150              		.loc 1 37 0 is_stmt 0 discriminator 1
 151 0020 05305BE5 		ldrb	r3, [fp, #-5]	@ zero_extendqisi2
 152 0024 390053E3 		cmp	r3, #57
 153 0028 0100008A 		bhi	.L8
 154 002c 0130A0E3 		mov	r3, #1
 155 0030 000000EA 		b	.L9
 156              	.L8:
 157              		.loc 1 37 0 discriminator 2
 158 0034 0030A0E3 		mov	r3, #0
 159              	.L9:
  38:../DebugConsole.c **** }
 160              		.loc 1 38 0 is_stmt 1 discriminator 3
 161 0038 0300A0E1 		mov	r0, r3
 162 003c 00D08BE2 		add	sp, fp, #0
 163 0040 04B09DE4 		ldmfd	sp!, {fp}
 164 0044 1EFF2FE1 		bx	lr
 165              		.cfi_endproc
 166              	.LFE1:
 168              		.section	.text.GetValue,"ax",%progbits
 169              		.align	2
 170              		.global	GetValue
 172              	GetValue:
 173              	.LFB2:
  39:../DebugConsole.c **** 
  40:../DebugConsole.c **** uint32_t GetValue(char* CharPtr)
  41:../DebugConsole.c **** {
 174              		.loc 1 41 0
 175              		.cfi_startproc
 176              		@ args = 0, pretend = 0, frame = 16
 177              		@ frame_needed = 1, uses_anonymous_args = 0
 178 0000 00482DE9 		stmfd	sp!, {fp, lr}
 179              	.LCFI4:
 180              		.cfi_def_cfa_offset 8
 181 0004 04B08DE2 		add	fp, sp, #4
 182              		.cfi_offset 14, -4
 183              		.cfi_offset 11, -8
 184              	.LCFI5:
 185              		.cfi_def_cfa 11, 4
 186 0008 10D04DE2 		sub	sp, sp, #16
 187 000c 10000BE5 		str	r0, [fp, #-16]
  42:../DebugConsole.c **** 	uint32_t Value = 0;
 188              		.loc 1 42 0
 189 0010 0030A0E3 		mov	r3, #0
 190 0014 08300BE5 		str	r3, [fp, #-8]
  43:../DebugConsole.c **** 	while (ASCII_Digit(*CharPtr)) Value = (10*Value) + (*CharPtr++ - '0');
 191              		.loc 1 43 0
 192 0018 0D0000EA 		b	.L11
 193              	.L12:
 194              		.loc 1 43 0 is_stmt 0 discriminator 2
 195 001c 08201BE5 		ldr	r2, [fp, #-8]
 196 0020 0230A0E1 		mov	r3, r2
 197 0024 0331A0E1 		mov	r3, r3, asl #2
 198 0028 023083E0 		add	r3, r3, r2
 199 002c 8330A0E1 		mov	r3, r3, asl #1
 200 0030 0320A0E1 		mov	r2, r3
 201 0034 10301BE5 		ldr	r3, [fp, #-16]
 202 0038 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 203 003c 033082E0 		add	r3, r2, r3
 204 0040 303043E2 		sub	r3, r3, #48
 205 0044 08300BE5 		str	r3, [fp, #-8]
 206 0048 10301BE5 		ldr	r3, [fp, #-16]
 207 004c 013083E2 		add	r3, r3, #1
 208 0050 10300BE5 		str	r3, [fp, #-16]
 209              	.L11:
 210              		.loc 1 43 0 discriminator 1
 211 0054 10301BE5 		ldr	r3, [fp, #-16]
 212 0058 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 213 005c 0300A0E1 		mov	r0, r3
 214 0060 FEFFFFEB 		bl	ASCII_Digit
 215 0064 0030A0E1 		mov	r3, r0
 216 0068 000053E3 		cmp	r3, #0
 217 006c EAFFFF1A 		bne	.L12
  44:../DebugConsole.c **** 	return Value;
 218              		.loc 1 44 0 is_stmt 1
 219 0070 08301BE5 		ldr	r3, [fp, #-8]
  45:../DebugConsole.c **** }
 220              		.loc 1 45 0
 221 0074 0300A0E1 		mov	r0, r3
 222 0078 04D04BE2 		sub	sp, fp, #4
 223 007c 0088BDE8 		ldmfd	sp!, {fp, pc}
 224              		.cfi_endproc
 225              	.LFE2:
 227              		.section	.rodata
 228 002e 0000     		.align	2
 229              	.LC3:
 230 0030 0A537461 		.ascii	"\012Stack free in %s is %d/%d\000"
 230      636B2066 
 230      72656520 
 230      696E2025 
 230      73206973 
 231 004b 00       		.align	2
 232              	.LC4:
 233 004c 0A00     		.ascii	"\012\000"
 234              		.section	.text.DisplayStacks,"ax",%progbits
 235              		.align	2
 236              		.global	DisplayStacks
 238              	DisplayStacks:
 239              	.LFB3:
  46:../DebugConsole.c **** 
  47:../DebugConsole.c **** void DisplayStacks(void)
  48:../DebugConsole.c **** {
 240              		.loc 1 48 0
 241              		.cfi_startproc
 242              		@ args = 0, pretend = 0, frame = 24
 243              		@ frame_needed = 1, uses_anonymous_args = 0
 244 0000 00482DE9 		stmfd	sp!, {fp, lr}
 245              	.LCFI6:
 246              		.cfi_def_cfa_offset 8
 247 0004 04B08DE2 		add	fp, sp, #4
 248              		.cfi_offset 14, -4
 249              		.cfi_offset 11, -8
 250              	.LCFI7:
 251              		.cfi_def_cfa 11, 4
 252 0008 30D04DE2 		sub	sp, sp, #48
  49:../DebugConsole.c **** 	int i, j;
  50:../DebugConsole.c **** 	char* ThreadName;
  51:../DebugConsole.c **** 	for (i = 0; i<APP_THREADS; i++)
 253              		.loc 1 51 0
 254 000c 0030A0E3 		mov	r3, #0
 255 0010 08300BE5 		str	r3, [fp, #-8]
 256 0014 420000EA 		b	.L14
 257              	.L19:
 258              	.LBB2:
  52:../DebugConsole.c **** 	{
  53:../DebugConsole.c **** 		// Note that StackSize is in bytes but RTOS fill pattern is a uint32
  54:../DebugConsole.c **** 		uint32_t* StackStartPtr = StackPtr[i];
 259              		.loc 1 54 0
 260 0018 24319FE5 		ldr	r3, .L21
 261 001c 08201BE5 		ldr	r2, [fp, #-8]
 262 0020 023193E7 		ldr	r3, [r3, r2, asl #2]
 263 0024 14300BE5 		str	r3, [fp, #-20]
  55:../DebugConsole.c **** 		uint32_t* DataPtr = StackStartPtr;
 264              		.loc 1 55 0
 265 0028 14301BE5 		ldr	r3, [fp, #-20]
 266 002c 10300BE5 		str	r3, [fp, #-16]
  56:../DebugConsole.c **** 		for (j = 0; j<APPLICATION_THREAD_STACK>>2; j++) if (*DataPtr++ != 0xEFEFEFEF) break;
 267              		.loc 1 56 0
 268 0030 0030A0E3 		mov	r3, #0
 269 0034 0C300BE5 		str	r3, [fp, #-12]
 270 0038 0E0000EA 		b	.L15
 271              	.L18:
 272              		.loc 1 56 0 is_stmt 0 discriminator 2
 273 003c 10301BE5 		ldr	r3, [fp, #-16]
 274 0040 002093E5 		ldr	r2, [r3, #0]
 275 0044 FC309FE5 		ldr	r3, .L21+4
 276 0048 030052E1 		cmp	r2, r3
 277 004c 0030A003 		moveq	r3, #0
 278 0050 0130A013 		movne	r3, #1
 279 0054 FF3003E2 		and	r3, r3, #255
 280 0058 10201BE5 		ldr	r2, [fp, #-16]
 281 005c 042082E2 		add	r2, r2, #4
 282 0060 10200BE5 		str	r2, [fp, #-16]
 283 0064 000053E3 		cmp	r3, #0
 284 0068 0600001A 		bne	.L20
 285              	.L16:
 286 006c 0C301BE5 		ldr	r3, [fp, #-12]
 287 0070 013083E2 		add	r3, r3, #1
 288 0074 0C300BE5 		str	r3, [fp, #-12]
 289              	.L15:
 290              		.loc 1 56 0 discriminator 1
 291 0078 0C301BE5 		ldr	r3, [fp, #-12]
 292 007c FF0053E3 		cmp	r3, #255
 293 0080 EDFFFFDA 		ble	.L18
 294 0084 000000EA 		b	.L17
 295              	.L20:
 296              		.loc 1 56 0
 297 0088 0000A0E1 		mov	r0, r0	@ nop
 298              	.L17:
  57:../DebugConsole.c **** 		CyU3PThreadInfoGet(&ThreadHandle[i], &ThreadName, 0, 0, 0);
 299              		.loc 1 57 0 is_stmt 1
 300 008c 08301BE5 		ldr	r3, [fp, #-8]
 301 0090 D420A0E3 		mov	r2, #212
 302 0094 930202E0 		mul	r2, r3, r2
 303 0098 AC309FE5 		ldr	r3, .L21+8
 304 009c 032082E0 		add	r2, r2, r3
 305 00a0 18304BE2 		sub	r3, fp, #24
 306 00a4 0010A0E3 		mov	r1, #0
 307 00a8 00108DE5 		str	r1, [sp, #0]
 308 00ac 0010A0E3 		mov	r1, #0
 309 00b0 04108DE5 		str	r1, [sp, #4]
 310 00b4 0010A0E3 		mov	r1, #0
 311 00b8 08108DE5 		str	r1, [sp, #8]
 312 00bc 0010A0E3 		mov	r1, #0
 313 00c0 0C108DE5 		str	r1, [sp, #12]
 314 00c4 0010A0E3 		mov	r1, #0
 315 00c8 10108DE5 		str	r1, [sp, #16]
 316 00cc 0200A0E1 		mov	r0, r2
 317 00d0 0310A0E1 		mov	r1, r3
 318 00d4 0020A0E3 		mov	r2, #0
 319 00d8 0030A0E3 		mov	r3, #0
 320 00dc FEFFFFEB 		bl	_txe_thread_info_get
  58:../DebugConsole.c **** 		ThreadName += 3;	// Skip numeric ID
 321              		.loc 1 58 0
 322 00e0 18301BE5 		ldr	r3, [fp, #-24]
 323 00e4 033083E2 		add	r3, r3, #3
 324 00e8 18300BE5 		str	r3, [fp, #-24]
  59:../DebugConsole.c **** 		DebugPrint(4, "\nStack free in %s is %d/%d", ThreadName, (DataPtr - StackStartPtr)<<2, APPLICATIO
 325              		.loc 1 59 0
 326 00ec 18201BE5 		ldr	r2, [fp, #-24]
 327 00f0 10101BE5 		ldr	r1, [fp, #-16]
 328 00f4 14301BE5 		ldr	r3, [fp, #-20]
 329 00f8 013063E0 		rsb	r3, r3, r1
 330 00fc 4331A0E1 		mov	r3, r3, asr #2
 331 0100 0331A0E1 		mov	r3, r3, asl #2
 332 0104 011BA0E3 		mov	r1, #1024
 333 0108 00108DE5 		str	r1, [sp, #0]
 334 010c 0400A0E3 		mov	r0, #4
 335 0110 38109FE5 		ldr	r1, .L21+12
 336 0114 FEFFFFEB 		bl	CyU3PDebugPrint
 337              	.LBE2:
  51:../DebugConsole.c **** 	for (i = 0; i<APP_THREADS; i++)
 338              		.loc 1 51 0
 339 0118 08301BE5 		ldr	r3, [fp, #-8]
 340 011c 013083E2 		add	r3, r3, #1
 341 0120 08300BE5 		str	r3, [fp, #-8]
 342              	.L14:
  51:../DebugConsole.c **** 	for (i = 0; i<APP_THREADS; i++)
 343              		.loc 1 51 0 is_stmt 0 discriminator 1
 344 0124 08301BE5 		ldr	r3, [fp, #-8]
 345 0128 020053E3 		cmp	r3, #2
 346 012c B9FFFFDA 		ble	.L19
  60:../DebugConsole.c **** 	}
  61:../DebugConsole.c **** 	DebugPrint(4, "\n");
 347              		.loc 1 61 0 is_stmt 1
 348 0130 0400A0E3 		mov	r0, #4
 349 0134 18109FE5 		ldr	r1, .L21+16
 350 0138 FEFFFFEB 		bl	CyU3PDebugPrint
  62:../DebugConsole.c **** }
 351              		.loc 1 62 0
 352 013c 04D04BE2 		sub	sp, fp, #4
 353 0140 0088BDE8 		ldmfd	sp!, {fp, pc}
 354              	.L22:
 355              		.align	2
 356              	.L21:
 357 0144 00000000 		.word	StackPtr
 358 0148 EFEFEFEF 		.word	-269488145
 359 014c 00000000 		.word	ThreadHandle
 360 0150 30000000 		.word	.LC3
 361 0154 4C000000 		.word	.LC4
 362              		.cfi_endproc
 363              	.LFE3:
 365              		.section	.rodata
 366 004e 0000     		.align	2
 367              	.LC5:
 368 0050 0A466F75 		.ascii	"\012Found: '%s'\000"
 368      6E643A20 
 368      27257327 
 368      00
 369              		.section	.text.DisplayThreads,"ax",%progbits
 370              		.align	2
 371              		.global	DisplayThreads
 373              	DisplayThreads:
 374              	.LFB4:
  63:../DebugConsole.c **** 
  64:../DebugConsole.c **** void DisplayThreads(void)
  65:../DebugConsole.c **** {
 375              		.loc 1 65 0
 376              		.cfi_startproc
 377              		@ args = 0, pretend = 0, frame = 16
 378              		@ frame_needed = 1, uses_anonymous_args = 0
 379 0000 00482DE9 		stmfd	sp!, {fp, lr}
 380              	.LCFI8:
 381              		.cfi_def_cfa_offset 8
 382 0004 04B08DE2 		add	fp, sp, #4
 383              		.cfi_offset 14, -4
 384              		.cfi_offset 11, -8
 385              	.LCFI9:
 386              		.cfi_def_cfa 11, 4
 387 0008 28D04DE2 		sub	sp, sp, #40
  66:../DebugConsole.c **** 	CyU3PThread *ThisThread, *NextThread;
  67:../DebugConsole.c **** 	char* ThreadName;
  68:../DebugConsole.c **** 	// First find out who I am
  69:../DebugConsole.c **** 	ThisThread = CyU3PThreadIdentify();
 388              		.loc 1 69 0
 389 000c FEFFFFEB 		bl	_tx_thread_identify
 390 0010 08000BE5 		str	r0, [fp, #-8]
  70:../DebugConsole.c **** 	tx_thread_info_get(ThisThread, &ThreadName, 0, 0, 0, 0, 0, &NextThread, 0);
 391              		.loc 1 70 0
 392 0014 10304BE2 		sub	r3, fp, #16
 393 0018 0020A0E3 		mov	r2, #0
 394 001c 00208DE5 		str	r2, [sp, #0]
 395 0020 0020A0E3 		mov	r2, #0
 396 0024 04208DE5 		str	r2, [sp, #4]
 397 0028 0020A0E3 		mov	r2, #0
 398 002c 08208DE5 		str	r2, [sp, #8]
 399 0030 0C204BE2 		sub	r2, fp, #12
 400 0034 0C208DE5 		str	r2, [sp, #12]
 401 0038 0020A0E3 		mov	r2, #0
 402 003c 10208DE5 		str	r2, [sp, #16]
 403 0040 08001BE5 		ldr	r0, [fp, #-8]
 404 0044 0310A0E1 		mov	r1, r3
 405 0048 0020A0E3 		mov	r2, #0
 406 004c 0030A0E3 		mov	r3, #0
 407 0050 FEFFFFEB 		bl	_txe_thread_info_get
  71:../DebugConsole.c **** 	// Now, using the Thread linked list, look for other threads until I find myself again
  72:../DebugConsole.c **** 	while (NextThread != ThisThread)
 408              		.loc 1 72 0
 409 0054 150000EA 		b	.L24
 410              	.L25:
  73:../DebugConsole.c **** 	{
  74:../DebugConsole.c **** 		tx_thread_info_get(NextThread, &ThreadName, 0, 0, 0, 0, 0, &NextThread, 0);
 411              		.loc 1 74 0
 412 0058 0C201BE5 		ldr	r2, [fp, #-12]
 413 005c 10304BE2 		sub	r3, fp, #16
 414 0060 0010A0E3 		mov	r1, #0
 415 0064 00108DE5 		str	r1, [sp, #0]
 416 0068 0010A0E3 		mov	r1, #0
 417 006c 04108DE5 		str	r1, [sp, #4]
 418 0070 0010A0E3 		mov	r1, #0
 419 0074 08108DE5 		str	r1, [sp, #8]
 420 0078 0C104BE2 		sub	r1, fp, #12
 421 007c 0C108DE5 		str	r1, [sp, #12]
 422 0080 0010A0E3 		mov	r1, #0
 423 0084 10108DE5 		str	r1, [sp, #16]
 424 0088 0200A0E1 		mov	r0, r2
 425 008c 0310A0E1 		mov	r1, r3
 426 0090 0020A0E3 		mov	r2, #0
 427 0094 0030A0E3 		mov	r3, #0
 428 0098 FEFFFFEB 		bl	_txe_thread_info_get
  75:../DebugConsole.c **** 		DebugPrint(4, "\nFound: '%s'", ThreadName);
 429              		.loc 1 75 0
 430 009c 10301BE5 		ldr	r3, [fp, #-16]
 431 00a0 0400A0E3 		mov	r0, #4
 432 00a4 1C109FE5 		ldr	r1, .L26
 433 00a8 0320A0E1 		mov	r2, r3
 434 00ac FEFFFFEB 		bl	CyU3PDebugPrint
 435              	.L24:
  72:../DebugConsole.c **** 	while (NextThread != ThisThread)
 436              		.loc 1 72 0 discriminator 1
 437 00b0 0C201BE5 		ldr	r2, [fp, #-12]
 438 00b4 08301BE5 		ldr	r3, [fp, #-8]
 439 00b8 030052E1 		cmp	r2, r3
 440 00bc E5FFFF1A 		bne	.L25
  76:../DebugConsole.c **** 	}
  77:../DebugConsole.c **** }
 441              		.loc 1 77 0
 442 00c0 04D04BE2 		sub	sp, fp, #4
 443 00c4 0088BDE8 		ldmfd	sp!, {fp, pc}
 444              	.L27:
 445              		.align	2
 446              	.L26:
 447 00c8 50000000 		.word	.LC5
 448              		.cfi_endproc
 449              	.LFE4:
 451              		.section	.rodata
 452 005d 000000   		.align	2
 453              	.LC6:
 454 0060 73657400 		.ascii	"set\000"
 455              		.align	2
 456              	.LC7:
 457 0064 0A536574 		.ascii	"\012Set SampleTime = %d\000"
 457      2053616D 
 457      706C6554 
 457      696D6520 
 457      3D202564 
 458 0079 000000   		.align	2
 459              	.LC8:
 460 007c 74687265 		.ascii	"threads\000"
 460      61647300 
 461              		.align	2
 462              	.LC9:
 463 0084 73746163 		.ascii	"stacks\000"
 463      6B7300
 464 008b 00       		.align	2
 465              	.LC10:
 466 008c 72657365 		.ascii	"reset\000"
 466      7400
 467 0092 0000     		.align	2
 468              	.LC11:
 469 0094 0A524553 		.ascii	"\012RESETTING CPU\012\000"
 469      45545449 
 469      4E472043 
 469      50550A00 
 470              		.align	2
 471              	.LC12:
 472 00a4 0A556E6B 		.ascii	"\012Unknown Command: '%s'\012\000"
 472      6E6F776E 
 472      20436F6D 
 472      6D616E64 
 472      3A202725 
 473              		.section	.text.ParseCommand,"ax",%progbits
 474              		.align	2
 475              		.global	ParseCommand
 477              	ParseCommand:
 478              	.LFB5:
  78:../DebugConsole.c **** 
  79:../DebugConsole.c **** void ParseCommand(void)
  80:../DebugConsole.c **** {
 479              		.loc 1 80 0
 480              		.cfi_startproc
 481              		@ args = 0, pretend = 0, frame = 0
 482              		@ frame_needed = 1, uses_anonymous_args = 0
 483 0000 00482DE9 		stmfd	sp!, {fp, lr}
 484              	.LCFI10:
 485              		.cfi_def_cfa_offset 8
 486 0004 04B08DE2 		add	fp, sp, #4
 487              		.cfi_offset 14, -4
 488              		.cfi_offset 11, -8
 489              	.LCFI11:
 490              		.cfi_def_cfa 11, 4
  81:../DebugConsole.c **** 	CyU3PDebugPrint(4, "\n");
 491              		.loc 1 81 0
 492 0008 0400A0E3 		mov	r0, #4
 493 000c E4109FE5 		ldr	r1, .L34
 494 0010 FEFFFFEB 		bl	CyU3PDebugPrint
  82:../DebugConsole.c **** 	if (strncmp("set", ConsoleInBuffer, 3) == 0)
 495              		.loc 1 82 0
 496 0014 E0009FE5 		ldr	r0, .L34+4
 497 0018 E0109FE5 		ldr	r1, .L34+8
 498 001c 0320A0E3 		mov	r2, #3
 499 0020 FEFFFFEB 		bl	strncmp
 500 0024 0030A0E1 		mov	r3, r0
 501 0028 000053E3 		cmp	r3, #0
 502 002c 0B00001A 		bne	.L29
  83:../DebugConsole.c **** 		{
  84:../DebugConsole.c **** 			SampleTime = GetValue(&ConsoleInBuffer[3]);
 503              		.loc 1 84 0
 504 0030 CC009FE5 		ldr	r0, .L34+12
 505 0034 FEFFFFEB 		bl	GetValue
 506 0038 0020A0E1 		mov	r2, r0
 507 003c C4309FE5 		ldr	r3, .L34+16
 508 0040 002083E5 		str	r2, [r3, #0]
  85:../DebugConsole.c **** 			DebugPrint(4, "\nSet SampleTime = %d", SampleTime);
 509              		.loc 1 85 0
 510 0044 BC309FE5 		ldr	r3, .L34+16
 511 0048 003093E5 		ldr	r3, [r3, #0]
 512 004c 0400A0E3 		mov	r0, #4
 513 0050 B4109FE5 		ldr	r1, .L34+20
 514 0054 0320A0E1 		mov	r2, r3
 515 0058 FEFFFFEB 		bl	CyU3PDebugPrint
 516 005c 210000EA 		b	.L30
 517              	.L29:
  86:../DebugConsole.c **** 		}
  87:../DebugConsole.c **** 	else if (strcmp("threads", ConsoleInBuffer) == 0) DisplayThreads();
 518              		.loc 1 87 0
 519 0060 A8009FE5 		ldr	r0, .L34+24
 520 0064 94109FE5 		ldr	r1, .L34+8
 521 0068 FEFFFFEB 		bl	strcmp
 522 006c 0030A0E1 		mov	r3, r0
 523 0070 000053E3 		cmp	r3, #0
 524 0074 0100001A 		bne	.L31
 525              		.loc 1 87 0 is_stmt 0 discriminator 1
 526 0078 FEFFFFEB 		bl	DisplayThreads
 527 007c 190000EA 		b	.L30
 528              	.L31:
  88:../DebugConsole.c **** 	else if (strcmp("stacks", ConsoleInBuffer) == 0) DisplayStacks();
 529              		.loc 1 88 0 is_stmt 1
 530 0080 8C009FE5 		ldr	r0, .L34+28
 531 0084 74109FE5 		ldr	r1, .L34+8
 532 0088 FEFFFFEB 		bl	strcmp
 533 008c 0030A0E1 		mov	r3, r0
 534 0090 000053E3 		cmp	r3, #0
 535 0094 0100001A 		bne	.L32
 536              		.loc 1 88 0 is_stmt 0 discriminator 1
 537 0098 FEFFFFEB 		bl	DisplayStacks
 538 009c 110000EA 		b	.L30
 539              	.L32:
  89:../DebugConsole.c **** 	else if (strcmp("reset", ConsoleInBuffer) == 0)
 540              		.loc 1 89 0 is_stmt 1
 541 00a0 70009FE5 		ldr	r0, .L34+32
 542 00a4 54109FE5 		ldr	r1, .L34+8
 543 00a8 FEFFFFEB 		bl	strcmp
 544 00ac 0030A0E1 		mov	r3, r0
 545 00b0 000053E3 		cmp	r3, #0
 546 00b4 0700001A 		bne	.L33
  90:../DebugConsole.c **** 	{
  91:../DebugConsole.c **** 		DebugPrint(4, "\nRESETTING CPU\n");
 547              		.loc 1 91 0
 548 00b8 0400A0E3 		mov	r0, #4
 549 00bc 58109FE5 		ldr	r1, .L34+36
 550 00c0 FEFFFFEB 		bl	CyU3PDebugPrint
  92:../DebugConsole.c **** 		CyU3PThreadSleep(100);
 551              		.loc 1 92 0
 552 00c4 6400A0E3 		mov	r0, #100
 553 00c8 FEFFFFEB 		bl	_tx_thread_sleep
  93:../DebugConsole.c **** 		CyU3PDeviceReset(CyFalse);
 554              		.loc 1 93 0
 555 00cc 0000A0E3 		mov	r0, #0
 556 00d0 FEFFFFEB 		bl	CyU3PDeviceReset
 557 00d4 030000EA 		b	.L30
 558              	.L33:
  94:../DebugConsole.c **** 	}
  95:../DebugConsole.c **** 	else DebugPrint(4, "\nUnknown Command: '%s'\n", ConsoleInBuffer);
 559              		.loc 1 95 0
 560 00d8 0400A0E3 		mov	r0, #4
 561 00dc 3C109FE5 		ldr	r1, .L34+40
 562 00e0 18209FE5 		ldr	r2, .L34+8
 563 00e4 FEFFFFEB 		bl	CyU3PDebugPrint
 564              	.L30:
  96:../DebugConsole.c **** 	ConsoleInIndex = 0;
 565              		.loc 1 96 0
 566 00e8 34309FE5 		ldr	r3, .L34+44
 567 00ec 0020A0E3 		mov	r2, #0
 568 00f0 002083E5 		str	r2, [r3, #0]
  97:../DebugConsole.c **** }
 569              		.loc 1 97 0
 570 00f4 0088BDE8 		ldmfd	sp!, {fp, pc}
 571              	.L35:
 572              		.align	2
 573              	.L34:
 574 00f8 4C000000 		.word	.LC4
 575 00fc 60000000 		.word	.LC6
 576 0100 00000000 		.word	ConsoleInBuffer
 577 0104 03000000 		.word	ConsoleInBuffer+3
 578 0108 00000000 		.word	SampleTime
 579 010c 64000000 		.word	.LC7
 580 0110 7C000000 		.word	.LC8
 581 0114 84000000 		.word	.LC9
 582 0118 8C000000 		.word	.LC10
 583 011c 94000000 		.word	.LC11
 584 0120 A4000000 		.word	.LC12
 585 0124 00000000 		.word	ConsoleInIndex
 586              		.cfi_endproc
 587              	.LFE5:
 589              		.section	.rodata
 590              		.align	2
 591              	.LC13:
 592 00bc 256300   		.ascii	"%c\000"
 593              		.section	.text.UartCallback,"ax",%progbits
 594              		.align	2
 595              		.global	UartCallback
 597              	UartCallback:
 598              	.LFB6:
  98:../DebugConsole.c **** 
  99:../DebugConsole.c **** void UartCallback(CyU3PUartEvt_t Event, CyU3PUartError_t Error)
 100:../DebugConsole.c **** // Handle characters typed in by the developer
 101:../DebugConsole.c **** // Look for and execute commands on a <CR>
 102:../DebugConsole.c **** {
 599              		.loc 1 102 0
 600              		.cfi_startproc
 601              		@ args = 0, pretend = 0, frame = 24
 602              		@ frame_needed = 1, uses_anonymous_args = 0
 603 0000 00482DE9 		stmfd	sp!, {fp, lr}
 604              	.LCFI12:
 605              		.cfi_def_cfa_offset 8
 606 0004 04B08DE2 		add	fp, sp, #4
 607              		.cfi_offset 14, -4
 608              		.cfi_offset 11, -8
 609              	.LCFI13:
 610              		.cfi_def_cfa 11, 4
 611 0008 18D04DE2 		sub	sp, sp, #24
 612 000c 0020A0E1 		mov	r2, r0
 613 0010 0130A0E1 		mov	r3, r1
 614 0014 15204BE5 		strb	r2, [fp, #-21]
 615 0018 16304BE5 		strb	r3, [fp, #-22]
 103:../DebugConsole.c **** 	CyU3PDmaBuffer_t ConsoleInDmaBuffer;
 104:../DebugConsole.c **** 	char InputChar;
 105:../DebugConsole.c **** 	if (Event == CY_U3P_UART_EVENT_RX_DONE)
 616              		.loc 1 105 0
 617 001c 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 618 0020 000053E3 		cmp	r3, #0
 619 0024 3400001A 		bne	.L36
 106:../DebugConsole.c ****     {
 107:../DebugConsole.c **** 		CyU3PDmaChannelSetWrapUp(&UARTtoCPU_Handle);
 620              		.loc 1 107 0
 621 0028 D4009FE5 		ldr	r0, .L41
 622 002c FEFFFFEB 		bl	CyU3PDmaChannelSetWrapUp
 108:../DebugConsole.c **** 		CyU3PDmaChannelGetBuffer(&UARTtoCPU_Handle, &ConsoleInDmaBuffer, CYU3P_NO_WAIT);
 623              		.loc 1 108 0
 624 0030 14304BE2 		sub	r3, fp, #20
 625 0034 C8009FE5 		ldr	r0, .L41
 626 0038 0310A0E1 		mov	r1, r3
 627 003c 0020A0E3 		mov	r2, #0
 628 0040 FEFFFFEB 		bl	CyU3PDmaChannelGetBuffer
 109:../DebugConsole.c **** 		InputChar = (char)*ConsoleInDmaBuffer.buffer;
 629              		.loc 1 109 0
 630 0044 14301BE5 		ldr	r3, [fp, #-20]
 631 0048 0030D3E5 		ldrb	r3, [r3, #0]
 632 004c 05304BE5 		strb	r3, [fp, #-5]
 110:../DebugConsole.c **** 		CyU3PDebugPrint(4, "%c", InputChar);			// Echo the character
 633              		.loc 1 110 0
 634 0050 05305BE5 		ldrb	r3, [fp, #-5]	@ zero_extendqisi2
 635 0054 0400A0E3 		mov	r0, #4
 636 0058 A8109FE5 		ldr	r1, .L41+4
 637 005c 0320A0E1 		mov	r2, r3
 638 0060 FEFFFFEB 		bl	CyU3PDebugPrint
 111:../DebugConsole.c **** 		if (InputChar == 0x0d) ParseCommand();
 639              		.loc 1 111 0
 640 0064 05305BE5 		ldrb	r3, [fp, #-5]	@ zero_extendqisi2
 641 0068 0D0053E3 		cmp	r3, #13
 642 006c 0100001A 		bne	.L38
 643              		.loc 1 111 0 is_stmt 0 discriminator 1
 644 0070 FEFFFFEB 		bl	ParseCommand
 645 0074 1C0000EA 		b	.L39
 646              	.L38:
 112:../DebugConsole.c **** 		else
 113:../DebugConsole.c **** 		{
 114:../DebugConsole.c **** 			ConsoleInBuffer[ConsoleInIndex] = InputChar | 0x20;		// Force lower case
 647              		.loc 1 114 0 is_stmt 1
 648 0078 8C309FE5 		ldr	r3, .L41+8
 649 007c 003093E5 		ldr	r3, [r3, #0]
 650 0080 05205BE5 		ldrb	r2, [fp, #-5]
 651 0084 202082E3 		orr	r2, r2, #32
 652 0088 FF1002E2 		and	r1, r2, #255
 653 008c 7C209FE5 		ldr	r2, .L41+12
 654 0090 0310C2E7 		strb	r1, [r2, r3]
 115:../DebugConsole.c **** 			if (ConsoleInIndex++ < sizeof(ConsoleInBuffer)) ConsoleInBuffer[ConsoleInIndex] = 0;
 655              		.loc 1 115 0
 656 0094 70309FE5 		ldr	r3, .L41+8
 657 0098 003093E5 		ldr	r3, [r3, #0]
 658 009c 1F0053E3 		cmp	r3, #31
 659 00a0 0020A083 		movhi	r2, #0
 660 00a4 0120A093 		movls	r2, #1
 661 00a8 FF2002E2 		and	r2, r2, #255
 662 00ac 011083E2 		add	r1, r3, #1
 663 00b0 54309FE5 		ldr	r3, .L41+8
 664 00b4 001083E5 		str	r1, [r3, #0]
 665 00b8 000052E3 		cmp	r2, #0
 666 00bc 0500000A 		beq	.L40
 667              		.loc 1 115 0 is_stmt 0 discriminator 1
 668 00c0 44309FE5 		ldr	r3, .L41+8
 669 00c4 003093E5 		ldr	r3, [r3, #0]
 670 00c8 40209FE5 		ldr	r2, .L41+12
 671 00cc 0010A0E3 		mov	r1, #0
 672 00d0 0310C2E7 		strb	r1, [r2, r3]
 673 00d4 040000EA 		b	.L39
 674              	.L40:
 116:../DebugConsole.c **** 			else ConsoleInIndex--;
 675              		.loc 1 116 0 is_stmt 1
 676 00d8 2C309FE5 		ldr	r3, .L41+8
 677 00dc 003093E5 		ldr	r3, [r3, #0]
 678 00e0 012043E2 		sub	r2, r3, #1
 679 00e4 20309FE5 		ldr	r3, .L41+8
 680 00e8 002083E5 		str	r2, [r3, #0]
 681              	.L39:
 117:../DebugConsole.c **** 		}
 118:../DebugConsole.c **** 		CyU3PDmaChannelDiscardBuffer(&UARTtoCPU_Handle);
 682              		.loc 1 118 0
 683 00ec 10009FE5 		ldr	r0, .L41
 684 00f0 FEFFFFEB 		bl	CyU3PDmaChannelDiscardBuffer
 119:../DebugConsole.c **** 		CyU3PUartRxSetBlockXfer(1);
 685              		.loc 1 119 0
 686 00f4 0100A0E3 		mov	r0, #1
 687 00f8 FEFFFFEB 		bl	CyU3PUartRxSetBlockXfer
 688              	.L36:
 120:../DebugConsole.c ****     }
 121:../DebugConsole.c **** }
 689              		.loc 1 121 0
 690 00fc 04D04BE2 		sub	sp, fp, #4
 691 0100 0088BDE8 		ldmfd	sp!, {fp, pc}
 692              	.L42:
 693              		.align	2
 694              	.L41:
 695 0104 00000000 		.word	UARTtoCPU_Handle
 696 0108 BC000000 		.word	.LC13
 697 010c 00000000 		.word	ConsoleInIndex
 698 0110 00000000 		.word	ConsoleInBuffer
 699              		.cfi_endproc
 700              	.LFE6:
 702              		.section	.rodata
 703 00bf 00       		.align	2
 704              	.LC14:
 705 00c0 43795533 		.ascii	"CyU3PUartInit\000"
 705      50556172 
 705      74496E69 
 705      7400
 706 00ce 0000     		.align	2
 707              	.LC15:
 708 00d0 43795533 		.ascii	"CyU3PUartSetConfig\000"
 708      50556172 
 708      74536574 
 708      436F6E66 
 708      696700
 709 00e3 00       		.align	2
 710              	.LC16:
 711 00e4 43795533 		.ascii	"CyU3PUartTxSetBlockXfer\000"
 711      50556172 
 711      74547853 
 711      6574426C 
 711      6F636B58 
 712              		.align	2
 713              	.LC17:
 714 00fc 436F6E73 		.ascii	"ConsoleOutEnabled\000"
 714      6F6C654F 
 714      7574456E 
 714      61626C65 
 714      6400
 715 010e 0000     		.align	2
 716              	.LC18:
 717 0110 43795533 		.ascii	"CyU3PUartRxSetBlockXfer\000"
 717      50556172 
 717      74527853 
 717      6574426C 
 717      6F636B58 
 718              		.align	2
 719              	.LC19:
 720 0128 43726561 		.ascii	"CreateDebugRxDmaChannel\000"
 720      74654465 
 720      62756752 
 720      78446D61 
 720      4368616E 
 721              		.align	2
 722              	.LC20:
 723 0140 436F6E73 		.ascii	"ConsoleInEnabled\000"
 723      6F6C6549 
 723      6E456E61 
 723      626C6564 
 723      00
 724 0151 000000   		.section	.text.InitializeDebugConsole,"ax",%progbits
 725              		.align	2
 726              		.global	InitializeDebugConsole
 728              	InitializeDebugConsole:
 729              	.LFB7:
 122:../DebugConsole.c **** 
 123:../DebugConsole.c **** // Spin up the DEBUG Console, Out and In
 124:../DebugConsole.c **** CyU3PReturnStatus_t InitializeDebugConsole(void)
 125:../DebugConsole.c **** {
 730              		.loc 1 125 0
 731              		.cfi_startproc
 732              		@ args = 0, pretend = 0, frame = 56
 733              		@ frame_needed = 1, uses_anonymous_args = 0
 734 0000 00482DE9 		stmfd	sp!, {fp, lr}
 735              	.LCFI14:
 736              		.cfi_def_cfa_offset 8
 737 0004 04B08DE2 		add	fp, sp, #4
 738              		.cfi_offset 14, -4
 739              		.cfi_offset 11, -8
 740              	.LCFI15:
 741              		.cfi_def_cfa 11, 4
 742 0008 38D04DE2 		sub	sp, sp, #56
 126:../DebugConsole.c ****     CyU3PUartConfig_t uartConfig;
 127:../DebugConsole.c ****     CyU3PDmaChannelConfig_t dmaConfig;
 128:../DebugConsole.c ****     CyU3PReturnStatus_t Status;
 129:../DebugConsole.c **** 
 130:../DebugConsole.c ****     Status = CyU3PUartInit();										// Start the UART driver
 743              		.loc 1 130 0
 744 000c FEFFFFEB 		bl	CyU3PUartInit
 745 0010 08000BE5 		str	r0, [fp, #-8]
 131:../DebugConsole.c ****     CheckStatus("CyU3PUartInit", Status);
 746              		.loc 1 131 0
 747 0014 78019FE5 		ldr	r0, .L47
 748 0018 08101BE5 		ldr	r1, [fp, #-8]
 749 001c FEFFFFEB 		bl	CheckStatus
 132:../DebugConsole.c **** 
 133:../DebugConsole.c ****     CyU3PMemSet ((uint8_t *)&uartConfig, 0, sizeof (uartConfig));
 750              		.loc 1 133 0
 751 0020 20304BE2 		sub	r3, fp, #32
 752 0024 0300A0E1 		mov	r0, r3
 753 0028 0010A0E3 		mov	r1, #0
 754 002c 1820A0E3 		mov	r2, #24
 755 0030 FEFFFFEB 		bl	CyU3PMemSet
 134:../DebugConsole.c **** 	uartConfig.baudRate = CY_U3P_UART_BAUDRATE_115200;
 756              		.loc 1 134 0
 757 0034 5C319FE5 		ldr	r3, .L47+4
 758 0038 10300BE5 		str	r3, [fp, #-16]
 135:../DebugConsole.c **** 	uartConfig.stopBit  = CY_U3P_UART_ONE_STOP_BIT;
 759              		.loc 1 135 0
 760 003c 0130A0E3 		mov	r3, #1
 761 0040 0C304BE5 		strb	r3, [fp, #-12]
 136:../DebugConsole.c **** //r	uartConfig.parity   = CY_U3P_UART_NO_PARITY;
 137:../DebugConsole.c **** 	uartConfig.txEnable = CyTrue;
 762              		.loc 1 137 0
 763 0044 0130A0E3 		mov	r3, #1
 764 0048 20300BE5 		str	r3, [fp, #-32]
 138:../DebugConsole.c **** 	uartConfig.rxEnable = CyTrue;
 765              		.loc 1 138 0
 766 004c 0130A0E3 		mov	r3, #1
 767 0050 1C300BE5 		str	r3, [fp, #-28]
 139:../DebugConsole.c **** //r	uartConfig.flowCtrl = CyFalse;
 140:../DebugConsole.c **** 	uartConfig.isDma    = CyTrue;
 768              		.loc 1 140 0
 769 0054 0130A0E3 		mov	r3, #1
 770 0058 14300BE5 		str	r3, [fp, #-20]
 141:../DebugConsole.c **** 	Status = CyU3PUartSetConfig(&uartConfig, UartCallback);			// Configure the UART hardware
 771              		.loc 1 141 0
 772 005c 20304BE2 		sub	r3, fp, #32
 773 0060 0300A0E1 		mov	r0, r3
 774 0064 30119FE5 		ldr	r1, .L47+8
 775 0068 FEFFFFEB 		bl	CyU3PUartSetConfig
 776 006c 08000BE5 		str	r0, [fp, #-8]
 142:../DebugConsole.c ****     CheckStatus("CyU3PUartSetConfig", Status);
 777              		.loc 1 142 0
 778 0070 28019FE5 		ldr	r0, .L47+12
 779 0074 08101BE5 		ldr	r1, [fp, #-8]
 780 0078 FEFFFFEB 		bl	CheckStatus
 143:../DebugConsole.c **** 
 144:../DebugConsole.c ****     Status = CyU3PUartTxSetBlockXfer(0xFFFFFFFF);					// Send as much data as I need to
 781              		.loc 1 144 0
 782 007c 0000E0E3 		mvn	r0, #0
 783 0080 FEFFFFEB 		bl	CyU3PUartTxSetBlockXfer
 784 0084 08000BE5 		str	r0, [fp, #-8]
 145:../DebugConsole.c ****     CheckStatus("CyU3PUartTxSetBlockXfer", Status);
 785              		.loc 1 145 0
 786 0088 14019FE5 		ldr	r0, .L47+16
 787 008c 08101BE5 		ldr	r1, [fp, #-8]
 788 0090 FEFFFFEB 		bl	CheckStatus
 146:../DebugConsole.c **** 
 147:../DebugConsole.c **** 	Status = CyU3PDebugInit(CY_U3P_LPP_SOCKET_UART_CONS, 6);		// Attach the Debug driver above the UAR
 789              		.loc 1 147 0
 790 0094 0300A0E3 		mov	r0, #3
 791 0098 0610A0E3 		mov	r1, #6
 792 009c FEFFFFEB 		bl	CyU3PDebugInit
 793 00a0 08000BE5 		str	r0, [fp, #-8]
 148:../DebugConsole.c **** 	if (Status == CY_U3P_SUCCESS) DebugTxEnabled = CyTrue;
 794              		.loc 1 148 0
 795 00a4 08301BE5 		ldr	r3, [fp, #-8]
 796 00a8 000053E3 		cmp	r3, #0
 797 00ac 0200001A 		bne	.L44
 798              		.loc 1 148 0 is_stmt 0 discriminator 1
 799 00b0 F0309FE5 		ldr	r3, .L47+20
 800 00b4 0120A0E3 		mov	r2, #1
 801 00b8 002083E5 		str	r2, [r3, #0]
 802              	.L44:
 149:../DebugConsole.c ****     CheckStatus("ConsoleOutEnabled", Status);
 803              		.loc 1 149 0 is_stmt 1
 804 00bc E8009FE5 		ldr	r0, .L47+24
 805 00c0 08101BE5 		ldr	r1, [fp, #-8]
 806 00c4 FEFFFFEB 		bl	CheckStatus
 150:../DebugConsole.c **** 	CyU3PDebugPreamble(CyFalse);									// Skip preamble, debug info is targeted for a person
 807              		.loc 1 150 0
 808 00c8 0000A0E3 		mov	r0, #0
 809 00cc FEFFFFEB 		bl	CyU3PDebugPreamble
 151:../DebugConsole.c **** 
 152:../DebugConsole.c **** 	// Now setup a DMA channel to receive characters from the Uart Rx
 153:../DebugConsole.c ****     Status = CyU3PUartRxSetBlockXfer(1);
 810              		.loc 1 153 0
 811 00d0 0100A0E3 		mov	r0, #1
 812 00d4 FEFFFFEB 		bl	CyU3PUartRxSetBlockXfer
 813 00d8 08000BE5 		str	r0, [fp, #-8]
 154:../DebugConsole.c ****     CheckStatus("CyU3PUartRxSetBlockXfer", Status);
 814              		.loc 1 154 0
 815 00dc CC009FE5 		ldr	r0, .L47+28
 816 00e0 08101BE5 		ldr	r1, [fp, #-8]
 817 00e4 FEFFFFEB 		bl	CheckStatus
 155:../DebugConsole.c **** 	CyU3PMemSet((uint8_t *)&dmaConfig, 0, sizeof(dmaConfig));
 818              		.loc 1 155 0
 819 00e8 3C304BE2 		sub	r3, fp, #60
 820 00ec 0300A0E1 		mov	r0, r3
 821 00f0 0010A0E3 		mov	r1, #0
 822 00f4 1C20A0E3 		mov	r2, #28
 823 00f8 FEFFFFEB 		bl	CyU3PMemSet
 156:../DebugConsole.c **** 	dmaConfig.size  		= 16;									// Minimum size allowed, I only need 1 byte
 824              		.loc 1 156 0
 825 00fc 1030A0E3 		mov	r3, #16
 826 0100 BC334BE1 		strh	r3, [fp, #-60]	@ movhi
 157:../DebugConsole.c **** 	dmaConfig.count 		= 1;									// I can't type faster than the Uart Callback routine!
 827              		.loc 1 157 0
 828 0104 0130A0E3 		mov	r3, #1
 829 0108 BA334BE1 		strh	r3, [fp, #-58]	@ movhi
 158:../DebugConsole.c **** 	dmaConfig.prodSckId		= CY_U3P_LPP_SOCKET_UART_PROD;
 830              		.loc 1 158 0
 831 010c 0630A0E3 		mov	r3, #6
 832 0110 B8334BE1 		strh	r3, [fp, #-56]	@ movhi
 159:../DebugConsole.c **** 	dmaConfig.consSckId 	= CY_U3P_CPU_SOCKET_CONS;
 833              		.loc 1 159 0
 834 0114 3F3CA0E3 		mov	r3, #16128
 835 0118 B6334BE1 		strh	r3, [fp, #-54]	@ movhi
 160:../DebugConsole.c **** 	dmaConfig.dmaMode 		= CY_U3P_DMA_MODE_BYTE;
 836              		.loc 1 160 0
 837 011c 0030A0E3 		mov	r3, #0
 838 0120 2C304BE5 		strb	r3, [fp, #-44]
 161:../DebugConsole.c **** 	dmaConfig.notification	= CY_U3P_DMA_CB_PROD_EVENT;
 839              		.loc 1 161 0
 840 0124 0830A0E3 		mov	r3, #8
 841 0128 28300BE5 		str	r3, [fp, #-40]
 162:../DebugConsole.c **** 	Status = CyU3PDmaChannelCreate(&UARTtoCPU_Handle, CY_U3P_DMA_TYPE_MANUAL_IN, &dmaConfig);
 842              		.loc 1 162 0
 843 012c 3C304BE2 		sub	r3, fp, #60
 844 0130 7C009FE5 		ldr	r0, .L47+32
 845 0134 0310A0E3 		mov	r1, #3
 846 0138 0320A0E1 		mov	r2, r3
 847 013c FEFFFFEB 		bl	CyU3PDmaChannelCreate
 848 0140 08000BE5 		str	r0, [fp, #-8]
 163:../DebugConsole.c ****     CheckStatus("CreateDebugRxDmaChannel", Status);
 849              		.loc 1 163 0
 850 0144 6C009FE5 		ldr	r0, .L47+36
 851 0148 08101BE5 		ldr	r1, [fp, #-8]
 852 014c FEFFFFEB 		bl	CheckStatus
 164:../DebugConsole.c ****     if (Status != CY_U3P_SUCCESS) CyU3PDmaChannelDestroy(&UARTtoCPU_Handle);
 853              		.loc 1 164 0
 854 0150 08301BE5 		ldr	r3, [fp, #-8]
 855 0154 000053E3 		cmp	r3, #0
 856 0158 0200000A 		beq	.L45
 857              		.loc 1 164 0 is_stmt 0 discriminator 1
 858 015c 50009FE5 		ldr	r0, .L47+32
 859 0160 FEFFFFEB 		bl	CyU3PDmaChannelDestroy
 860 0164 060000EA 		b	.L46
 861              	.L45:
 165:../DebugConsole.c ****     else
 166:../DebugConsole.c ****     {
 167:../DebugConsole.c **** 		Status = CyU3PDmaChannelSetXfer(&UARTtoCPU_Handle, INFINITE_TRANSFER_SIZE);
 862              		.loc 1 167 0 is_stmt 1
 863 0168 44009FE5 		ldr	r0, .L47+32
 864 016c 0010A0E3 		mov	r1, #0
 865 0170 FEFFFFEB 		bl	CyU3PDmaChannelSetXfer
 866 0174 08000BE5 		str	r0, [fp, #-8]
 168:../DebugConsole.c **** 		CheckStatus("ConsoleInEnabled", Status);
 867              		.loc 1 168 0
 868 0178 3C009FE5 		ldr	r0, .L47+40
 869 017c 08101BE5 		ldr	r1, [fp, #-8]
 870 0180 FEFFFFEB 		bl	CheckStatus
 871              	.L46:
 169:../DebugConsole.c ****     }
 170:../DebugConsole.c ****     return Status;
 872              		.loc 1 170 0
 873 0184 08301BE5 		ldr	r3, [fp, #-8]
 171:../DebugConsole.c **** }
 874              		.loc 1 171 0
 875 0188 0300A0E1 		mov	r0, r3
 876 018c 04D04BE2 		sub	sp, fp, #4
 877 0190 0088BDE8 		ldmfd	sp!, {fp, pc}
 878              	.L48:
 879              		.align	2
 880              	.L47:
 881 0194 C0000000 		.word	.LC14
 882 0198 00C20100 		.word	115200
 883 019c 00000000 		.word	UartCallback
 884 01a0 D0000000 		.word	.LC15
 885 01a4 E4000000 		.word	.LC16
 886 01a8 00000000 		.word	DebugTxEnabled
 887 01ac FC000000 		.word	.LC17
 888 01b0 10010000 		.word	.LC18
 889 01b4 00000000 		.word	UARTtoCPU_Handle
 890 01b8 28010000 		.word	.LC19
 891 01bc 40010000 		.word	.LC20
 892              		.cfi_endproc
 893              	.LFE7:
 895              		.text
 896              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 DebugConsole.c
C:\Users\John\AppData\Local\Temp\ccg5y1hF.s:22     .bss.DebugTxEnabled:00000000 $d
C:\Users\John\AppData\Local\Temp\ccg5y1hF.s:25     .bss.DebugTxEnabled:00000000 DebugTxEnabled
C:\Users\John\AppData\Local\Temp\ccg5y1hF.s:28     .bss.UARTtoCPU_Handle:00000000 $d
C:\Users\John\AppData\Local\Temp\ccg5y1hF.s:31     .bss.UARTtoCPU_Handle:00000000 UARTtoCPU_Handle
C:\Users\John\AppData\Local\Temp\ccg5y1hF.s:34     .bss.ConsoleInBuffer:00000000 $d
C:\Users\John\AppData\Local\Temp\ccg5y1hF.s:37     .bss.ConsoleInBuffer:00000000 ConsoleInBuffer
C:\Users\John\AppData\Local\Temp\ccg5y1hF.s:40     .bss.ConsoleInIndex:00000000 $d
C:\Users\John\AppData\Local\Temp\ccg5y1hF.s:43     .bss.ConsoleInIndex:00000000 ConsoleInIndex
C:\Users\John\AppData\Local\Temp\ccg5y1hF.s:46     .rodata:00000000 $d
C:\Users\John\AppData\Local\Temp\ccg5y1hF.s:56     .text.CheckStatus:00000000 $a
C:\Users\John\AppData\Local\Temp\ccg5y1hF.s:59     .text.CheckStatus:00000000 CheckStatus
C:\Users\John\AppData\Local\Temp\ccg5y1hF.s:118    .text.CheckStatus:0000007c $d
C:\Users\John\AppData\Local\Temp\ccg5y1hF.s:126    .text.ASCII_Digit:00000000 $a
C:\Users\John\AppData\Local\Temp\ccg5y1hF.s:129    .text.ASCII_Digit:00000000 ASCII_Digit
C:\Users\John\AppData\Local\Temp\ccg5y1hF.s:169    .text.GetValue:00000000 $a
C:\Users\John\AppData\Local\Temp\ccg5y1hF.s:172    .text.GetValue:00000000 GetValue
C:\Users\John\AppData\Local\Temp\ccg5y1hF.s:235    .text.DisplayStacks:00000000 $a
C:\Users\John\AppData\Local\Temp\ccg5y1hF.s:238    .text.DisplayStacks:00000000 DisplayStacks
C:\Users\John\AppData\Local\Temp\ccg5y1hF.s:357    .text.DisplayStacks:00000144 $d
C:\Users\John\AppData\Local\Temp\ccg5y1hF.s:370    .text.DisplayThreads:00000000 $a
C:\Users\John\AppData\Local\Temp\ccg5y1hF.s:373    .text.DisplayThreads:00000000 DisplayThreads
C:\Users\John\AppData\Local\Temp\ccg5y1hF.s:447    .text.DisplayThreads:000000c8 $d
C:\Users\John\AppData\Local\Temp\ccg5y1hF.s:474    .text.ParseCommand:00000000 $a
C:\Users\John\AppData\Local\Temp\ccg5y1hF.s:477    .text.ParseCommand:00000000 ParseCommand
C:\Users\John\AppData\Local\Temp\ccg5y1hF.s:574    .text.ParseCommand:000000f8 $d
C:\Users\John\AppData\Local\Temp\ccg5y1hF.s:594    .text.UartCallback:00000000 $a
C:\Users\John\AppData\Local\Temp\ccg5y1hF.s:597    .text.UartCallback:00000000 UartCallback
C:\Users\John\AppData\Local\Temp\ccg5y1hF.s:695    .text.UartCallback:00000104 $d
C:\Users\John\AppData\Local\Temp\ccg5y1hF.s:725    .text.InitializeDebugConsole:00000000 $a
C:\Users\John\AppData\Local\Temp\ccg5y1hF.s:728    .text.InitializeDebugConsole:00000000 InitializeDebugConsole
C:\Users\John\AppData\Local\Temp\ccg5y1hF.s:881    .text.InitializeDebugConsole:00000194 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
CyU3PDebugPrint
_tx_thread_sleep
_txe_thread_info_get
StackPtr
ThreadHandle
_tx_thread_identify
strncmp
strcmp
CyU3PDeviceReset
SampleTime
CyU3PDmaChannelSetWrapUp
CyU3PDmaChannelGetBuffer
CyU3PDmaChannelDiscardBuffer
CyU3PUartRxSetBlockXfer
CyU3PUartInit
CyU3PMemSet
CyU3PUartSetConfig
CyU3PUartTxSetBlockXfer
CyU3PDebugInit
CyU3PDebugPreamble
CyU3PDmaChannelCreate
CyU3PDmaChannelDestroy
CyU3PDmaChannelSetXfer
