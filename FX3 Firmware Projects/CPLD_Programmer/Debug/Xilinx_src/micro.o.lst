   1              		.cpu arm926ej-s
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 18, 4
  11              		.file	"micro.c"
  19              	.Ltext0:
  20              		.cfi_sections	.debug_frame
  21              		.global	xsvf_pfDoCmd
  22              		.section	.data.xsvf_pfDoCmd,"aw",%progbits
  23              		.align	2
  26              	xsvf_pfDoCmd:
  27 0000 00000000 		.word	xsvfDoXCOMPLETE
  28 0004 00000000 		.word	xsvfDoXTDOMASK
  29 0008 00000000 		.word	xsvfDoXSIR
  30 000c 00000000 		.word	xsvfDoXSDR
  31 0010 00000000 		.word	xsvfDoXRUNTEST
  32 0014 00000000 		.word	xsvfDoIllegalCmd
  33 0018 00000000 		.word	xsvfDoIllegalCmd
  34 001c 00000000 		.word	xsvfDoXREPEAT
  35 0020 00000000 		.word	xsvfDoXSDRSIZE
  36 0024 00000000 		.word	xsvfDoXSDRTDO
  37 0028 00000000 		.word	xsvfDoXSETSDRMASKS
  38 002c 00000000 		.word	xsvfDoXSDRINC
  39 0030 00000000 		.word	xsvfDoXSDRBCE
  40 0034 00000000 		.word	xsvfDoXSDRBCE
  41 0038 00000000 		.word	xsvfDoXSDRBCE
  42 003c 00000000 		.word	xsvfDoXSDRTDOBCE
  43 0040 00000000 		.word	xsvfDoXSDRTDOBCE
  44 0044 00000000 		.word	xsvfDoXSDRTDOBCE
  45 0048 00000000 		.word	xsvfDoXSTATE
  46 004c 00000000 		.word	xsvfDoXENDXR
  47 0050 00000000 		.word	xsvfDoXENDXR
  48 0054 00000000 		.word	xsvfDoXSIR2
  49 0058 00000000 		.word	xsvfDoXCOMMENT
  50 005c 00000000 		.word	xsvfDoXWAIT
  51              		.section	.text.xsvfInfoInit,"ax",%progbits
  52              		.align	2
  53              		.global	xsvfInfoInit
  55              	xsvfInfoInit:
  56              	.LFB0:
  57              		.file 1 "../Xilinx_src/micro.c"
   1:../Xilinx_src/micro.c **** /*****************************************************************************
   2:../Xilinx_src/micro.c **** * file:         micro.c
   3:../Xilinx_src/micro.c **** * abstract:     This file contains the function, xsvfExecute(),
   4:../Xilinx_src/micro.c **** *               call for interpreting the XSVF commands.
   5:../Xilinx_src/micro.c **** * Usage:        Call xsvfExecute() to process XSVF data.
   6:../Xilinx_src/micro.c **** *               The XSVF data is retrieved by readByte() in ports.c
   7:../Xilinx_src/micro.c **** *               Remove the main function if you already have one.
   8:../Xilinx_src/micro.c **** * Options:      XSVF_SUPPORT_COMPRESSION
   9:../Xilinx_src/micro.c **** *                   This define supports the XC9500/XL compression scheme.
  10:../Xilinx_src/micro.c **** *                   This define adds support for XSDRINC and XSETSDRMASKS.
  11:../Xilinx_src/micro.c **** *               XSVF_SUPPORT_ERRORCODES
  12:../Xilinx_src/micro.c **** *                   This define causes the xsvfExecute function to return
  13:../Xilinx_src/micro.c **** *                   an error code for specific errors.  See error codes below.
  14:../Xilinx_src/micro.c **** *                   If this is not defined, the return value defaults to the
  15:../Xilinx_src/micro.c **** *                   legacy values for backward compatibility:
  16:../Xilinx_src/micro.c **** *                   1 = success;  0 = failure.
  17:../Xilinx_src/micro.c **** * Debugging:    DEBUG_MODE (Legacy name)
  18:../Xilinx_src/micro.c **** *               Define DEBUG_MODE to compile with debugging features.
  19:../Xilinx_src/micro.c **** *               Both micro.c and ports.c must be compiled with the DEBUG_MODE
  20:../Xilinx_src/micro.c **** *               defined to enable the standalone main implementation in
  21:../Xilinx_src/micro.c **** *               micro.c that reads XSVF from a file.
  22:../Xilinx_src/micro.c **** * History:      v2.00   - Original XSVF implementation.
  23:../Xilinx_src/micro.c **** *               v4.04   - Added delay at end of XSIR for XC18v00 support.
  24:../Xilinx_src/micro.c **** *                         Added new commands for CoolRunner support:
  25:../Xilinx_src/micro.c **** *                         XSTATE, XENDIR, XENDDR
  26:../Xilinx_src/micro.c **** *               v4.05   - Cleanup micro.c but leave ports.c intact.
  27:../Xilinx_src/micro.c **** *               v4.06   - Fix xsvfGotoTapState for retry transition.
  28:../Xilinx_src/micro.c **** *               v4.07   - Update example waitTime implementations for
  29:../Xilinx_src/micro.c **** *                         compatibility with Virtex-II.
  30:../Xilinx_src/micro.c **** *               v4.10   - Add new XSIR2 command that supports a 2-byte
  31:../Xilinx_src/micro.c **** *                         IR-length parameter for IR shifts > 255 bits.
  32:../Xilinx_src/micro.c **** *               v4.11   - No change.  Update version to match SVF2XSVF xlator.
  33:../Xilinx_src/micro.c **** *               v4.14   - Added XCOMMENT.
  34:../Xilinx_src/micro.c **** *               v5.00   - Improve XSTATE support.
  35:../Xilinx_src/micro.c **** *                         Added XWAIT.
  36:../Xilinx_src/micro.c **** *               v5.01   - make sure that TCK is low during RUNTEST wait for
  37:../Xilinx_src/micro.c **** *                         XC18V00/XCF00 support.  Only change is in PORTS.C
  38:../Xilinx_src/micro.c **** *                         waitTime() function for implementations that do NOT
  39:../Xilinx_src/micro.c **** *                         pulse TCK during the waitTime.
  40:../Xilinx_src/micro.c **** *****************************************************************************/
  41:../Xilinx_src/micro.c **** 
  42:../Xilinx_src/micro.c **** #define FX3 1	// Added mainly for DEBUG printing
  43:../Xilinx_src/micro.c **** #if (FX3)
  44:../Xilinx_src/micro.c **** extern unsigned int CyU3PDebugPrint (unsigned char priority, char *message, ... );
  45:../Xilinx_src/micro.c **** #endif
  46:../Xilinx_src/micro.c **** 
  47:../Xilinx_src/micro.c **** /*============================================================================
  48:../Xilinx_src/micro.c **** * #pragmas
  49:../Xilinx_src/micro.c **** ============================================================================*/
  50:../Xilinx_src/micro.c **** #ifdef  _MSC_VER
  51:../Xilinx_src/micro.c ****     #pragma warning( disable : 4100 )
  52:../Xilinx_src/micro.c **** #endif  /* _MSC_VER */
  53:../Xilinx_src/micro.c **** 
  54:../Xilinx_src/micro.c **** /*============================================================================
  55:../Xilinx_src/micro.c **** * #include files
  56:../Xilinx_src/micro.c **** ============================================================================*/
  57:../Xilinx_src/micro.c **** //#define DEBUG_MODE
  58:../Xilinx_src/micro.c **** #ifdef  DEBUG_MODE
  59:../Xilinx_src/micro.c **** 	#if (FX3 == 0)
  60:../Xilinx_src/micro.c **** 		#include <stdio.h>
  61:../Xilinx_src/micro.c **** 		#include <stdlib.h>
  62:../Xilinx_src/micro.c **** 		#include <string.h>
  63:../Xilinx_src/micro.c **** 		#include <time.h>
  64:../Xilinx_src/micro.c **** 	#endif
  65:../Xilinx_src/micro.c **** #else
  66:../Xilinx_src/micro.c **** #define xsvf_iDebugLevel 0
  67:../Xilinx_src/micro.c **** #endif  /* DEBUG_MODE */
  68:../Xilinx_src/micro.c **** 
  69:../Xilinx_src/micro.c **** #include "micro.h"
  70:../Xilinx_src/micro.c **** #include "lenval.h"
  71:../Xilinx_src/micro.c **** #include "ports.h"
  72:../Xilinx_src/micro.c **** 
  73:../Xilinx_src/micro.c **** 
  74:../Xilinx_src/micro.c **** /*============================================================================
  75:../Xilinx_src/micro.c **** * XSVF #define
  76:../Xilinx_src/micro.c **** ============================================================================*/
  77:../Xilinx_src/micro.c **** 
  78:../Xilinx_src/micro.c **** #define XSVF_VERSION    "5.01"
  79:../Xilinx_src/micro.c **** 
  80:../Xilinx_src/micro.c **** /*****************************************************************************
  81:../Xilinx_src/micro.c **** * Define:       XSVF_SUPPORT_COMPRESSION
  82:../Xilinx_src/micro.c **** * Description:  Define this to support the XC9500/XL XSVF data compression
  83:../Xilinx_src/micro.c **** *               scheme.
  84:../Xilinx_src/micro.c **** *               Code size can be reduced by NOT supporting this feature.
  85:../Xilinx_src/micro.c **** *               However, you must use the -nc (no compress) option when
  86:../Xilinx_src/micro.c **** *               translating SVF to XSVF using the SVF2XSVF translator.
  87:../Xilinx_src/micro.c **** *               Corresponding, uncompressed XSVF may be larger.
  88:../Xilinx_src/micro.c **** *****************************************************************************/
  89:../Xilinx_src/micro.c **** #ifndef XSVF_SUPPORT_COMPRESSION
  90:../Xilinx_src/micro.c ****     #define XSVF_SUPPORT_COMPRESSION    1
  91:../Xilinx_src/micro.c **** #endif
  92:../Xilinx_src/micro.c **** 
  93:../Xilinx_src/micro.c **** /*****************************************************************************
  94:../Xilinx_src/micro.c **** * Define:       XSVF_SUPPORT_ERRORCODES
  95:../Xilinx_src/micro.c **** * Description:  Define this to support the new XSVF error codes.
  96:../Xilinx_src/micro.c **** *               (The original XSVF player just returned 1 for success and
  97:../Xilinx_src/micro.c **** *               0 for an unspecified failure.)
  98:../Xilinx_src/micro.c **** *****************************************************************************/
  99:../Xilinx_src/micro.c **** #ifndef XSVF_SUPPORT_ERRORCODES
 100:../Xilinx_src/micro.c ****     #define XSVF_SUPPORT_ERRORCODES     1
 101:../Xilinx_src/micro.c **** #endif
 102:../Xilinx_src/micro.c **** 
 103:../Xilinx_src/micro.c **** #ifdef  XSVF_SUPPORT_ERRORCODES
 104:../Xilinx_src/micro.c ****     #define XSVF_ERRORCODE(errorCode)   errorCode
 105:../Xilinx_src/micro.c **** #else   /* Use legacy error code */
 106:../Xilinx_src/micro.c ****     #define XSVF_ERRORCODE(errorCode)   ((errorCode==XSVF_ERROR_NONE)?1:0)
 107:../Xilinx_src/micro.c **** #endif  /* XSVF_SUPPORT_ERRORCODES */
 108:../Xilinx_src/micro.c **** 
 109:../Xilinx_src/micro.c **** 
 110:../Xilinx_src/micro.c **** /*****************************************************************************
 111:../Xilinx_src/micro.c **** * Define:       XSVF_MAIN
 112:../Xilinx_src/micro.c **** * Description:  Define this to compile with a main function for standalone
 113:../Xilinx_src/micro.c **** *               debugging.
 114:../Xilinx_src/micro.c **** *****************************************************************************/
 115:../Xilinx_src/micro.c **** #ifndef XSVF_MAIN
 116:../Xilinx_src/micro.c ****     #ifdef DEBUG_MODE
 117:../Xilinx_src/micro.c ****         #define XSVF_MAIN   1
 118:../Xilinx_src/micro.c ****     #endif  /* DEBUG_MODE */
 119:../Xilinx_src/micro.c **** #endif  /* XSVF_MAIN */
 120:../Xilinx_src/micro.c **** 
 121:../Xilinx_src/micro.c **** 
 122:../Xilinx_src/micro.c **** /*============================================================================
 123:../Xilinx_src/micro.c **** * DEBUG_MODE #define
 124:../Xilinx_src/micro.c **** ============================================================================*/
 125:../Xilinx_src/micro.c **** 
 126:../Xilinx_src/micro.c **** #ifdef  DEBUG_MODE
 127:../Xilinx_src/micro.c **** #if (FX3)
 128:../Xilinx_src/micro.c **** 	#define XSVFDBG_PRINTF(iDebugLevel,pzFormat) CyU3PDebugPrint(4, pzFormat)
 129:../Xilinx_src/micro.c **** 	#define XSVFDBG_PRINTF1(iDebugLevel,pzFormat,arg1) CyU3PDebugPrint(4,pzFormat,arg1)
 130:../Xilinx_src/micro.c **** 	#define XSVFDBG_PRINTF2(iDebugLevel,pzFormat,arg1,arg2) CyU3PDebugPrint(4,pzFormat,arg1,arg2)
 131:../Xilinx_src/micro.c **** 	#define XSVFDBG_PRINTF3(iDebugLevel,pzFormat,arg1,arg2,arg3) CyU3PDebugPrint(4,pzFormat,arg1,arg2,
 132:../Xilinx_src/micro.c **** 	#define XSVFDBG_PRINTLENVAL(iDebugLevel,plenVal) xsvfPrintLenVal(plenVal)
 133:../Xilinx_src/micro.c **** 	#define putchar(x) CyU3PDebugPrint(4, "%c", x)
 134:../Xilinx_src/micro.c **** #else
 135:../Xilinx_src/micro.c ****     #define XSVFDBG_PRINTF(iDebugLevel,pzFormat) \
 136:../Xilinx_src/micro.c ****                 { if ( xsvf_iDebugLevel >= iDebugLevel ) \
 137:../Xilinx_src/micro.c ****                     printf( pzFormat ); }
 138:../Xilinx_src/micro.c ****     #define XSVFDBG_PRINTF1(iDebugLevel,pzFormat,arg1) \
 139:../Xilinx_src/micro.c ****                 { if ( xsvf_iDebugLevel >= iDebugLevel ) \
 140:../Xilinx_src/micro.c ****                     printf( pzFormat, arg1 ); }
 141:../Xilinx_src/micro.c ****     #define XSVFDBG_PRINTF2(iDebugLevel,pzFormat,arg1,arg2) \
 142:../Xilinx_src/micro.c ****                 { if ( xsvf_iDebugLevel >= iDebugLevel ) \
 143:../Xilinx_src/micro.c ****                     printf( pzFormat, arg1, arg2 ); }
 144:../Xilinx_src/micro.c ****     #define XSVFDBG_PRINTF3(iDebugLevel,pzFormat,arg1,arg2,arg3) \
 145:../Xilinx_src/micro.c ****                 { if ( xsvf_iDebugLevel >= iDebugLevel ) \
 146:../Xilinx_src/micro.c ****                     printf( pzFormat, arg1, arg2, arg3 ); }
 147:../Xilinx_src/micro.c ****     #define XSVFDBG_PRINTLENVAL(iDebugLevel,plenVal) \
 148:../Xilinx_src/micro.c ****                 { if ( xsvf_iDebugLevel >= iDebugLevel ) \
 149:../Xilinx_src/micro.c ****                     xsvfPrintLenVal(plenVal); }
 150:../Xilinx_src/micro.c **** #endif	// FX3
 151:../Xilinx_src/micro.c **** #else   /* !DEBUG_MODE */
 152:../Xilinx_src/micro.c ****     #define XSVFDBG_PRINTF(iDebugLevel,pzFormat)
 153:../Xilinx_src/micro.c ****     #define XSVFDBG_PRINTF1(iDebugLevel,pzFormat,arg1)
 154:../Xilinx_src/micro.c ****     #define XSVFDBG_PRINTF2(iDebugLevel,pzFormat,arg1,arg2)
 155:../Xilinx_src/micro.c ****     #define XSVFDBG_PRINTF3(iDebugLevel,pzFormat,arg1,arg2,arg3)
 156:../Xilinx_src/micro.c ****     #define XSVFDBG_PRINTLENVAL(iDebugLevel,plenVal)
 157:../Xilinx_src/micro.c **** #endif  /* DEBUG_MODE */
 158:../Xilinx_src/micro.c **** 
 159:../Xilinx_src/micro.c **** 
 160:../Xilinx_src/micro.c **** /*============================================================================
 161:../Xilinx_src/micro.c **** * XSVF Type Declarations
 162:../Xilinx_src/micro.c **** ============================================================================*/
 163:../Xilinx_src/micro.c **** 
 164:../Xilinx_src/micro.c **** /*****************************************************************************
 165:../Xilinx_src/micro.c **** * Struct:       SXsvfInfo
 166:../Xilinx_src/micro.c **** * Description:  This structure contains all of the data used during the
 167:../Xilinx_src/micro.c **** *               execution of the XSVF.  Some data is persistent, predefined
 168:../Xilinx_src/micro.c **** *               information (e.g. lRunTestTime).  The bulk of this struct's
 169:../Xilinx_src/micro.c **** *               size is due to the lenVal structs (defined in lenval.h)
 170:../Xilinx_src/micro.c **** *               which contain buffers for the active shift data.  The MAX_LEN
 171:../Xilinx_src/micro.c **** *               #define in lenval.h defines the size of these buffers.
 172:../Xilinx_src/micro.c **** *               These buffers must be large enough to store the longest
 173:../Xilinx_src/micro.c **** *               shift data in your XSVF file.  For example:
 174:../Xilinx_src/micro.c **** *                   MAX_LEN >= ( longest_shift_data_in_bits / 8 )
 175:../Xilinx_src/micro.c **** *               Because the lenVal struct dominates the space usage of this
 176:../Xilinx_src/micro.c **** *               struct, the rough size of this struct is:
 177:../Xilinx_src/micro.c **** *                   sizeof( SXsvfInfo ) ~= MAX_LEN * 7 (number of lenVals)
 178:../Xilinx_src/micro.c **** *               xsvfInitialize() contains initialization code for the data
 179:../Xilinx_src/micro.c **** *               in this struct.
 180:../Xilinx_src/micro.c **** *               xsvfCleanup() contains cleanup code for the data in this
 181:../Xilinx_src/micro.c **** *               struct.
 182:../Xilinx_src/micro.c **** *****************************************************************************/
 183:../Xilinx_src/micro.c **** typedef struct tagSXsvfInfo
 184:../Xilinx_src/micro.c **** {
 185:../Xilinx_src/micro.c ****     /* XSVF status information */
 186:../Xilinx_src/micro.c ****     unsigned char   ucComplete;         /* 0 = running; 1 = complete */
 187:../Xilinx_src/micro.c ****     unsigned char   ucCommand;          /* Current XSVF command byte */
 188:../Xilinx_src/micro.c ****     long            lCommandCount;      /* Number of commands processed */
 189:../Xilinx_src/micro.c ****     int             iErrorCode;         /* An error code. 0 = no error. */
 190:../Xilinx_src/micro.c **** 
 191:../Xilinx_src/micro.c ****     /* TAP state/sequencing information */
 192:../Xilinx_src/micro.c ****     unsigned char   ucTapState;         /* Current TAP state */
 193:../Xilinx_src/micro.c ****     unsigned char   ucEndIR;            /* ENDIR TAP state (See SVF) */
 194:../Xilinx_src/micro.c ****     unsigned char   ucEndDR;            /* ENDDR TAP state (See SVF) */
 195:../Xilinx_src/micro.c **** 
 196:../Xilinx_src/micro.c ****     /* RUNTEST information */
 197:../Xilinx_src/micro.c ****     unsigned char   ucMaxRepeat;        /* Max repeat loops (for xc9500/xl) */
 198:../Xilinx_src/micro.c ****     long            lRunTestTime;       /* Pre-specified RUNTEST time (usec) */
 199:../Xilinx_src/micro.c **** 
 200:../Xilinx_src/micro.c ****     /* Shift Data Info and Buffers */
 201:../Xilinx_src/micro.c ****     long            lShiftLengthBits;   /* Len. current shift data in bits */
 202:../Xilinx_src/micro.c ****     short           sShiftLengthBytes;  /* Len. current shift data in bytes */
 203:../Xilinx_src/micro.c **** 
 204:../Xilinx_src/micro.c ****     lenVal          lvTdi;              /* Current TDI shift data */
 205:../Xilinx_src/micro.c ****     lenVal          lvTdoExpected;      /* Expected TDO shift data */
 206:../Xilinx_src/micro.c ****     lenVal          lvTdoCaptured;      /* Captured TDO shift data */
 207:../Xilinx_src/micro.c ****     lenVal          lvTdoMask;          /* TDO mask: 0=dontcare; 1=compare */
 208:../Xilinx_src/micro.c **** 
 209:../Xilinx_src/micro.c **** #ifdef  XSVF_SUPPORT_COMPRESSION
 210:../Xilinx_src/micro.c ****     /* XSDRINC Data Buffers */
 211:../Xilinx_src/micro.c ****     lenVal          lvAddressMask;      /* Address mask for XSDRINC */
 212:../Xilinx_src/micro.c ****     lenVal          lvDataMask;         /* Data mask for XSDRINC */
 213:../Xilinx_src/micro.c ****     lenVal          lvNextData;         /* Next data for XSDRINC */
 214:../Xilinx_src/micro.c **** #endif  /* XSVF_SUPPORT_COMPRESSION */
 215:../Xilinx_src/micro.c **** } SXsvfInfo;
 216:../Xilinx_src/micro.c **** 
 217:../Xilinx_src/micro.c **** /* Declare pointer to functions that perform XSVF commands */
 218:../Xilinx_src/micro.c **** typedef int (*TXsvfDoCmdFuncPtr)( SXsvfInfo* );
 219:../Xilinx_src/micro.c **** 
 220:../Xilinx_src/micro.c **** 
 221:../Xilinx_src/micro.c **** /*============================================================================
 222:../Xilinx_src/micro.c **** * XSVF Command Bytes
 223:../Xilinx_src/micro.c **** ============================================================================*/
 224:../Xilinx_src/micro.c **** 
 225:../Xilinx_src/micro.c **** /* encodings of xsvf instructions */
 226:../Xilinx_src/micro.c **** #define XCOMPLETE        0
 227:../Xilinx_src/micro.c **** #define XTDOMASK         1
 228:../Xilinx_src/micro.c **** #define XSIR             2
 229:../Xilinx_src/micro.c **** #define XSDR             3
 230:../Xilinx_src/micro.c **** #define XRUNTEST         4
 231:../Xilinx_src/micro.c **** /* Reserved              5 */
 232:../Xilinx_src/micro.c **** /* Reserved              6 */
 233:../Xilinx_src/micro.c **** #define XREPEAT          7
 234:../Xilinx_src/micro.c **** #define XSDRSIZE         8
 235:../Xilinx_src/micro.c **** #define XSDRTDO          9
 236:../Xilinx_src/micro.c **** #define XSETSDRMASKS     10
 237:../Xilinx_src/micro.c **** #define XSDRINC          11
 238:../Xilinx_src/micro.c **** #define XSDRB            12
 239:../Xilinx_src/micro.c **** #define XSDRC            13
 240:../Xilinx_src/micro.c **** #define XSDRE            14
 241:../Xilinx_src/micro.c **** #define XSDRTDOB         15
 242:../Xilinx_src/micro.c **** #define XSDRTDOC         16
 243:../Xilinx_src/micro.c **** #define XSDRTDOE         17
 244:../Xilinx_src/micro.c **** #define XSTATE           18         /* 4.00 */
 245:../Xilinx_src/micro.c **** #define XENDIR           19         /* 4.04 */
 246:../Xilinx_src/micro.c **** #define XENDDR           20         /* 4.04 */
 247:../Xilinx_src/micro.c **** #define XSIR2            21         /* 4.10 */
 248:../Xilinx_src/micro.c **** #define XCOMMENT         22         /* 4.14 */
 249:../Xilinx_src/micro.c **** #define XWAIT            23         /* 5.00 */
 250:../Xilinx_src/micro.c **** /* Insert new commands here */
 251:../Xilinx_src/micro.c **** /* and add corresponding xsvfDoCmd function to xsvf_pfDoCmd below. */
 252:../Xilinx_src/micro.c **** #define XLASTCMD         24         /* Last command marker */
 253:../Xilinx_src/micro.c **** 
 254:../Xilinx_src/micro.c **** 
 255:../Xilinx_src/micro.c **** /*============================================================================
 256:../Xilinx_src/micro.c **** * XSVF Command Parameter Values
 257:../Xilinx_src/micro.c **** ============================================================================*/
 258:../Xilinx_src/micro.c **** 
 259:../Xilinx_src/micro.c **** #define XSTATE_RESET     0          /* 4.00 parameter for XSTATE */
 260:../Xilinx_src/micro.c **** #define XSTATE_RUNTEST   1          /* 4.00 parameter for XSTATE */
 261:../Xilinx_src/micro.c **** 
 262:../Xilinx_src/micro.c **** #define XENDXR_RUNTEST   0          /* 4.04 parameter for XENDIR/DR */
 263:../Xilinx_src/micro.c **** #define XENDXR_PAUSE     1          /* 4.04 parameter for XENDIR/DR */
 264:../Xilinx_src/micro.c **** 
 265:../Xilinx_src/micro.c **** /* TAP states */
 266:../Xilinx_src/micro.c **** #define XTAPSTATE_RESET     0x00
 267:../Xilinx_src/micro.c **** #define XTAPSTATE_RUNTEST   0x01    /* a.k.a. IDLE */
 268:../Xilinx_src/micro.c **** #define XTAPSTATE_SELECTDR  0x02
 269:../Xilinx_src/micro.c **** #define XTAPSTATE_CAPTUREDR 0x03
 270:../Xilinx_src/micro.c **** #define XTAPSTATE_SHIFTDR   0x04
 271:../Xilinx_src/micro.c **** #define XTAPSTATE_EXIT1DR   0x05
 272:../Xilinx_src/micro.c **** #define XTAPSTATE_PAUSEDR   0x06
 273:../Xilinx_src/micro.c **** #define XTAPSTATE_EXIT2DR   0x07
 274:../Xilinx_src/micro.c **** #define XTAPSTATE_UPDATEDR  0x08
 275:../Xilinx_src/micro.c **** #define XTAPSTATE_IRSTATES  0x09    /* All IR states begin here */
 276:../Xilinx_src/micro.c **** #define XTAPSTATE_SELECTIR  0x09
 277:../Xilinx_src/micro.c **** #define XTAPSTATE_CAPTUREIR 0x0A
 278:../Xilinx_src/micro.c **** #define XTAPSTATE_SHIFTIR   0x0B
 279:../Xilinx_src/micro.c **** #define XTAPSTATE_EXIT1IR   0x0C
 280:../Xilinx_src/micro.c **** #define XTAPSTATE_PAUSEIR   0x0D
 281:../Xilinx_src/micro.c **** #define XTAPSTATE_EXIT2IR   0x0E
 282:../Xilinx_src/micro.c **** #define XTAPSTATE_UPDATEIR  0x0F
 283:../Xilinx_src/micro.c **** 
 284:../Xilinx_src/micro.c **** /*============================================================================
 285:../Xilinx_src/micro.c **** * XSVF Function Prototypes
 286:../Xilinx_src/micro.c **** ============================================================================*/
 287:../Xilinx_src/micro.c **** 
 288:../Xilinx_src/micro.c **** int xsvfDoIllegalCmd( SXsvfInfo* pXsvfInfo );   /* Illegal command function */
 289:../Xilinx_src/micro.c **** int xsvfDoXCOMPLETE( SXsvfInfo* pXsvfInfo );
 290:../Xilinx_src/micro.c **** int xsvfDoXTDOMASK( SXsvfInfo* pXsvfInfo );
 291:../Xilinx_src/micro.c **** int xsvfDoXSIR( SXsvfInfo* pXsvfInfo );
 292:../Xilinx_src/micro.c **** int xsvfDoXSIR2( SXsvfInfo* pXsvfInfo );
 293:../Xilinx_src/micro.c **** int xsvfDoXSDR( SXsvfInfo* pXsvfInfo );
 294:../Xilinx_src/micro.c **** int xsvfDoXRUNTEST( SXsvfInfo* pXsvfInfo );
 295:../Xilinx_src/micro.c **** int xsvfDoXREPEAT( SXsvfInfo* pXsvfInfo );
 296:../Xilinx_src/micro.c **** int xsvfDoXSDRSIZE( SXsvfInfo* pXsvfInfo );
 297:../Xilinx_src/micro.c **** int xsvfDoXSDRTDO( SXsvfInfo* pXsvfInfo );
 298:../Xilinx_src/micro.c **** int xsvfDoXSETSDRMASKS( SXsvfInfo* pXsvfInfo );
 299:../Xilinx_src/micro.c **** int xsvfDoXSDRINC( SXsvfInfo* pXsvfInfo );
 300:../Xilinx_src/micro.c **** int xsvfDoXSDRBCE( SXsvfInfo* pXsvfInfo );
 301:../Xilinx_src/micro.c **** int xsvfDoXSDRTDOBCE( SXsvfInfo* pXsvfInfo );
 302:../Xilinx_src/micro.c **** int xsvfDoXSTATE( SXsvfInfo* pXsvfInfo );
 303:../Xilinx_src/micro.c **** int xsvfDoXENDXR( SXsvfInfo* pXsvfInfo );
 304:../Xilinx_src/micro.c **** int xsvfDoXCOMMENT( SXsvfInfo* pXsvfInfo );
 305:../Xilinx_src/micro.c **** int xsvfDoXWAIT( SXsvfInfo* pXsvfInfo );
 306:../Xilinx_src/micro.c **** /* Insert new command functions here */
 307:../Xilinx_src/micro.c **** 
 308:../Xilinx_src/micro.c **** /*============================================================================
 309:../Xilinx_src/micro.c **** * XSVF Global Variables
 310:../Xilinx_src/micro.c **** ============================================================================*/
 311:../Xilinx_src/micro.c **** 
 312:../Xilinx_src/micro.c **** /* Array of XSVF command functions.  Must follow command byte value order! */
 313:../Xilinx_src/micro.c **** /* If your compiler cannot take this form, then convert to a switch statement*/
 314:../Xilinx_src/micro.c **** TXsvfDoCmdFuncPtr   xsvf_pfDoCmd[]  =
 315:../Xilinx_src/micro.c **** {
 316:../Xilinx_src/micro.c ****     xsvfDoXCOMPLETE,        /*  0 */
 317:../Xilinx_src/micro.c ****     xsvfDoXTDOMASK,         /*  1 */
 318:../Xilinx_src/micro.c ****     xsvfDoXSIR,             /*  2 */
 319:../Xilinx_src/micro.c ****     xsvfDoXSDR,             /*  3 */
 320:../Xilinx_src/micro.c ****     xsvfDoXRUNTEST,         /*  4 */
 321:../Xilinx_src/micro.c ****     xsvfDoIllegalCmd,       /*  5 */
 322:../Xilinx_src/micro.c ****     xsvfDoIllegalCmd,       /*  6 */
 323:../Xilinx_src/micro.c ****     xsvfDoXREPEAT,          /*  7 */
 324:../Xilinx_src/micro.c ****     xsvfDoXSDRSIZE,         /*  8 */
 325:../Xilinx_src/micro.c ****     xsvfDoXSDRTDO,          /*  9 */
 326:../Xilinx_src/micro.c **** #ifdef  XSVF_SUPPORT_COMPRESSION
 327:../Xilinx_src/micro.c ****     xsvfDoXSETSDRMASKS,     /* 10 */
 328:../Xilinx_src/micro.c ****     xsvfDoXSDRINC,          /* 11 */
 329:../Xilinx_src/micro.c **** #else
 330:../Xilinx_src/micro.c ****     xsvfDoIllegalCmd,       /* 10 */
 331:../Xilinx_src/micro.c ****     xsvfDoIllegalCmd,       /* 11 */
 332:../Xilinx_src/micro.c **** #endif  /* XSVF_SUPPORT_COMPRESSION */
 333:../Xilinx_src/micro.c ****     xsvfDoXSDRBCE,          /* 12 */
 334:../Xilinx_src/micro.c ****     xsvfDoXSDRBCE,          /* 13 */
 335:../Xilinx_src/micro.c ****     xsvfDoXSDRBCE,          /* 14 */
 336:../Xilinx_src/micro.c ****     xsvfDoXSDRTDOBCE,       /* 15 */
 337:../Xilinx_src/micro.c ****     xsvfDoXSDRTDOBCE,       /* 16 */
 338:../Xilinx_src/micro.c ****     xsvfDoXSDRTDOBCE,       /* 17 */
 339:../Xilinx_src/micro.c ****     xsvfDoXSTATE,           /* 18 */
 340:../Xilinx_src/micro.c ****     xsvfDoXENDXR,           /* 19 */
 341:../Xilinx_src/micro.c ****     xsvfDoXENDXR,           /* 20 */
 342:../Xilinx_src/micro.c ****     xsvfDoXSIR2,            /* 21 */
 343:../Xilinx_src/micro.c ****     xsvfDoXCOMMENT,         /* 22 */
 344:../Xilinx_src/micro.c ****     xsvfDoXWAIT             /* 23 */
 345:../Xilinx_src/micro.c **** /* Insert new command functions here */
 346:../Xilinx_src/micro.c **** };
 347:../Xilinx_src/micro.c **** 
 348:../Xilinx_src/micro.c **** #ifdef  DEBUG_MODE
 349:../Xilinx_src/micro.c ****     char* xsvf_pzCommandName[]  =
 350:../Xilinx_src/micro.c ****     {
 351:../Xilinx_src/micro.c ****         "XCOMPLETE",
 352:../Xilinx_src/micro.c ****         "XTDOMASK",
 353:../Xilinx_src/micro.c ****         "XSIR",
 354:../Xilinx_src/micro.c ****         "XSDR",
 355:../Xilinx_src/micro.c ****         "XRUNTEST",
 356:../Xilinx_src/micro.c ****         "Reserved5",
 357:../Xilinx_src/micro.c ****         "Reserved6",
 358:../Xilinx_src/micro.c ****         "XREPEAT",
 359:../Xilinx_src/micro.c ****         "XSDRSIZE",
 360:../Xilinx_src/micro.c ****         "XSDRTDO",
 361:../Xilinx_src/micro.c ****         "XSETSDRMASKS",
 362:../Xilinx_src/micro.c ****         "XSDRINC",
 363:../Xilinx_src/micro.c ****         "XSDRB",
 364:../Xilinx_src/micro.c ****         "XSDRC",
 365:../Xilinx_src/micro.c ****         "XSDRE",
 366:../Xilinx_src/micro.c ****         "XSDRTDOB",
 367:../Xilinx_src/micro.c ****         "XSDRTDOC",
 368:../Xilinx_src/micro.c ****         "XSDRTDOE",
 369:../Xilinx_src/micro.c ****         "XSTATE",
 370:../Xilinx_src/micro.c ****         "XENDIR",
 371:../Xilinx_src/micro.c ****         "XENDDR",
 372:../Xilinx_src/micro.c ****         "XSIR2",
 373:../Xilinx_src/micro.c ****         "XCOMMENT",
 374:../Xilinx_src/micro.c ****         "XWAIT"
 375:../Xilinx_src/micro.c ****     };
 376:../Xilinx_src/micro.c **** 
 377:../Xilinx_src/micro.c ****     char*   xsvf_pzErrorName[]  =
 378:../Xilinx_src/micro.c ****     {
 379:../Xilinx_src/micro.c ****         "No error",
 380:../Xilinx_src/micro.c ****         "ERROR:  Unknown",
 381:../Xilinx_src/micro.c ****         "ERROR:  TDO mismatch",
 382:../Xilinx_src/micro.c ****         "ERROR:  TDO mismatch and exceeded max retries",
 383:../Xilinx_src/micro.c ****         "ERROR:  Unsupported XSVF command",
 384:../Xilinx_src/micro.c ****         "ERROR:  Illegal state specification",
 385:../Xilinx_src/micro.c ****         "ERROR:  Data overflows allocated MAX_LEN buffer size"
 386:../Xilinx_src/micro.c ****     };
 387:../Xilinx_src/micro.c **** 
 388:../Xilinx_src/micro.c ****     char*   xsvf_pzTapState[] =
 389:../Xilinx_src/micro.c ****     {
 390:../Xilinx_src/micro.c ****         "RESET",        /* 0x00 */
 391:../Xilinx_src/micro.c ****         "RUNTEST/IDLE", /* 0x01 */
 392:../Xilinx_src/micro.c ****         "DRSELECT",     /* 0x02 */
 393:../Xilinx_src/micro.c ****         "DRCAPTURE",    /* 0x03 */
 394:../Xilinx_src/micro.c ****         "DRSHIFT",      /* 0x04 */
 395:../Xilinx_src/micro.c ****         "DREXIT1",      /* 0x05 */
 396:../Xilinx_src/micro.c ****         "DRPAUSE",      /* 0x06 */
 397:../Xilinx_src/micro.c ****         "DREXIT2",      /* 0x07 */
 398:../Xilinx_src/micro.c ****         "DRUPDATE",     /* 0x08 */
 399:../Xilinx_src/micro.c ****         "IRSELECT",     /* 0x09 */
 400:../Xilinx_src/micro.c ****         "IRCAPTURE",    /* 0x0A */
 401:../Xilinx_src/micro.c ****         "IRSHIFT",      /* 0x0B */
 402:../Xilinx_src/micro.c ****         "IREXIT1",      /* 0x0C */
 403:../Xilinx_src/micro.c ****         "IRPAUSE",      /* 0x0D */
 404:../Xilinx_src/micro.c ****         "IREXIT2",      /* 0x0E */
 405:../Xilinx_src/micro.c ****         "IRUPDATE"      /* 0x0F */
 406:../Xilinx_src/micro.c ****     };
 407:../Xilinx_src/micro.c **** #endif  /* DEBUG_MODE */
 408:../Xilinx_src/micro.c **** 
 409:../Xilinx_src/micro.c **** #ifdef DEBUG_MODE
 410:../Xilinx_src/micro.c **** 	#if (FX3 == 0)
 411:../Xilinx_src/micro.c **** 		FILE* in;   /* Legacy DEBUG_MODE file pointer */
 412:../Xilinx_src/micro.c **** 	#endif
 413:../Xilinx_src/micro.c ****     int xsvf_iDebugLevel;
 414:../Xilinx_src/micro.c **** #endif /* DEBUG_MODE */
 415:../Xilinx_src/micro.c **** 
 416:../Xilinx_src/micro.c **** /*============================================================================
 417:../Xilinx_src/micro.c **** * Utility Functions
 418:../Xilinx_src/micro.c **** ============================================================================*/
 419:../Xilinx_src/micro.c **** 
 420:../Xilinx_src/micro.c **** /*****************************************************************************
 421:../Xilinx_src/micro.c **** * Function:     xsvfPrintLenVal
 422:../Xilinx_src/micro.c **** * Description:  Print the lenval value in hex.
 423:../Xilinx_src/micro.c **** * Parameters:   plv     - ptr to lenval.
 424:../Xilinx_src/micro.c **** * Returns:      void.
 425:../Xilinx_src/micro.c **** *****************************************************************************/
 426:../Xilinx_src/micro.c **** #ifdef  DEBUG_MODE
 427:../Xilinx_src/micro.c **** void xsvfPrintLenVal( lenVal *plv )
 428:../Xilinx_src/micro.c **** {
 429:../Xilinx_src/micro.c ****     int i;
 430:../Xilinx_src/micro.c **** 
 431:../Xilinx_src/micro.c ****     if ( plv )
 432:../Xilinx_src/micro.c ****     {
 433:../Xilinx_src/micro.c **** #if (FX3)
 434:../Xilinx_src/micro.c ****     	CyU3PDebugPrint(4, "0x");
 435:../Xilinx_src/micro.c **** #else
 436:../Xilinx_src/micro.c ****     	printf( "0x" );
 437:../Xilinx_src/micro.c **** #endif
 438:../Xilinx_src/micro.c ****         for ( i = 0; i < plv->len; ++i )
 439:../Xilinx_src/micro.c ****         {
 440:../Xilinx_src/micro.c **** #if (FX3)
 441:../Xilinx_src/micro.c ****         	CyU3PDebugPrint(4, "%x", ((unsigned int)(plv->val[ i ])) );
 442:../Xilinx_src/micro.c **** #else
 443:../Xilinx_src/micro.c ****             printf( "%02x", ((unsigned int)(plv->val[ i ])) );
 444:../Xilinx_src/micro.c **** #endif
 445:../Xilinx_src/micro.c ****         }
 446:../Xilinx_src/micro.c ****     }
 447:../Xilinx_src/micro.c **** }
 448:../Xilinx_src/micro.c **** #endif  /* DEBUG_MODE */
 449:../Xilinx_src/micro.c **** 
 450:../Xilinx_src/micro.c **** 
 451:../Xilinx_src/micro.c **** /*****************************************************************************
 452:../Xilinx_src/micro.c **** * Function:     xsvfInfoInit
 453:../Xilinx_src/micro.c **** * Description:  Initialize the xsvfInfo data.
 454:../Xilinx_src/micro.c **** * Parameters:   pXsvfInfo   - ptr to the XSVF info structure.
 455:../Xilinx_src/micro.c **** * Returns:      int         - 0 = success; otherwise error.
 456:../Xilinx_src/micro.c **** *****************************************************************************/
 457:../Xilinx_src/micro.c **** int xsvfInfoInit( SXsvfInfo* pXsvfInfo )
 458:../Xilinx_src/micro.c **** {
  58              		.loc 1 458 0
  59              		.cfi_startproc
  60              		@ args = 0, pretend = 0, frame = 8
  61              		@ frame_needed = 1, uses_anonymous_args = 0
  62              		@ link register save eliminated.
  63 0000 04B02DE5 		str	fp, [sp, #-4]!
  64              	.LCFI0:
  65              		.cfi_def_cfa_offset 4
  66 0004 00B08DE2 		add	fp, sp, #0
  67              		.cfi_offset 11, -4
  68              	.LCFI1:
  69              		.cfi_def_cfa_register 11
  70 0008 0CD04DE2 		sub	sp, sp, #12
  71 000c 08000BE5 		str	r0, [fp, #-8]
 459:../Xilinx_src/micro.c ****     XSVFDBG_PRINTF1( 4, "    sizeof( SXsvfInfo ) = %d bytes\n",
 460:../Xilinx_src/micro.c ****                      sizeof( SXsvfInfo ) );
 461:../Xilinx_src/micro.c **** 
 462:../Xilinx_src/micro.c ****     pXsvfInfo->ucComplete       = 0;
  72              		.loc 1 462 0
  73 0010 08301BE5 		ldr	r3, [fp, #-8]
  74 0014 0020A0E3 		mov	r2, #0
  75 0018 0020C3E5 		strb	r2, [r3, #0]
 463:../Xilinx_src/micro.c ****     pXsvfInfo->ucCommand        = XCOMPLETE;
  76              		.loc 1 463 0
  77 001c 08301BE5 		ldr	r3, [fp, #-8]
  78 0020 0020A0E3 		mov	r2, #0
  79 0024 0120C3E5 		strb	r2, [r3, #1]
 464:../Xilinx_src/micro.c ****     pXsvfInfo->lCommandCount    = 0;
  80              		.loc 1 464 0
  81 0028 08301BE5 		ldr	r3, [fp, #-8]
  82 002c 0020A0E3 		mov	r2, #0
  83 0030 042083E5 		str	r2, [r3, #4]
 465:../Xilinx_src/micro.c ****     pXsvfInfo->iErrorCode       = XSVF_ERROR_NONE;
  84              		.loc 1 465 0
  85 0034 08301BE5 		ldr	r3, [fp, #-8]
  86 0038 0020A0E3 		mov	r2, #0
  87 003c 082083E5 		str	r2, [r3, #8]
 466:../Xilinx_src/micro.c ****     pXsvfInfo->ucMaxRepeat      = 0;
  88              		.loc 1 466 0
  89 0040 08301BE5 		ldr	r3, [fp, #-8]
  90 0044 0020A0E3 		mov	r2, #0
  91 0048 0F20C3E5 		strb	r2, [r3, #15]
 467:../Xilinx_src/micro.c ****     pXsvfInfo->ucTapState       = XTAPSTATE_RESET;
  92              		.loc 1 467 0
  93 004c 08301BE5 		ldr	r3, [fp, #-8]
  94 0050 0020A0E3 		mov	r2, #0
  95 0054 0C20C3E5 		strb	r2, [r3, #12]
 468:../Xilinx_src/micro.c ****     pXsvfInfo->ucEndIR          = XTAPSTATE_RUNTEST;
  96              		.loc 1 468 0
  97 0058 08301BE5 		ldr	r3, [fp, #-8]
  98 005c 0120A0E3 		mov	r2, #1
  99 0060 0D20C3E5 		strb	r2, [r3, #13]
 469:../Xilinx_src/micro.c ****     pXsvfInfo->ucEndDR          = XTAPSTATE_RUNTEST;
 100              		.loc 1 469 0
 101 0064 08301BE5 		ldr	r3, [fp, #-8]
 102 0068 0120A0E3 		mov	r2, #1
 103 006c 0E20C3E5 		strb	r2, [r3, #14]
 470:../Xilinx_src/micro.c ****     pXsvfInfo->lShiftLengthBits = 0L;
 104              		.loc 1 470 0
 105 0070 08301BE5 		ldr	r3, [fp, #-8]
 106 0074 0020A0E3 		mov	r2, #0
 107 0078 142083E5 		str	r2, [r3, #20]
 471:../Xilinx_src/micro.c ****     pXsvfInfo->sShiftLengthBytes= 0;
 108              		.loc 1 471 0
 109 007c 08301BE5 		ldr	r3, [fp, #-8]
 110 0080 0020A0E3 		mov	r2, #0
 111 0084 B821C3E1 		strh	r2, [r3, #24]	@ movhi
 472:../Xilinx_src/micro.c ****     pXsvfInfo->lRunTestTime     = 0L;
 112              		.loc 1 472 0
 113 0088 08301BE5 		ldr	r3, [fp, #-8]
 114 008c 0020A0E3 		mov	r2, #0
 115 0090 102083E5 		str	r2, [r3, #16]
 473:../Xilinx_src/micro.c **** 
 474:../Xilinx_src/micro.c ****     return( 0 );
 116              		.loc 1 474 0
 117 0094 0030A0E3 		mov	r3, #0
 475:../Xilinx_src/micro.c **** }
 118              		.loc 1 475 0
 119 0098 0300A0E1 		mov	r0, r3
 120 009c 00D08BE2 		add	sp, fp, #0
 121 00a0 04B09DE4 		ldmfd	sp!, {fp}
 122 00a4 1EFF2FE1 		bx	lr
 123              		.cfi_endproc
 124              	.LFE0:
 126              		.section	.text.xsvfInfoCleanup,"ax",%progbits
 127              		.align	2
 128              		.global	xsvfInfoCleanup
 130              	xsvfInfoCleanup:
 131              	.LFB1:
 476:../Xilinx_src/micro.c **** 
 477:../Xilinx_src/micro.c **** /*****************************************************************************
 478:../Xilinx_src/micro.c **** * Function:     xsvfInfoCleanup
 479:../Xilinx_src/micro.c **** * Description:  Cleanup the xsvfInfo data.
 480:../Xilinx_src/micro.c **** * Parameters:   pXsvfInfo   - ptr to the XSVF info structure.
 481:../Xilinx_src/micro.c **** * Returns:      void.
 482:../Xilinx_src/micro.c **** *****************************************************************************/
 483:../Xilinx_src/micro.c **** void xsvfInfoCleanup( SXsvfInfo* pXsvfInfo )
 484:../Xilinx_src/micro.c **** {
 132              		.loc 1 484 0
 133              		.cfi_startproc
 134              		@ args = 0, pretend = 0, frame = 8
 135              		@ frame_needed = 1, uses_anonymous_args = 0
 136              		@ link register save eliminated.
 137 0000 04B02DE5 		str	fp, [sp, #-4]!
 138              	.LCFI2:
 139              		.cfi_def_cfa_offset 4
 140 0004 00B08DE2 		add	fp, sp, #0
 141              		.cfi_offset 11, -4
 142              	.LCFI3:
 143              		.cfi_def_cfa_register 11
 144 0008 0CD04DE2 		sub	sp, sp, #12
 145 000c 08000BE5 		str	r0, [fp, #-8]
 485:../Xilinx_src/micro.c **** }
 146              		.loc 1 485 0
 147 0010 00D08BE2 		add	sp, fp, #0
 148 0014 04B09DE4 		ldmfd	sp!, {fp}
 149 0018 1EFF2FE1 		bx	lr
 150              		.cfi_endproc
 151              	.LFE1:
 153              		.section	.text.xsvfGetAsNumBytes,"ax",%progbits
 154              		.align	2
 155              		.global	xsvfGetAsNumBytes
 157              	xsvfGetAsNumBytes:
 158              	.LFB2:
 486:../Xilinx_src/micro.c **** 
 487:../Xilinx_src/micro.c **** /*****************************************************************************
 488:../Xilinx_src/micro.c **** * Function:     xsvfGetAsNumBytes
 489:../Xilinx_src/micro.c **** * Description:  Calculate the number of bytes the given number of bits
 490:../Xilinx_src/micro.c **** *               consumes.
 491:../Xilinx_src/micro.c **** * Parameters:   lNumBits    - the number of bits.
 492:../Xilinx_src/micro.c **** * Returns:      short       - the number of bytes to store the number of bits.
 493:../Xilinx_src/micro.c **** *****************************************************************************/
 494:../Xilinx_src/micro.c **** short xsvfGetAsNumBytes( long lNumBits )
 495:../Xilinx_src/micro.c **** {
 159              		.loc 1 495 0
 160              		.cfi_startproc
 161              		@ args = 0, pretend = 0, frame = 8
 162              		@ frame_needed = 1, uses_anonymous_args = 0
 163              		@ link register save eliminated.
 164 0000 04B02DE5 		str	fp, [sp, #-4]!
 165              	.LCFI4:
 166              		.cfi_def_cfa_offset 4
 167 0004 00B08DE2 		add	fp, sp, #0
 168              		.cfi_offset 11, -4
 169              	.LCFI5:
 170              		.cfi_def_cfa_register 11
 171 0008 0CD04DE2 		sub	sp, sp, #12
 172 000c 08000BE5 		str	r0, [fp, #-8]
 496:../Xilinx_src/micro.c ****     return( (short)( ( lNumBits + 7L ) / 8L ) );
 173              		.loc 1 496 0
 174 0010 08301BE5 		ldr	r3, [fp, #-8]
 175 0014 073083E2 		add	r3, r3, #7
 176 0018 072083E2 		add	r2, r3, #7
 177 001c 000053E3 		cmp	r3, #0
 178 0020 0230A0B1 		movlt	r3, r2
 179 0024 C331A0E1 		mov	r3, r3, asr #3
 180 0028 0338A0E1 		mov	r3, r3, asl #16
 181 002c 2338A0E1 		mov	r3, r3, lsr #16
 182 0030 0338A0E1 		mov	r3, r3, asl #16
 183 0034 4338A0E1 		mov	r3, r3, asr #16
 497:../Xilinx_src/micro.c **** }
 184              		.loc 1 497 0
 185 0038 0300A0E1 		mov	r0, r3
 186 003c 00D08BE2 		add	sp, fp, #0
 187 0040 04B09DE4 		ldmfd	sp!, {fp}
 188 0044 1EFF2FE1 		bx	lr
 189              		.cfi_endproc
 190              	.LFE2:
 192              		.section	.text.xsvfTmsTransition,"ax",%progbits
 193              		.align	2
 194              		.global	xsvfTmsTransition
 196              	xsvfTmsTransition:
 197              	.LFB3:
 498:../Xilinx_src/micro.c **** 
 499:../Xilinx_src/micro.c **** /*****************************************************************************
 500:../Xilinx_src/micro.c **** * Function:     xsvfTmsTransition
 501:../Xilinx_src/micro.c **** * Description:  Apply TMS and transition TAP controller by applying one TCK
 502:../Xilinx_src/micro.c **** *               cycle.
 503:../Xilinx_src/micro.c **** * Parameters:   sTms    - new TMS value.
 504:../Xilinx_src/micro.c **** * Returns:      void.
 505:../Xilinx_src/micro.c **** *****************************************************************************/
 506:../Xilinx_src/micro.c **** void xsvfTmsTransition( short sTms )
 507:../Xilinx_src/micro.c **** {
 198              		.loc 1 507 0
 199              		.cfi_startproc
 200              		@ args = 0, pretend = 0, frame = 8
 201              		@ frame_needed = 1, uses_anonymous_args = 0
 202 0000 00482DE9 		stmfd	sp!, {fp, lr}
 203              	.LCFI6:
 204              		.cfi_def_cfa_offset 8
 205 0004 04B08DE2 		add	fp, sp, #4
 206              		.cfi_offset 14, -4
 207              		.cfi_offset 11, -8
 208              	.LCFI7:
 209              		.cfi_def_cfa 11, 4
 210 0008 08D04DE2 		sub	sp, sp, #8
 211 000c 0030A0E1 		mov	r3, r0
 212 0010 B6304BE1 		strh	r3, [fp, #-6]	@ movhi
 508:../Xilinx_src/micro.c ****     setPort( TMS, sTms );
 213              		.loc 1 508 0
 214 0014 F6305BE1 		ldrsh	r3, [fp, #-6]
 215 0018 0100A0E3 		mov	r0, #1
 216 001c 0310A0E1 		mov	r1, r3
 217 0020 FEFFFFEB 		bl	setPort
 509:../Xilinx_src/micro.c ****     setPort( TCK, 0 );
 218              		.loc 1 509 0
 219 0024 0000A0E3 		mov	r0, #0
 220 0028 0010A0E3 		mov	r1, #0
 221 002c FEFFFFEB 		bl	setPort
 510:../Xilinx_src/micro.c ****     setPort( TCK, 1 );
 222              		.loc 1 510 0
 223 0030 0000A0E3 		mov	r0, #0
 224 0034 0110A0E3 		mov	r1, #1
 225 0038 FEFFFFEB 		bl	setPort
 511:../Xilinx_src/micro.c **** }
 226              		.loc 1 511 0
 227 003c 04D04BE2 		sub	sp, fp, #4
 228 0040 0088BDE8 		ldmfd	sp!, {fp, pc}
 229              		.cfi_endproc
 230              	.LFE3:
 232              		.section	.text.xsvfGotoTapState,"ax",%progbits
 233              		.align	2
 234              		.global	xsvfGotoTapState
 236              	xsvfGotoTapState:
 237              	.LFB4:
 512:../Xilinx_src/micro.c **** 
 513:../Xilinx_src/micro.c **** /*****************************************************************************
 514:../Xilinx_src/micro.c **** * Function:     xsvfGotoTapState
 515:../Xilinx_src/micro.c **** * Description:  From the current TAP state, go to the named TAP state.
 516:../Xilinx_src/micro.c **** *               A target state of RESET ALWAYS causes TMS reset sequence.
 517:../Xilinx_src/micro.c **** *               All SVF standard stable state paths are supported.
 518:../Xilinx_src/micro.c **** *               All state transitions are supported except for the following
 519:../Xilinx_src/micro.c **** *               which cause an XSVF_ERROR_ILLEGALSTATE:
 520:../Xilinx_src/micro.c **** *                   - Target==DREXIT2;  Start!=DRPAUSE
 521:../Xilinx_src/micro.c **** *                   - Target==IREXIT2;  Start!=IRPAUSE
 522:../Xilinx_src/micro.c **** * Parameters:   pucTapState     - Current TAP state; returns final TAP state.
 523:../Xilinx_src/micro.c **** *               ucTargetState   - New target TAP state.
 524:../Xilinx_src/micro.c **** * Returns:      int             - 0 = success; otherwise error.
 525:../Xilinx_src/micro.c **** *****************************************************************************/
 526:../Xilinx_src/micro.c **** int xsvfGotoTapState( unsigned char*   pucTapState,
 527:../Xilinx_src/micro.c ****                       unsigned char    ucTargetState )
 528:../Xilinx_src/micro.c **** {
 238              		.loc 1 528 0
 239              		.cfi_startproc
 240              		@ args = 0, pretend = 0, frame = 16
 241              		@ frame_needed = 1, uses_anonymous_args = 0
 242 0000 00482DE9 		stmfd	sp!, {fp, lr}
 243              	.LCFI8:
 244              		.cfi_def_cfa_offset 8
 245 0004 04B08DE2 		add	fp, sp, #4
 246              		.cfi_offset 14, -4
 247              		.cfi_offset 11, -8
 248              	.LCFI9:
 249              		.cfi_def_cfa 11, 4
 250 0008 10D04DE2 		sub	sp, sp, #16
 251 000c 10000BE5 		str	r0, [fp, #-16]
 252 0010 0130A0E1 		mov	r3, r1
 253 0014 11304BE5 		strb	r3, [fp, #-17]
 529:../Xilinx_src/micro.c ****     int i;
 530:../Xilinx_src/micro.c ****     int iErrorCode;
 531:../Xilinx_src/micro.c **** 
 532:../Xilinx_src/micro.c ****     iErrorCode  = XSVF_ERROR_NONE;
 254              		.loc 1 532 0
 255 0018 0030A0E3 		mov	r3, #0
 256 001c 0C300BE5 		str	r3, [fp, #-12]
 533:../Xilinx_src/micro.c ****     if ( ucTargetState == XTAPSTATE_RESET )
 257              		.loc 1 533 0
 258 0020 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
 259 0024 000053E3 		cmp	r3, #0
 260 0028 1400001A 		bne	.L6
 534:../Xilinx_src/micro.c ****     {
 535:../Xilinx_src/micro.c ****         /* If RESET, always perform TMS reset sequence to reset/sync TAPs */
 536:../Xilinx_src/micro.c ****         xsvfTmsTransition( 1 );
 261              		.loc 1 536 0
 262 002c 0100A0E3 		mov	r0, #1
 263 0030 FEFFFFEB 		bl	xsvfTmsTransition
 537:../Xilinx_src/micro.c ****         for ( i = 0; i < 5; ++i )
 264              		.loc 1 537 0
 265 0034 0030A0E3 		mov	r3, #0
 266 0038 08300BE5 		str	r3, [fp, #-8]
 267 003c 080000EA 		b	.L7
 268              	.L8:
 538:../Xilinx_src/micro.c ****         {
 539:../Xilinx_src/micro.c ****             setPort( TCK, 0 );
 269              		.loc 1 539 0 discriminator 2
 270 0040 0000A0E3 		mov	r0, #0
 271 0044 0010A0E3 		mov	r1, #0
 272 0048 FEFFFFEB 		bl	setPort
 540:../Xilinx_src/micro.c ****             setPort( TCK, 1 );
 273              		.loc 1 540 0 discriminator 2
 274 004c 0000A0E3 		mov	r0, #0
 275 0050 0110A0E3 		mov	r1, #1
 276 0054 FEFFFFEB 		bl	setPort
 537:../Xilinx_src/micro.c ****         for ( i = 0; i < 5; ++i )
 277              		.loc 1 537 0 discriminator 2
 278 0058 08301BE5 		ldr	r3, [fp, #-8]
 279 005c 013083E2 		add	r3, r3, #1
 280 0060 08300BE5 		str	r3, [fp, #-8]
 281              	.L7:
 537:../Xilinx_src/micro.c ****         for ( i = 0; i < 5; ++i )
 282              		.loc 1 537 0 is_stmt 0 discriminator 1
 283 0064 08301BE5 		ldr	r3, [fp, #-8]
 284 0068 040053E3 		cmp	r3, #4
 285 006c F3FFFFDA 		ble	.L8
 541:../Xilinx_src/micro.c ****         }
 542:../Xilinx_src/micro.c ****         *pucTapState    = XTAPSTATE_RESET;
 286              		.loc 1 542 0 is_stmt 1
 287 0070 10301BE5 		ldr	r3, [fp, #-16]
 288 0074 0020A0E3 		mov	r2, #0
 289 0078 0020C3E5 		strb	r2, [r3, #0]
 290 007c 000100EA 		b	.L9
 291              	.L6:
 543:../Xilinx_src/micro.c ****         XSVFDBG_PRINTF( 3, "   TMS Reset Sequence -> Test-Logic-Reset\n" );
 544:../Xilinx_src/micro.c ****         XSVFDBG_PRINTF1( 3, "   TAP State = %s\n",
 545:../Xilinx_src/micro.c ****                          xsvf_pzTapState[ *pucTapState ] );
 546:../Xilinx_src/micro.c ****     }
 547:../Xilinx_src/micro.c ****     else if ( ( ucTargetState != *pucTapState ) &&
 292              		.loc 1 547 0
 293 0080 10301BE5 		ldr	r3, [fp, #-16]
 294 0084 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 295 0088 11205BE5 		ldrb	r2, [fp, #-17]	@ zero_extendqisi2
 296 008c 030052E1 		cmp	r2, r3
 297 0090 1000000A 		beq	.L10
 298              		.loc 1 547 0 is_stmt 0 discriminator 1
 299 0094 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
 300 0098 070053E3 		cmp	r3, #7
 301 009c 0300001A 		bne	.L11
 548:../Xilinx_src/micro.c ****               ( ( ( ucTargetState == XTAPSTATE_EXIT2DR ) && ( *pucTapState != XTAPSTATE_PAUSEDR ) )
 302              		.loc 1 548 0 is_stmt 1
 303 00a0 10301BE5 		ldr	r3, [fp, #-16]
 304 00a4 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 305 00a8 060053E3 		cmp	r3, #6
 306 00ac 0600001A 		bne	.L12
 307              	.L11:
 308              		.loc 1 548 0 is_stmt 0 discriminator 1
 309 00b0 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
 310 00b4 0E0053E3 		cmp	r3, #14
 311 00b8 0600001A 		bne	.L10
 549:../Xilinx_src/micro.c ****                 ( ( ucTargetState == XTAPSTATE_EXIT2IR ) && ( *pucTapState != XTAPSTATE_PAUSEIR ) )
 312              		.loc 1 549 0 is_stmt 1
 313 00bc 10301BE5 		ldr	r3, [fp, #-16]
 314 00c0 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 315 00c4 0D0053E3 		cmp	r3, #13
 316 00c8 0200000A 		beq	.L10
 317              	.L12:
 550:../Xilinx_src/micro.c ****     {
 551:../Xilinx_src/micro.c ****         /* Trap illegal TAP state path specification */
 552:../Xilinx_src/micro.c ****         iErrorCode      = XSVF_ERROR_ILLEGALSTATE;
 318              		.loc 1 552 0
 319 00cc 0530A0E3 		mov	r3, #5
 320 00d0 0C300BE5 		str	r3, [fp, #-12]
 321 00d4 EA0000EA 		b	.L9
 322              	.L10:
 553:../Xilinx_src/micro.c ****     }
 554:../Xilinx_src/micro.c ****     else
 555:../Xilinx_src/micro.c ****     {
 556:../Xilinx_src/micro.c ****         if ( ucTargetState == *pucTapState )
 323              		.loc 1 556 0
 324 00d8 10301BE5 		ldr	r3, [fp, #-16]
 325 00dc 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 326 00e0 11205BE5 		ldrb	r2, [fp, #-17]	@ zero_extendqisi2
 327 00e4 030052E1 		cmp	r2, r3
 328 00e8 DD00001A 		bne	.L53
 557:../Xilinx_src/micro.c ****         {
 558:../Xilinx_src/micro.c ****             /* Already in target state.  Do nothing except when in DRPAUSE
 559:../Xilinx_src/micro.c ****                or in IRPAUSE to comply with SVF standard */
 560:../Xilinx_src/micro.c ****             if ( ucTargetState == XTAPSTATE_PAUSEDR )
 329              		.loc 1 560 0
 330 00ec 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
 331 00f0 060053E3 		cmp	r3, #6
 332 00f4 0500001A 		bne	.L14
 561:../Xilinx_src/micro.c ****             {
 562:../Xilinx_src/micro.c ****                 xsvfTmsTransition( 1 );
 333              		.loc 1 562 0
 334 00f8 0100A0E3 		mov	r0, #1
 335 00fc FEFFFFEB 		bl	xsvfTmsTransition
 563:../Xilinx_src/micro.c ****                 *pucTapState    = XTAPSTATE_EXIT2DR;
 336              		.loc 1 563 0
 337 0100 10301BE5 		ldr	r3, [fp, #-16]
 338 0104 0720A0E3 		mov	r2, #7
 339 0108 0020C3E5 		strb	r2, [r3, #0]
 564:../Xilinx_src/micro.c ****                 XSVFDBG_PRINTF1( 3, "   TAP State = %s\n",
 565:../Xilinx_src/micro.c ****                                  xsvf_pzTapState[ *pucTapState ] );
 566:../Xilinx_src/micro.c ****             }
 567:../Xilinx_src/micro.c ****             else if ( ucTargetState == XTAPSTATE_PAUSEIR )
 568:../Xilinx_src/micro.c ****             {
 569:../Xilinx_src/micro.c ****                 xsvfTmsTransition( 1 );
 570:../Xilinx_src/micro.c ****                 *pucTapState    = XTAPSTATE_EXIT2IR;
 571:../Xilinx_src/micro.c ****                 XSVFDBG_PRINTF1( 3, "   TAP State = %s\n",
 572:../Xilinx_src/micro.c ****                                  xsvf_pzTapState[ *pucTapState ] );
 573:../Xilinx_src/micro.c ****             }
 574:../Xilinx_src/micro.c ****         }
 575:../Xilinx_src/micro.c **** 
 576:../Xilinx_src/micro.c ****         /* Perform TAP state transitions to get to the target state */
 577:../Xilinx_src/micro.c ****         while ( ucTargetState != *pucTapState )
 340              		.loc 1 577 0
 341 010c D70000EA 		b	.L15
 342              	.L14:
 567:../Xilinx_src/micro.c ****             else if ( ucTargetState == XTAPSTATE_PAUSEIR )
 343              		.loc 1 567 0
 344 0110 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
 345 0114 0D0053E3 		cmp	r3, #13
 346 0118 D300001A 		bne	.L54
 569:../Xilinx_src/micro.c ****                 xsvfTmsTransition( 1 );
 347              		.loc 1 569 0
 348 011c 0100A0E3 		mov	r0, #1
 349 0120 FEFFFFEB 		bl	xsvfTmsTransition
 570:../Xilinx_src/micro.c ****                 *pucTapState    = XTAPSTATE_EXIT2IR;
 350              		.loc 1 570 0
 351 0124 10301BE5 		ldr	r3, [fp, #-16]
 352 0128 0E20A0E3 		mov	r2, #14
 353 012c 0020C3E5 		strb	r2, [r3, #0]
 354              		.loc 1 577 0
 355 0130 CE0000EA 		b	.L15
 356              	.L52:
 578:../Xilinx_src/micro.c ****         {
 579:../Xilinx_src/micro.c ****             switch ( *pucTapState )
 357              		.loc 1 579 0
 358 0134 10301BE5 		ldr	r3, [fp, #-16]
 359 0138 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 360 013c 0F0053E3 		cmp	r3, #15
 361 0140 03F19F97 		ldrls	pc, [pc, r3, asl #2]
 362 0144 C00000EA 		b	.L16
 363              	.L33:
 364 0148 88010000 		.word	.L17
 365 014c A0010000 		.word	.L18
 366 0150 B8010000 		.word	.L19
 367 0154 F4010000 		.word	.L20
 368 0158 30020000 		.word	.L21
 369 015c 48020000 		.word	.L22
 370 0160 84020000 		.word	.L23
 371 0164 9C020000 		.word	.L24
 372 0168 D8020000 		.word	.L25
 373 016c 14030000 		.word	.L26
 374 0170 2C030000 		.word	.L27
 375 0174 68030000 		.word	.L28
 376 0178 80030000 		.word	.L29
 377 017c BC030000 		.word	.L30
 378 0180 D4030000 		.word	.L31
 379 0184 10040000 		.word	.L32
 380              	.L17:
 580:../Xilinx_src/micro.c ****             {
 581:../Xilinx_src/micro.c ****             case XTAPSTATE_RESET:
 582:../Xilinx_src/micro.c ****                 xsvfTmsTransition( 0 );
 381              		.loc 1 582 0
 382 0188 0000A0E3 		mov	r0, #0
 383 018c FEFFFFEB 		bl	xsvfTmsTransition
 583:../Xilinx_src/micro.c ****                 *pucTapState    = XTAPSTATE_RUNTEST;
 384              		.loc 1 583 0
 385 0190 10301BE5 		ldr	r3, [fp, #-16]
 386 0194 0120A0E3 		mov	r2, #1
 387 0198 0020C3E5 		strb	r2, [r3, #0]
 584:../Xilinx_src/micro.c ****                 break;
 388              		.loc 1 584 0
 389 019c B30000EA 		b	.L15
 390              	.L18:
 585:../Xilinx_src/micro.c ****             case XTAPSTATE_RUNTEST:
 586:../Xilinx_src/micro.c ****                 xsvfTmsTransition( 1 );
 391              		.loc 1 586 0
 392 01a0 0100A0E3 		mov	r0, #1
 393 01a4 FEFFFFEB 		bl	xsvfTmsTransition
 587:../Xilinx_src/micro.c ****                 *pucTapState    = XTAPSTATE_SELECTDR;
 394              		.loc 1 587 0
 395 01a8 10301BE5 		ldr	r3, [fp, #-16]
 396 01ac 0220A0E3 		mov	r2, #2
 397 01b0 0020C3E5 		strb	r2, [r3, #0]
 588:../Xilinx_src/micro.c ****                 break;
 398              		.loc 1 588 0
 399 01b4 AD0000EA 		b	.L15
 400              	.L19:
 589:../Xilinx_src/micro.c ****             case XTAPSTATE_SELECTDR:
 590:../Xilinx_src/micro.c ****                 if ( ucTargetState >= XTAPSTATE_IRSTATES )
 401              		.loc 1 590 0
 402 01b8 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
 403 01bc 080053E3 		cmp	r3, #8
 404 01c0 0500009A 		bls	.L34
 591:../Xilinx_src/micro.c ****                 {
 592:../Xilinx_src/micro.c ****                     xsvfTmsTransition( 1 );
 405              		.loc 1 592 0
 406 01c4 0100A0E3 		mov	r0, #1
 407 01c8 FEFFFFEB 		bl	xsvfTmsTransition
 593:../Xilinx_src/micro.c ****                     *pucTapState    = XTAPSTATE_SELECTIR;
 408              		.loc 1 593 0
 409 01cc 10301BE5 		ldr	r3, [fp, #-16]
 410 01d0 0920A0E3 		mov	r2, #9
 411 01d4 0020C3E5 		strb	r2, [r3, #0]
 594:../Xilinx_src/micro.c ****                 }
 595:../Xilinx_src/micro.c ****                 else
 596:../Xilinx_src/micro.c ****                 {
 597:../Xilinx_src/micro.c ****                     xsvfTmsTransition( 0 );
 598:../Xilinx_src/micro.c ****                     *pucTapState    = XTAPSTATE_CAPTUREDR;
 599:../Xilinx_src/micro.c ****                 }
 600:../Xilinx_src/micro.c ****                 break;
 412              		.loc 1 600 0
 413 01d8 A40000EA 		b	.L15
 414              	.L34:
 597:../Xilinx_src/micro.c ****                     xsvfTmsTransition( 0 );
 415              		.loc 1 597 0
 416 01dc 0000A0E3 		mov	r0, #0
 417 01e0 FEFFFFEB 		bl	xsvfTmsTransition
 598:../Xilinx_src/micro.c ****                     *pucTapState    = XTAPSTATE_CAPTUREDR;
 418              		.loc 1 598 0
 419 01e4 10301BE5 		ldr	r3, [fp, #-16]
 420 01e8 0320A0E3 		mov	r2, #3
 421 01ec 0020C3E5 		strb	r2, [r3, #0]
 422              		.loc 1 600 0
 423 01f0 9E0000EA 		b	.L15
 424              	.L20:
 601:../Xilinx_src/micro.c ****             case XTAPSTATE_CAPTUREDR:
 602:../Xilinx_src/micro.c ****                 if ( ucTargetState == XTAPSTATE_SHIFTDR )
 425              		.loc 1 602 0
 426 01f4 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
 427 01f8 040053E3 		cmp	r3, #4
 428 01fc 0500001A 		bne	.L36
 603:../Xilinx_src/micro.c ****                 {
 604:../Xilinx_src/micro.c ****                     xsvfTmsTransition( 0 );
 429              		.loc 1 604 0
 430 0200 0000A0E3 		mov	r0, #0
 431 0204 FEFFFFEB 		bl	xsvfTmsTransition
 605:../Xilinx_src/micro.c ****                     *pucTapState    = XTAPSTATE_SHIFTDR;
 432              		.loc 1 605 0
 433 0208 10301BE5 		ldr	r3, [fp, #-16]
 434 020c 0420A0E3 		mov	r2, #4
 435 0210 0020C3E5 		strb	r2, [r3, #0]
 606:../Xilinx_src/micro.c ****                 }
 607:../Xilinx_src/micro.c ****                 else
 608:../Xilinx_src/micro.c ****                 {
 609:../Xilinx_src/micro.c ****                     xsvfTmsTransition( 1 );
 610:../Xilinx_src/micro.c ****                     *pucTapState    = XTAPSTATE_EXIT1DR;
 611:../Xilinx_src/micro.c ****                 }
 612:../Xilinx_src/micro.c ****                 break;
 436              		.loc 1 612 0
 437 0214 950000EA 		b	.L15
 438              	.L36:
 609:../Xilinx_src/micro.c ****                     xsvfTmsTransition( 1 );
 439              		.loc 1 609 0
 440 0218 0100A0E3 		mov	r0, #1
 441 021c FEFFFFEB 		bl	xsvfTmsTransition
 610:../Xilinx_src/micro.c ****                     *pucTapState    = XTAPSTATE_EXIT1DR;
 442              		.loc 1 610 0
 443 0220 10301BE5 		ldr	r3, [fp, #-16]
 444 0224 0520A0E3 		mov	r2, #5
 445 0228 0020C3E5 		strb	r2, [r3, #0]
 446              		.loc 1 612 0
 447 022c 8F0000EA 		b	.L15
 448              	.L21:
 613:../Xilinx_src/micro.c ****             case XTAPSTATE_SHIFTDR:
 614:../Xilinx_src/micro.c ****                 xsvfTmsTransition( 1 );
 449              		.loc 1 614 0
 450 0230 0100A0E3 		mov	r0, #1
 451 0234 FEFFFFEB 		bl	xsvfTmsTransition
 615:../Xilinx_src/micro.c ****                 *pucTapState    = XTAPSTATE_EXIT1DR;
 452              		.loc 1 615 0
 453 0238 10301BE5 		ldr	r3, [fp, #-16]
 454 023c 0520A0E3 		mov	r2, #5
 455 0240 0020C3E5 		strb	r2, [r3, #0]
 616:../Xilinx_src/micro.c ****                 break;
 456              		.loc 1 616 0
 457 0244 890000EA 		b	.L15
 458              	.L22:
 617:../Xilinx_src/micro.c ****             case XTAPSTATE_EXIT1DR:
 618:../Xilinx_src/micro.c ****                 if ( ucTargetState == XTAPSTATE_PAUSEDR )
 459              		.loc 1 618 0
 460 0248 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
 461 024c 060053E3 		cmp	r3, #6
 462 0250 0500001A 		bne	.L38
 619:../Xilinx_src/micro.c ****                 {
 620:../Xilinx_src/micro.c ****                     xsvfTmsTransition( 0 );
 463              		.loc 1 620 0
 464 0254 0000A0E3 		mov	r0, #0
 465 0258 FEFFFFEB 		bl	xsvfTmsTransition
 621:../Xilinx_src/micro.c ****                     *pucTapState    = XTAPSTATE_PAUSEDR;
 466              		.loc 1 621 0
 467 025c 10301BE5 		ldr	r3, [fp, #-16]
 468 0260 0620A0E3 		mov	r2, #6
 469 0264 0020C3E5 		strb	r2, [r3, #0]
 622:../Xilinx_src/micro.c ****                 }
 623:../Xilinx_src/micro.c ****                 else
 624:../Xilinx_src/micro.c ****                 {
 625:../Xilinx_src/micro.c ****                     xsvfTmsTransition( 1 );
 626:../Xilinx_src/micro.c ****                     *pucTapState    = XTAPSTATE_UPDATEDR;
 627:../Xilinx_src/micro.c ****                 }
 628:../Xilinx_src/micro.c ****                 break;
 470              		.loc 1 628 0
 471 0268 800000EA 		b	.L15
 472              	.L38:
 625:../Xilinx_src/micro.c ****                     xsvfTmsTransition( 1 );
 473              		.loc 1 625 0
 474 026c 0100A0E3 		mov	r0, #1
 475 0270 FEFFFFEB 		bl	xsvfTmsTransition
 626:../Xilinx_src/micro.c ****                     *pucTapState    = XTAPSTATE_UPDATEDR;
 476              		.loc 1 626 0
 477 0274 10301BE5 		ldr	r3, [fp, #-16]
 478 0278 0820A0E3 		mov	r2, #8
 479 027c 0020C3E5 		strb	r2, [r3, #0]
 480              		.loc 1 628 0
 481 0280 7A0000EA 		b	.L15
 482              	.L23:
 629:../Xilinx_src/micro.c ****             case XTAPSTATE_PAUSEDR:
 630:../Xilinx_src/micro.c ****                 xsvfTmsTransition( 1 );
 483              		.loc 1 630 0
 484 0284 0100A0E3 		mov	r0, #1
 485 0288 FEFFFFEB 		bl	xsvfTmsTransition
 631:../Xilinx_src/micro.c ****                 *pucTapState    = XTAPSTATE_EXIT2DR;
 486              		.loc 1 631 0
 487 028c 10301BE5 		ldr	r3, [fp, #-16]
 488 0290 0720A0E3 		mov	r2, #7
 489 0294 0020C3E5 		strb	r2, [r3, #0]
 632:../Xilinx_src/micro.c ****                 break;
 490              		.loc 1 632 0
 491 0298 740000EA 		b	.L15
 492              	.L24:
 633:../Xilinx_src/micro.c ****             case XTAPSTATE_EXIT2DR:
 634:../Xilinx_src/micro.c ****                 if ( ucTargetState == XTAPSTATE_SHIFTDR )
 493              		.loc 1 634 0
 494 029c 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
 495 02a0 040053E3 		cmp	r3, #4
 496 02a4 0500001A 		bne	.L40
 635:../Xilinx_src/micro.c ****                 {
 636:../Xilinx_src/micro.c ****                     xsvfTmsTransition( 0 );
 497              		.loc 1 636 0
 498 02a8 0000A0E3 		mov	r0, #0
 499 02ac FEFFFFEB 		bl	xsvfTmsTransition
 637:../Xilinx_src/micro.c ****                     *pucTapState    = XTAPSTATE_SHIFTDR;
 500              		.loc 1 637 0
 501 02b0 10301BE5 		ldr	r3, [fp, #-16]
 502 02b4 0420A0E3 		mov	r2, #4
 503 02b8 0020C3E5 		strb	r2, [r3, #0]
 638:../Xilinx_src/micro.c ****                 }
 639:../Xilinx_src/micro.c ****                 else
 640:../Xilinx_src/micro.c ****                 {
 641:../Xilinx_src/micro.c ****                     xsvfTmsTransition( 1 );
 642:../Xilinx_src/micro.c ****                     *pucTapState    = XTAPSTATE_UPDATEDR;
 643:../Xilinx_src/micro.c ****                 }
 644:../Xilinx_src/micro.c ****                 break;
 504              		.loc 1 644 0
 505 02bc 6B0000EA 		b	.L15
 506              	.L40:
 641:../Xilinx_src/micro.c ****                     xsvfTmsTransition( 1 );
 507              		.loc 1 641 0
 508 02c0 0100A0E3 		mov	r0, #1
 509 02c4 FEFFFFEB 		bl	xsvfTmsTransition
 642:../Xilinx_src/micro.c ****                     *pucTapState    = XTAPSTATE_UPDATEDR;
 510              		.loc 1 642 0
 511 02c8 10301BE5 		ldr	r3, [fp, #-16]
 512 02cc 0820A0E3 		mov	r2, #8
 513 02d0 0020C3E5 		strb	r2, [r3, #0]
 514              		.loc 1 644 0
 515 02d4 650000EA 		b	.L15
 516              	.L25:
 645:../Xilinx_src/micro.c ****             case XTAPSTATE_UPDATEDR:
 646:../Xilinx_src/micro.c ****                 if ( ucTargetState == XTAPSTATE_RUNTEST )
 517              		.loc 1 646 0
 518 02d8 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
 519 02dc 010053E3 		cmp	r3, #1
 520 02e0 0500001A 		bne	.L42
 647:../Xilinx_src/micro.c ****                 {
 648:../Xilinx_src/micro.c ****                     xsvfTmsTransition( 0 );
 521              		.loc 1 648 0
 522 02e4 0000A0E3 		mov	r0, #0
 523 02e8 FEFFFFEB 		bl	xsvfTmsTransition
 649:../Xilinx_src/micro.c ****                     *pucTapState    = XTAPSTATE_RUNTEST;
 524              		.loc 1 649 0
 525 02ec 10301BE5 		ldr	r3, [fp, #-16]
 526 02f0 0120A0E3 		mov	r2, #1
 527 02f4 0020C3E5 		strb	r2, [r3, #0]
 650:../Xilinx_src/micro.c ****                 }
 651:../Xilinx_src/micro.c ****                 else
 652:../Xilinx_src/micro.c ****                 {
 653:../Xilinx_src/micro.c ****                     xsvfTmsTransition( 1 );
 654:../Xilinx_src/micro.c ****                     *pucTapState    = XTAPSTATE_SELECTDR;
 655:../Xilinx_src/micro.c ****                 }
 656:../Xilinx_src/micro.c ****                 break;
 528              		.loc 1 656 0
 529 02f8 5C0000EA 		b	.L15
 530              	.L42:
 653:../Xilinx_src/micro.c ****                     xsvfTmsTransition( 1 );
 531              		.loc 1 653 0
 532 02fc 0100A0E3 		mov	r0, #1
 533 0300 FEFFFFEB 		bl	xsvfTmsTransition
 654:../Xilinx_src/micro.c ****                     *pucTapState    = XTAPSTATE_SELECTDR;
 534              		.loc 1 654 0
 535 0304 10301BE5 		ldr	r3, [fp, #-16]
 536 0308 0220A0E3 		mov	r2, #2
 537 030c 0020C3E5 		strb	r2, [r3, #0]
 538              		.loc 1 656 0
 539 0310 560000EA 		b	.L15
 540              	.L26:
 657:../Xilinx_src/micro.c ****             case XTAPSTATE_SELECTIR:
 658:../Xilinx_src/micro.c ****                 xsvfTmsTransition( 0 );
 541              		.loc 1 658 0
 542 0314 0000A0E3 		mov	r0, #0
 543 0318 FEFFFFEB 		bl	xsvfTmsTransition
 659:../Xilinx_src/micro.c ****                 *pucTapState    = XTAPSTATE_CAPTUREIR;
 544              		.loc 1 659 0
 545 031c 10301BE5 		ldr	r3, [fp, #-16]
 546 0320 0A20A0E3 		mov	r2, #10
 547 0324 0020C3E5 		strb	r2, [r3, #0]
 660:../Xilinx_src/micro.c ****                 break;
 548              		.loc 1 660 0
 549 0328 500000EA 		b	.L15
 550              	.L27:
 661:../Xilinx_src/micro.c ****             case XTAPSTATE_CAPTUREIR:
 662:../Xilinx_src/micro.c ****                 if ( ucTargetState == XTAPSTATE_SHIFTIR )
 551              		.loc 1 662 0
 552 032c 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
 553 0330 0B0053E3 		cmp	r3, #11
 554 0334 0500001A 		bne	.L44
 663:../Xilinx_src/micro.c ****                 {
 664:../Xilinx_src/micro.c ****                     xsvfTmsTransition( 0 );
 555              		.loc 1 664 0
 556 0338 0000A0E3 		mov	r0, #0
 557 033c FEFFFFEB 		bl	xsvfTmsTransition
 665:../Xilinx_src/micro.c ****                     *pucTapState    = XTAPSTATE_SHIFTIR;
 558              		.loc 1 665 0
 559 0340 10301BE5 		ldr	r3, [fp, #-16]
 560 0344 0B20A0E3 		mov	r2, #11
 561 0348 0020C3E5 		strb	r2, [r3, #0]
 666:../Xilinx_src/micro.c ****                 }
 667:../Xilinx_src/micro.c ****                 else
 668:../Xilinx_src/micro.c ****                 {
 669:../Xilinx_src/micro.c ****                     xsvfTmsTransition( 1 );
 670:../Xilinx_src/micro.c ****                     *pucTapState    = XTAPSTATE_EXIT1IR;
 671:../Xilinx_src/micro.c ****                 }
 672:../Xilinx_src/micro.c ****                 break;
 562              		.loc 1 672 0
 563 034c 470000EA 		b	.L15
 564              	.L44:
 669:../Xilinx_src/micro.c ****                     xsvfTmsTransition( 1 );
 565              		.loc 1 669 0
 566 0350 0100A0E3 		mov	r0, #1
 567 0354 FEFFFFEB 		bl	xsvfTmsTransition
 670:../Xilinx_src/micro.c ****                     *pucTapState    = XTAPSTATE_EXIT1IR;
 568              		.loc 1 670 0
 569 0358 10301BE5 		ldr	r3, [fp, #-16]
 570 035c 0C20A0E3 		mov	r2, #12
 571 0360 0020C3E5 		strb	r2, [r3, #0]
 572              		.loc 1 672 0
 573 0364 410000EA 		b	.L15
 574              	.L28:
 673:../Xilinx_src/micro.c ****             case XTAPSTATE_SHIFTIR:
 674:../Xilinx_src/micro.c ****                 xsvfTmsTransition( 1 );
 575              		.loc 1 674 0
 576 0368 0100A0E3 		mov	r0, #1
 577 036c FEFFFFEB 		bl	xsvfTmsTransition
 675:../Xilinx_src/micro.c ****                 *pucTapState    = XTAPSTATE_EXIT1IR;
 578              		.loc 1 675 0
 579 0370 10301BE5 		ldr	r3, [fp, #-16]
 580 0374 0C20A0E3 		mov	r2, #12
 581 0378 0020C3E5 		strb	r2, [r3, #0]
 676:../Xilinx_src/micro.c ****                 break;
 582              		.loc 1 676 0
 583 037c 3B0000EA 		b	.L15
 584              	.L29:
 677:../Xilinx_src/micro.c ****             case XTAPSTATE_EXIT1IR:
 678:../Xilinx_src/micro.c ****                 if ( ucTargetState == XTAPSTATE_PAUSEIR )
 585              		.loc 1 678 0
 586 0380 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
 587 0384 0D0053E3 		cmp	r3, #13
 588 0388 0500001A 		bne	.L46
 679:../Xilinx_src/micro.c ****                 {
 680:../Xilinx_src/micro.c ****                     xsvfTmsTransition( 0 );
 589              		.loc 1 680 0
 590 038c 0000A0E3 		mov	r0, #0
 591 0390 FEFFFFEB 		bl	xsvfTmsTransition
 681:../Xilinx_src/micro.c ****                     *pucTapState    = XTAPSTATE_PAUSEIR;
 592              		.loc 1 681 0
 593 0394 10301BE5 		ldr	r3, [fp, #-16]
 594 0398 0D20A0E3 		mov	r2, #13
 595 039c 0020C3E5 		strb	r2, [r3, #0]
 682:../Xilinx_src/micro.c ****                 }
 683:../Xilinx_src/micro.c ****                 else
 684:../Xilinx_src/micro.c ****                 {
 685:../Xilinx_src/micro.c ****                     xsvfTmsTransition( 1 );
 686:../Xilinx_src/micro.c ****                     *pucTapState    = XTAPSTATE_UPDATEIR;
 687:../Xilinx_src/micro.c ****                 }
 688:../Xilinx_src/micro.c ****                 break;
 596              		.loc 1 688 0
 597 03a0 320000EA 		b	.L15
 598              	.L46:
 685:../Xilinx_src/micro.c ****                     xsvfTmsTransition( 1 );
 599              		.loc 1 685 0
 600 03a4 0100A0E3 		mov	r0, #1
 601 03a8 FEFFFFEB 		bl	xsvfTmsTransition
 686:../Xilinx_src/micro.c ****                     *pucTapState    = XTAPSTATE_UPDATEIR;
 602              		.loc 1 686 0
 603 03ac 10301BE5 		ldr	r3, [fp, #-16]
 604 03b0 0F20A0E3 		mov	r2, #15
 605 03b4 0020C3E5 		strb	r2, [r3, #0]
 606              		.loc 1 688 0
 607 03b8 2C0000EA 		b	.L15
 608              	.L30:
 689:../Xilinx_src/micro.c ****             case XTAPSTATE_PAUSEIR:
 690:../Xilinx_src/micro.c ****                 xsvfTmsTransition( 1 );
 609              		.loc 1 690 0
 610 03bc 0100A0E3 		mov	r0, #1
 611 03c0 FEFFFFEB 		bl	xsvfTmsTransition
 691:../Xilinx_src/micro.c ****                 *pucTapState    = XTAPSTATE_EXIT2IR;
 612              		.loc 1 691 0
 613 03c4 10301BE5 		ldr	r3, [fp, #-16]
 614 03c8 0E20A0E3 		mov	r2, #14
 615 03cc 0020C3E5 		strb	r2, [r3, #0]
 692:../Xilinx_src/micro.c ****                 break;
 616              		.loc 1 692 0
 617 03d0 260000EA 		b	.L15
 618              	.L31:
 693:../Xilinx_src/micro.c ****             case XTAPSTATE_EXIT2IR:
 694:../Xilinx_src/micro.c ****                 if ( ucTargetState == XTAPSTATE_SHIFTIR )
 619              		.loc 1 694 0
 620 03d4 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
 621 03d8 0B0053E3 		cmp	r3, #11
 622 03dc 0500001A 		bne	.L48
 695:../Xilinx_src/micro.c ****                 {
 696:../Xilinx_src/micro.c ****                     xsvfTmsTransition( 0 );
 623              		.loc 1 696 0
 624 03e0 0000A0E3 		mov	r0, #0
 625 03e4 FEFFFFEB 		bl	xsvfTmsTransition
 697:../Xilinx_src/micro.c ****                     *pucTapState    = XTAPSTATE_SHIFTIR;
 626              		.loc 1 697 0
 627 03e8 10301BE5 		ldr	r3, [fp, #-16]
 628 03ec 0B20A0E3 		mov	r2, #11
 629 03f0 0020C3E5 		strb	r2, [r3, #0]
 698:../Xilinx_src/micro.c ****                 }
 699:../Xilinx_src/micro.c ****                 else
 700:../Xilinx_src/micro.c ****                 {
 701:../Xilinx_src/micro.c ****                     xsvfTmsTransition( 1 );
 702:../Xilinx_src/micro.c ****                     *pucTapState    = XTAPSTATE_UPDATEIR;
 703:../Xilinx_src/micro.c ****                 }
 704:../Xilinx_src/micro.c ****                 break;
 630              		.loc 1 704 0
 631 03f4 1D0000EA 		b	.L15
 632              	.L48:
 701:../Xilinx_src/micro.c ****                     xsvfTmsTransition( 1 );
 633              		.loc 1 701 0
 634 03f8 0100A0E3 		mov	r0, #1
 635 03fc FEFFFFEB 		bl	xsvfTmsTransition
 702:../Xilinx_src/micro.c ****                     *pucTapState    = XTAPSTATE_UPDATEIR;
 636              		.loc 1 702 0
 637 0400 10301BE5 		ldr	r3, [fp, #-16]
 638 0404 0F20A0E3 		mov	r2, #15
 639 0408 0020C3E5 		strb	r2, [r3, #0]
 640              		.loc 1 704 0
 641 040c 170000EA 		b	.L15
 642              	.L32:
 705:../Xilinx_src/micro.c ****             case XTAPSTATE_UPDATEIR:
 706:../Xilinx_src/micro.c ****                 if ( ucTargetState == XTAPSTATE_RUNTEST )
 643              		.loc 1 706 0
 644 0410 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
 645 0414 010053E3 		cmp	r3, #1
 646 0418 0500001A 		bne	.L50
 707:../Xilinx_src/micro.c ****                 {
 708:../Xilinx_src/micro.c ****                     xsvfTmsTransition( 0 );
 647              		.loc 1 708 0
 648 041c 0000A0E3 		mov	r0, #0
 649 0420 FEFFFFEB 		bl	xsvfTmsTransition
 709:../Xilinx_src/micro.c ****                     *pucTapState    = XTAPSTATE_RUNTEST;
 650              		.loc 1 709 0
 651 0424 10301BE5 		ldr	r3, [fp, #-16]
 652 0428 0120A0E3 		mov	r2, #1
 653 042c 0020C3E5 		strb	r2, [r3, #0]
 710:../Xilinx_src/micro.c ****                 }
 711:../Xilinx_src/micro.c ****                 else
 712:../Xilinx_src/micro.c ****                 {
 713:../Xilinx_src/micro.c ****                     xsvfTmsTransition( 1 );
 714:../Xilinx_src/micro.c ****                     *pucTapState    = XTAPSTATE_SELECTDR;
 715:../Xilinx_src/micro.c ****                 }
 716:../Xilinx_src/micro.c ****                 break;
 654              		.loc 1 716 0
 655 0430 0E0000EA 		b	.L15
 656              	.L50:
 713:../Xilinx_src/micro.c ****                     xsvfTmsTransition( 1 );
 657              		.loc 1 713 0
 658 0434 0100A0E3 		mov	r0, #1
 659 0438 FEFFFFEB 		bl	xsvfTmsTransition
 714:../Xilinx_src/micro.c ****                     *pucTapState    = XTAPSTATE_SELECTDR;
 660              		.loc 1 714 0
 661 043c 10301BE5 		ldr	r3, [fp, #-16]
 662 0440 0220A0E3 		mov	r2, #2
 663 0444 0020C3E5 		strb	r2, [r3, #0]
 664              		.loc 1 716 0
 665 0448 080000EA 		b	.L15
 666              	.L16:
 717:../Xilinx_src/micro.c ****             default:
 718:../Xilinx_src/micro.c ****                 iErrorCode      = XSVF_ERROR_ILLEGALSTATE;
 667              		.loc 1 718 0
 668 044c 0530A0E3 		mov	r3, #5
 669 0450 0C300BE5 		str	r3, [fp, #-12]
 719:../Xilinx_src/micro.c ****                 *pucTapState    = ucTargetState;    /* Exit while loop */
 670              		.loc 1 719 0
 671 0454 10301BE5 		ldr	r3, [fp, #-16]
 672 0458 11205BE5 		ldrb	r2, [fp, #-17]
 673 045c 0020C3E5 		strb	r2, [r3, #0]
 720:../Xilinx_src/micro.c ****                 break;
 674              		.loc 1 720 0
 675 0460 020000EA 		b	.L15
 676              	.L53:
 577:../Xilinx_src/micro.c ****         while ( ucTargetState != *pucTapState )
 677              		.loc 1 577 0
 678 0464 0000A0E1 		mov	r0, r0	@ nop
 679 0468 000000EA 		b	.L15
 680              	.L54:
 681 046c 0000A0E1 		mov	r0, r0	@ nop
 682              	.L15:
 577:../Xilinx_src/micro.c ****         while ( ucTargetState != *pucTapState )
 683              		.loc 1 577 0 is_stmt 0 discriminator 1
 684 0470 10301BE5 		ldr	r3, [fp, #-16]
 685 0474 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 686 0478 11205BE5 		ldrb	r2, [fp, #-17]	@ zero_extendqisi2
 687 047c 030052E1 		cmp	r2, r3
 688 0480 2BFFFF1A 		bne	.L52
 689              	.L9:
 721:../Xilinx_src/micro.c ****             }
 722:../Xilinx_src/micro.c ****             XSVFDBG_PRINTF1( 3, "   TAP State = %s\n",
 723:../Xilinx_src/micro.c ****                              xsvf_pzTapState[ *pucTapState ] );
 724:../Xilinx_src/micro.c ****         }
 725:../Xilinx_src/micro.c ****     }
 726:../Xilinx_src/micro.c **** 
 727:../Xilinx_src/micro.c ****     return( iErrorCode );
 690              		.loc 1 727 0 is_stmt 1
 691 0484 0C301BE5 		ldr	r3, [fp, #-12]
 728:../Xilinx_src/micro.c **** }
 692              		.loc 1 728 0
 693 0488 0300A0E1 		mov	r0, r3
 694 048c 04D04BE2 		sub	sp, fp, #4
 695 0490 0088BDE8 		ldmfd	sp!, {fp, pc}
 696              		.cfi_endproc
 697              	.LFE4:
 699              		.section	.text.xsvfShiftOnly,"ax",%progbits
 700              		.align	2
 701              		.global	xsvfShiftOnly
 703              	xsvfShiftOnly:
 704              	.LFB5:
 729:../Xilinx_src/micro.c **** 
 730:../Xilinx_src/micro.c **** /*****************************************************************************
 731:../Xilinx_src/micro.c **** * Function:     xsvfShiftOnly
 732:../Xilinx_src/micro.c **** * Description:  Assumes that starting TAP state is SHIFT-DR or SHIFT-IR.
 733:../Xilinx_src/micro.c **** *               Shift the given TDI data into the JTAG scan chain.
 734:../Xilinx_src/micro.c **** *               Optionally, save the TDO data shifted out of the scan chain.
 735:../Xilinx_src/micro.c **** *               Last shift cycle is special:  capture last TDO, set last TDI,
 736:../Xilinx_src/micro.c **** *               but does not pulse TCK.  Caller must pulse TCK and optionally
 737:../Xilinx_src/micro.c **** *               set TMS=1 to exit shift state.
 738:../Xilinx_src/micro.c **** * Parameters:   lNumBits        - number of bits to shift.
 739:../Xilinx_src/micro.c **** *               plvTdi          - ptr to lenval for TDI data.
 740:../Xilinx_src/micro.c **** *               plvTdoCaptured  - ptr to lenval for storing captured TDO data.
 741:../Xilinx_src/micro.c **** *               iExitShift      - 1=exit at end of shift; 0=stay in Shift-DR.
 742:../Xilinx_src/micro.c **** * Returns:      void.
 743:../Xilinx_src/micro.c **** *****************************************************************************/
 744:../Xilinx_src/micro.c **** void xsvfShiftOnly( long    lNumBits,
 745:../Xilinx_src/micro.c ****                     lenVal* plvTdi,
 746:../Xilinx_src/micro.c ****                     lenVal* plvTdoCaptured,
 747:../Xilinx_src/micro.c ****                     int     iExitShift )
 748:../Xilinx_src/micro.c **** {
 705              		.loc 1 748 0
 706              		.cfi_startproc
 707              		@ args = 0, pretend = 0, frame = 40
 708              		@ frame_needed = 1, uses_anonymous_args = 0
 709 0000 00482DE9 		stmfd	sp!, {fp, lr}
 710              	.LCFI10:
 711              		.cfi_def_cfa_offset 8
 712 0004 04B08DE2 		add	fp, sp, #4
 713              		.cfi_offset 14, -4
 714              		.cfi_offset 11, -8
 715              	.LCFI11:
 716              		.cfi_def_cfa 11, 4
 717 0008 28D04DE2 		sub	sp, sp, #40
 718 000c 20000BE5 		str	r0, [fp, #-32]
 719 0010 24100BE5 		str	r1, [fp, #-36]
 720 0014 28200BE5 		str	r2, [fp, #-40]
 721 0018 2C300BE5 		str	r3, [fp, #-44]
 749:../Xilinx_src/micro.c ****     unsigned char*  pucTdi;
 750:../Xilinx_src/micro.c ****     unsigned char*  pucTdo;
 751:../Xilinx_src/micro.c ****     unsigned char   ucTdiByte;
 752:../Xilinx_src/micro.c ****     unsigned char   ucTdoByte;
 753:../Xilinx_src/micro.c ****     unsigned char   ucTdoBit;
 754:../Xilinx_src/micro.c ****     int             i;
 755:../Xilinx_src/micro.c **** 
 756:../Xilinx_src/micro.c ****     /* assert( ( ( lNumBits + 7 ) / 8 ) == plvTdi->len ); */
 757:../Xilinx_src/micro.c **** 
 758:../Xilinx_src/micro.c ****     /* Initialize TDO storage len == TDI len */
 759:../Xilinx_src/micro.c ****     pucTdo  = 0;
 722              		.loc 1 759 0
 723 001c 0030A0E3 		mov	r3, #0
 724 0020 0C300BE5 		str	r3, [fp, #-12]
 760:../Xilinx_src/micro.c ****     if ( plvTdoCaptured )
 725              		.loc 1 760 0
 726 0024 28301BE5 		ldr	r3, [fp, #-40]
 727 0028 000053E3 		cmp	r3, #0
 728 002c 0B00000A 		beq	.L56
 761:../Xilinx_src/micro.c ****     {
 762:../Xilinx_src/micro.c ****         plvTdoCaptured->len = plvTdi->len;
 729              		.loc 1 762 0
 730 0030 24301BE5 		ldr	r3, [fp, #-36]
 731 0034 B020D3E1 		ldrh	r2, [r3, #0]
 732 0038 28301BE5 		ldr	r3, [fp, #-40]
 733 003c B020C3E1 		strh	r2, [r3, #0]	@ movhi
 763:../Xilinx_src/micro.c ****         pucTdo              = plvTdoCaptured->val + plvTdi->len;
 734              		.loc 1 763 0
 735 0040 28301BE5 		ldr	r3, [fp, #-40]
 736 0044 022083E2 		add	r2, r3, #2
 737 0048 24301BE5 		ldr	r3, [fp, #-36]
 738 004c B030D3E1 		ldrh	r3, [r3, #0]
 739 0050 0338A0E1 		mov	r3, r3, asl #16
 740 0054 4338A0E1 		mov	r3, r3, asr #16
 741 0058 033082E0 		add	r3, r2, r3
 742 005c 0C300BE5 		str	r3, [fp, #-12]
 743              	.L56:
 764:../Xilinx_src/micro.c ****     }
 765:../Xilinx_src/micro.c **** 
 766:../Xilinx_src/micro.c ****     /* Shift LSB first.  val[N-1] == LSB.  val[0] == MSB. */
 767:../Xilinx_src/micro.c ****     pucTdi  = plvTdi->val + plvTdi->len;
 744              		.loc 1 767 0
 745 0060 24301BE5 		ldr	r3, [fp, #-36]
 746 0064 022083E2 		add	r2, r3, #2
 747 0068 24301BE5 		ldr	r3, [fp, #-36]
 748 006c B030D3E1 		ldrh	r3, [r3, #0]
 749 0070 0338A0E1 		mov	r3, r3, asl #16
 750 0074 4338A0E1 		mov	r3, r3, asr #16
 751 0078 033082E0 		add	r3, r2, r3
 752 007c 08300BE5 		str	r3, [fp, #-8]
 768:../Xilinx_src/micro.c ****     while ( lNumBits )
 753              		.loc 1 768 0
 754 0080 4A0000EA 		b	.L57
 755              	.L63:
 769:../Xilinx_src/micro.c ****     {
 770:../Xilinx_src/micro.c ****         /* Process on a byte-basis */
 771:../Xilinx_src/micro.c ****         ucTdiByte   = (*(--pucTdi));
 756              		.loc 1 771 0
 757 0084 08301BE5 		ldr	r3, [fp, #-8]
 758 0088 013043E2 		sub	r3, r3, #1
 759 008c 08300BE5 		str	r3, [fp, #-8]
 760 0090 08301BE5 		ldr	r3, [fp, #-8]
 761 0094 0030D3E5 		ldrb	r3, [r3, #0]
 762 0098 0D304BE5 		strb	r3, [fp, #-13]
 772:../Xilinx_src/micro.c ****         ucTdoByte   = 0;
 763              		.loc 1 772 0
 764 009c 0030A0E3 		mov	r3, #0
 765 00a0 0E304BE5 		strb	r3, [fp, #-14]
 773:../Xilinx_src/micro.c ****         for ( i = 0; ( lNumBits && ( i < 8 ) ); ++i )
 766              		.loc 1 773 0
 767 00a4 0030A0E3 		mov	r3, #0
 768 00a8 14300BE5 		str	r3, [fp, #-20]
 769 00ac 300000EA 		b	.L58
 770              	.L62:
 774:../Xilinx_src/micro.c ****         {
 775:../Xilinx_src/micro.c ****             --lNumBits;
 771              		.loc 1 775 0
 772 00b0 20301BE5 		ldr	r3, [fp, #-32]
 773 00b4 013043E2 		sub	r3, r3, #1
 774 00b8 20300BE5 		str	r3, [fp, #-32]
 776:../Xilinx_src/micro.c ****             if ( iExitShift && !lNumBits )
 775              		.loc 1 776 0
 776 00bc 2C301BE5 		ldr	r3, [fp, #-44]
 777 00c0 000053E3 		cmp	r3, #0
 778 00c4 0500000A 		beq	.L59
 779              		.loc 1 776 0 is_stmt 0 discriminator 1
 780 00c8 20301BE5 		ldr	r3, [fp, #-32]
 781 00cc 000053E3 		cmp	r3, #0
 782 00d0 0200001A 		bne	.L59
 777:../Xilinx_src/micro.c ****             {
 778:../Xilinx_src/micro.c ****                 /* Exit Shift-DR state */
 779:../Xilinx_src/micro.c ****                 setPort( TMS, 1 );
 783              		.loc 1 779 0 is_stmt 1
 784 00d4 0100A0E3 		mov	r0, #1
 785 00d8 0110A0E3 		mov	r1, #1
 786 00dc FEFFFFEB 		bl	setPort
 787              	.L59:
 780:../Xilinx_src/micro.c ****             }
 781:../Xilinx_src/micro.c **** 
 782:../Xilinx_src/micro.c ****             /* Set the new TDI value */
 783:../Xilinx_src/micro.c ****             setPort( TDI, (short)(ucTdiByte & 1) );
 788              		.loc 1 783 0
 789 00e0 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 790 00e4 0338A0E1 		mov	r3, r3, asl #16
 791 00e8 2338A0E1 		mov	r3, r3, lsr #16
 792 00ec 013003E2 		and	r3, r3, #1
 793 00f0 0338A0E1 		mov	r3, r3, asl #16
 794 00f4 2338A0E1 		mov	r3, r3, lsr #16
 795 00f8 0338A0E1 		mov	r3, r3, asl #16
 796 00fc 4338A0E1 		mov	r3, r3, asr #16
 797 0100 0200A0E3 		mov	r0, #2
 798 0104 0310A0E1 		mov	r1, r3
 799 0108 FEFFFFEB 		bl	setPort
 784:../Xilinx_src/micro.c ****             ucTdiByte   >>= 1;
 800              		.loc 1 784 0
 801 010c 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 802 0110 A330A0E1 		mov	r3, r3, lsr #1
 803 0114 0D304BE5 		strb	r3, [fp, #-13]
 785:../Xilinx_src/micro.c **** 
 786:../Xilinx_src/micro.c ****             /* Set TCK low */
 787:../Xilinx_src/micro.c ****             setPort( TCK, 0 );
 804              		.loc 1 787 0
 805 0118 0000A0E3 		mov	r0, #0
 806 011c 0010A0E3 		mov	r1, #0
 807 0120 FEFFFFEB 		bl	setPort
 788:../Xilinx_src/micro.c **** 
 789:../Xilinx_src/micro.c ****             if ( pucTdo )
 808              		.loc 1 789 0
 809 0124 0C301BE5 		ldr	r3, [fp, #-12]
 810 0128 000053E3 		cmp	r3, #0
 811 012c 0A00000A 		beq	.L60
 790:../Xilinx_src/micro.c ****             {
 791:../Xilinx_src/micro.c ****                 /* Save the TDO value */
 792:../Xilinx_src/micro.c ****                 ucTdoBit    = readTDOBit();
 812              		.loc 1 792 0
 813 0130 FEFFFFEB 		bl	readTDOBit
 814 0134 0030A0E1 		mov	r3, r0
 815 0138 15304BE5 		strb	r3, [fp, #-21]
 793:../Xilinx_src/micro.c ****                 ucTdoByte   |= ( ucTdoBit << i );
 816              		.loc 1 793 0
 817 013c 15205BE5 		ldrb	r2, [fp, #-21]	@ zero_extendqisi2
 818 0140 14301BE5 		ldr	r3, [fp, #-20]
 819 0144 1233A0E1 		mov	r3, r2, asl r3
 820 0148 FF2003E2 		and	r2, r3, #255
 821 014c 0E305BE5 		ldrb	r3, [fp, #-14]	@ zero_extendqisi2
 822 0150 033082E1 		orr	r3, r2, r3
 823 0154 FF3003E2 		and	r3, r3, #255
 824 0158 0E304BE5 		strb	r3, [fp, #-14]
 825              	.L60:
 794:../Xilinx_src/micro.c ****             }
 795:../Xilinx_src/micro.c **** 
 796:../Xilinx_src/micro.c ****             /* Set TCK high */
 797:../Xilinx_src/micro.c ****             setPort( TCK, 1 );
 826              		.loc 1 797 0
 827 015c 0000A0E3 		mov	r0, #0
 828 0160 0110A0E3 		mov	r1, #1
 829 0164 FEFFFFEB 		bl	setPort
 773:../Xilinx_src/micro.c ****         for ( i = 0; ( lNumBits && ( i < 8 ) ); ++i )
 830              		.loc 1 773 0
 831 0168 14301BE5 		ldr	r3, [fp, #-20]
 832 016c 013083E2 		add	r3, r3, #1
 833 0170 14300BE5 		str	r3, [fp, #-20]
 834              	.L58:
 773:../Xilinx_src/micro.c ****         for ( i = 0; ( lNumBits && ( i < 8 ) ); ++i )
 835              		.loc 1 773 0 is_stmt 0 discriminator 1
 836 0174 20301BE5 		ldr	r3, [fp, #-32]
 837 0178 000053E3 		cmp	r3, #0
 838 017c 0200000A 		beq	.L61
 773:../Xilinx_src/micro.c ****         for ( i = 0; ( lNumBits && ( i < 8 ) ); ++i )
 839              		.loc 1 773 0 discriminator 2
 840 0180 14301BE5 		ldr	r3, [fp, #-20]
 841 0184 070053E3 		cmp	r3, #7
 842 0188 C8FFFFDA 		ble	.L62
 843              	.L61:
 798:../Xilinx_src/micro.c ****         }
 799:../Xilinx_src/micro.c **** 
 800:../Xilinx_src/micro.c ****         /* Save the TDO byte value */
 801:../Xilinx_src/micro.c ****         if ( pucTdo )
 844              		.loc 1 801 0 is_stmt 1
 845 018c 0C301BE5 		ldr	r3, [fp, #-12]
 846 0190 000053E3 		cmp	r3, #0
 847 0194 0500000A 		beq	.L57
 802:../Xilinx_src/micro.c ****         {
 803:../Xilinx_src/micro.c ****             (*(--pucTdo))   = ucTdoByte;
 848              		.loc 1 803 0
 849 0198 0C301BE5 		ldr	r3, [fp, #-12]
 850 019c 013043E2 		sub	r3, r3, #1
 851 01a0 0C300BE5 		str	r3, [fp, #-12]
 852 01a4 0C301BE5 		ldr	r3, [fp, #-12]
 853 01a8 0E205BE5 		ldrb	r2, [fp, #-14]
 854 01ac 0020C3E5 		strb	r2, [r3, #0]
 855              	.L57:
 768:../Xilinx_src/micro.c ****     while ( lNumBits )
 856              		.loc 1 768 0 discriminator 1
 857 01b0 20301BE5 		ldr	r3, [fp, #-32]
 858 01b4 000053E3 		cmp	r3, #0
 859 01b8 B1FFFF1A 		bne	.L63
 804:../Xilinx_src/micro.c ****         }
 805:../Xilinx_src/micro.c ****     }
 806:../Xilinx_src/micro.c **** }
 860              		.loc 1 806 0
 861 01bc 04D04BE2 		sub	sp, fp, #4
 862 01c0 0088BDE8 		ldmfd	sp!, {fp, pc}
 863              		.cfi_endproc
 864              	.LFE5:
 866              		.section	.text.xsvfShift,"ax",%progbits
 867              		.align	2
 868              		.global	xsvfShift
 870              	xsvfShift:
 871              	.LFB6:
 807:../Xilinx_src/micro.c **** 
 808:../Xilinx_src/micro.c **** /*****************************************************************************
 809:../Xilinx_src/micro.c **** * Function:     xsvfShift
 810:../Xilinx_src/micro.c **** * Description:  Goes to the given starting TAP state.
 811:../Xilinx_src/micro.c **** *               Calls xsvfShiftOnly to shift in the given TDI data and
 812:../Xilinx_src/micro.c **** *               optionally capture the TDO data.
 813:../Xilinx_src/micro.c **** *               Compares the TDO captured data against the TDO expected
 814:../Xilinx_src/micro.c **** *               data.
 815:../Xilinx_src/micro.c **** *               If a data mismatch occurs, then executes the exception
 816:../Xilinx_src/micro.c **** *               handling loop upto ucMaxRepeat times.
 817:../Xilinx_src/micro.c **** * Parameters:   pucTapState     - Ptr to current TAP state.
 818:../Xilinx_src/micro.c **** *               ucStartState    - Starting shift state: Shift-DR or Shift-IR.
 819:../Xilinx_src/micro.c **** *               lNumBits        - number of bits to shift.
 820:../Xilinx_src/micro.c **** *               plvTdi          - ptr to lenval for TDI data.
 821:../Xilinx_src/micro.c **** *               plvTdoCaptured  - ptr to lenval for storing TDO data.
 822:../Xilinx_src/micro.c **** *               plvTdoExpected  - ptr to expected TDO data.
 823:../Xilinx_src/micro.c **** *               plvTdoMask      - ptr to TDO mask.
 824:../Xilinx_src/micro.c **** *               ucEndState      - state in which to end the shift.
 825:../Xilinx_src/micro.c **** *               lRunTestTime    - amount of time to wait after the shift.
 826:../Xilinx_src/micro.c **** *               ucMaxRepeat     - Maximum number of retries on TDO mismatch.
 827:../Xilinx_src/micro.c **** * Returns:      int             - 0 = success; otherwise TDO mismatch.
 828:../Xilinx_src/micro.c **** * Notes:        XC9500XL-only Optimization:
 829:../Xilinx_src/micro.c **** *               Skip the waitTime() if plvTdoMask->val[0:plvTdoMask->len-1]
 830:../Xilinx_src/micro.c **** *               is NOT all zeros and sMatch==1.
 831:../Xilinx_src/micro.c **** *****************************************************************************/
 832:../Xilinx_src/micro.c **** int xsvfShift( unsigned char*   pucTapState,
 833:../Xilinx_src/micro.c ****                unsigned char    ucStartState,
 834:../Xilinx_src/micro.c ****                long             lNumBits,
 835:../Xilinx_src/micro.c ****                lenVal*          plvTdi,
 836:../Xilinx_src/micro.c ****                lenVal*          plvTdoCaptured,
 837:../Xilinx_src/micro.c ****                lenVal*          plvTdoExpected,
 838:../Xilinx_src/micro.c ****                lenVal*          plvTdoMask,
 839:../Xilinx_src/micro.c ****                unsigned char    ucEndState,
 840:../Xilinx_src/micro.c ****                long             lRunTestTime,
 841:../Xilinx_src/micro.c ****                unsigned char    ucMaxRepeat )
 842:../Xilinx_src/micro.c **** {
 872              		.loc 1 842 0
 873              		.cfi_startproc
 874              		@ args = 24, pretend = 0, frame = 32
 875              		@ frame_needed = 1, uses_anonymous_args = 0
 876 0000 00482DE9 		stmfd	sp!, {fp, lr}
 877              	.LCFI12:
 878              		.cfi_def_cfa_offset 8
 879 0004 04B08DE2 		add	fp, sp, #4
 880              		.cfi_offset 14, -4
 881              		.cfi_offset 11, -8
 882              	.LCFI13:
 883              		.cfi_def_cfa 11, 4
 884 0008 20D04DE2 		sub	sp, sp, #32
 885 000c 18000BE5 		str	r0, [fp, #-24]
 886 0010 20200BE5 		str	r2, [fp, #-32]
 887 0014 24300BE5 		str	r3, [fp, #-36]
 888 0018 0130A0E1 		mov	r3, r1
 889 001c 19304BE5 		strb	r3, [fp, #-25]
 843:../Xilinx_src/micro.c ****     int             iErrorCode;
 844:../Xilinx_src/micro.c ****     int             iMismatch;
 845:../Xilinx_src/micro.c ****     unsigned char   ucRepeat;
 846:../Xilinx_src/micro.c ****     int             iExitShift;
 847:../Xilinx_src/micro.c **** 
 848:../Xilinx_src/micro.c ****     iErrorCode  = XSVF_ERROR_NONE;
 890              		.loc 1 848 0
 891 0020 0030A0E3 		mov	r3, #0
 892 0024 08300BE5 		str	r3, [fp, #-8]
 849:../Xilinx_src/micro.c ****     iMismatch   = 0;
 893              		.loc 1 849 0
 894 0028 0030A0E3 		mov	r3, #0
 895 002c 0C300BE5 		str	r3, [fp, #-12]
 850:../Xilinx_src/micro.c ****     ucRepeat    = 0;
 896              		.loc 1 850 0
 897 0030 0030A0E3 		mov	r3, #0
 898 0034 0D304BE5 		strb	r3, [fp, #-13]
 851:../Xilinx_src/micro.c ****     iExitShift  = ( ucStartState != ucEndState );
 899              		.loc 1 851 0
 900 0038 19205BE5 		ldrb	r2, [fp, #-25]	@ zero_extendqisi2
 901 003c 1030DBE5 		ldrb	r3, [fp, #16]	@ zero_extendqisi2
 902 0040 030052E1 		cmp	r2, r3
 903 0044 0030A003 		moveq	r3, #0
 904 0048 0130A013 		movne	r3, #1
 905 004c 14300BE5 		str	r3, [fp, #-20]
 852:../Xilinx_src/micro.c **** 
 853:../Xilinx_src/micro.c ****     XSVFDBG_PRINTF1( 3, "   Shift Length = %d\n", lNumBits );
 854:../Xilinx_src/micro.c ****     XSVFDBG_PRINTF( 4, "    TDI          = ");
 855:../Xilinx_src/micro.c ****     XSVFDBG_PRINTLENVAL( 4, plvTdi );
 856:../Xilinx_src/micro.c ****     XSVFDBG_PRINTF( 4, "\n");
 857:../Xilinx_src/micro.c ****     XSVFDBG_PRINTF( 4, "    TDO Expected = ");
 858:../Xilinx_src/micro.c ****     XSVFDBG_PRINTLENVAL( 4, plvTdoExpected );
 859:../Xilinx_src/micro.c ****     XSVFDBG_PRINTF( 4, "\n");
 860:../Xilinx_src/micro.c **** 
 861:../Xilinx_src/micro.c ****     if ( !lNumBits )
 906              		.loc 1 861 0
 907 0050 20301BE5 		ldr	r3, [fp, #-32]
 908 0054 000053E3 		cmp	r3, #0
 909 0058 0800001A 		bne	.L65
 862:../Xilinx_src/micro.c ****     {
 863:../Xilinx_src/micro.c ****         /* Compatibility with XSVF2.00:  XSDR 0 = no shift, but wait in RTI */
 864:../Xilinx_src/micro.c ****         if ( lRunTestTime )
 910              		.loc 1 864 0
 911 005c 14309BE5 		ldr	r3, [fp, #20]
 912 0060 000053E3 		cmp	r3, #0
 913 0064 5300000A 		beq	.L66
 865:../Xilinx_src/micro.c ****         {
 866:../Xilinx_src/micro.c ****             /* Wait for prespecified XRUNTEST time */
 867:../Xilinx_src/micro.c ****             xsvfGotoTapState( pucTapState, XTAPSTATE_RUNTEST );
 914              		.loc 1 867 0
 915 0068 18001BE5 		ldr	r0, [fp, #-24]
 916 006c 0110A0E3 		mov	r1, #1
 917 0070 FEFFFFEB 		bl	xsvfGotoTapState
 868:../Xilinx_src/micro.c ****             XSVFDBG_PRINTF1( 3, "   Wait = %d usec\n", lRunTestTime );
 869:../Xilinx_src/micro.c ****             waitTime( lRunTestTime );
 918              		.loc 1 869 0
 919 0074 14009BE5 		ldr	r0, [fp, #20]
 920 0078 FEFFFFEB 		bl	waitTime
 921 007c 4D0000EA 		b	.L66
 922              	.L65:
 870:../Xilinx_src/micro.c ****         }
 871:../Xilinx_src/micro.c ****     }
 872:../Xilinx_src/micro.c ****     else
 873:../Xilinx_src/micro.c ****     {
 874:../Xilinx_src/micro.c ****         do
 875:../Xilinx_src/micro.c ****         {
 876:../Xilinx_src/micro.c ****             /* Goto Shift-DR or Shift-IR */
 877:../Xilinx_src/micro.c ****             xsvfGotoTapState( pucTapState, ucStartState );
 923              		.loc 1 877 0
 924 0080 19305BE5 		ldrb	r3, [fp, #-25]	@ zero_extendqisi2
 925 0084 18001BE5 		ldr	r0, [fp, #-24]
 926 0088 0310A0E1 		mov	r1, r3
 927 008c FEFFFFEB 		bl	xsvfGotoTapState
 878:../Xilinx_src/micro.c **** 
 879:../Xilinx_src/micro.c ****             /* Shift TDI and capture TDO */
 880:../Xilinx_src/micro.c ****             xsvfShiftOnly( lNumBits, plvTdi, plvTdoCaptured, iExitShift );
 928              		.loc 1 880 0
 929 0090 20001BE5 		ldr	r0, [fp, #-32]
 930 0094 24101BE5 		ldr	r1, [fp, #-36]
 931 0098 04209BE5 		ldr	r2, [fp, #4]
 932 009c 14301BE5 		ldr	r3, [fp, #-20]
 933 00a0 FEFFFFEB 		bl	xsvfShiftOnly
 881:../Xilinx_src/micro.c **** 
 882:../Xilinx_src/micro.c ****             if ( plvTdoExpected )
 934              		.loc 1 882 0
 935 00a4 08309BE5 		ldr	r3, [fp, #8]
 936 00a8 000053E3 		cmp	r3, #0
 937 00ac 0800000A 		beq	.L67
 883:../Xilinx_src/micro.c ****             {
 884:../Xilinx_src/micro.c ****                 /* Compare TDO data to expected TDO data */
 885:../Xilinx_src/micro.c ****                 iMismatch   = !EqualLenVal( plvTdoExpected,
 938              		.loc 1 885 0
 939 00b0 08009BE5 		ldr	r0, [fp, #8]
 940 00b4 04109BE5 		ldr	r1, [fp, #4]
 941 00b8 0C209BE5 		ldr	r2, [fp, #12]
 942 00bc FEFFFFEB 		bl	EqualLenVal
 943 00c0 0030A0E1 		mov	r3, r0
 944 00c4 000053E3 		cmp	r3, #0
 945 00c8 0030A013 		movne	r3, #0
 946 00cc 0130A003 		moveq	r3, #1
 947 00d0 0C300BE5 		str	r3, [fp, #-12]
 948              	.L67:
 886:../Xilinx_src/micro.c ****                                             plvTdoCaptured,
 887:../Xilinx_src/micro.c ****                                             plvTdoMask );
 888:../Xilinx_src/micro.c ****             }
 889:../Xilinx_src/micro.c **** 
 890:../Xilinx_src/micro.c ****             if ( iExitShift )
 949              		.loc 1 890 0
 950 00d4 14301BE5 		ldr	r3, [fp, #-20]
 951 00d8 000053E3 		cmp	r3, #0
 952 00dc 2700000A 		beq	.L68
 891:../Xilinx_src/micro.c ****             {
 892:../Xilinx_src/micro.c ****                 /* Update TAP state:  Shift->Exit */
 893:../Xilinx_src/micro.c ****                 ++(*pucTapState);
 953              		.loc 1 893 0
 954 00e0 18301BE5 		ldr	r3, [fp, #-24]
 955 00e4 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 956 00e8 013083E2 		add	r3, r3, #1
 957 00ec FF2003E2 		and	r2, r3, #255
 958 00f0 18301BE5 		ldr	r3, [fp, #-24]
 959 00f4 0020C3E5 		strb	r2, [r3, #0]
 894:../Xilinx_src/micro.c ****                 XSVFDBG_PRINTF1( 3, "   TAP State = %s\n",
 895:../Xilinx_src/micro.c ****                                  xsvf_pzTapState[ *pucTapState ] );
 896:../Xilinx_src/micro.c **** 
 897:../Xilinx_src/micro.c ****                 if ( iMismatch && lRunTestTime && ( ucRepeat < ucMaxRepeat ) )
 960              		.loc 1 897 0
 961 00f8 0C301BE5 		ldr	r3, [fp, #-12]
 962 00fc 000053E3 		cmp	r3, #0
 963 0100 1200000A 		beq	.L69
 964              		.loc 1 897 0 is_stmt 0 discriminator 1
 965 0104 14309BE5 		ldr	r3, [fp, #20]
 966 0108 000053E3 		cmp	r3, #0
 967 010c 0F00000A 		beq	.L69
 968 0110 0D205BE5 		ldrb	r2, [fp, #-13]	@ zero_extendqisi2
 969 0114 1830DBE5 		ldrb	r3, [fp, #24]	@ zero_extendqisi2
 970 0118 030052E1 		cmp	r2, r3
 971 011c 0B00002A 		bcs	.L69
 898:../Xilinx_src/micro.c ****                 {
 899:../Xilinx_src/micro.c ****                     XSVFDBG_PRINTF( 4, "    TDO Expected = ");
 900:../Xilinx_src/micro.c ****                     XSVFDBG_PRINTLENVAL( 4, plvTdoExpected );
 901:../Xilinx_src/micro.c ****                     XSVFDBG_PRINTF( 4, "\n");
 902:../Xilinx_src/micro.c ****                     XSVFDBG_PRINTF( 4, "    TDO Captured = ");
 903:../Xilinx_src/micro.c ****                     XSVFDBG_PRINTLENVAL( 4, plvTdoCaptured );
 904:../Xilinx_src/micro.c ****                     XSVFDBG_PRINTF( 4, "\n");
 905:../Xilinx_src/micro.c ****                     XSVFDBG_PRINTF( 4, "    TDO Mask     = ");
 906:../Xilinx_src/micro.c ****                     XSVFDBG_PRINTLENVAL( 4, plvTdoMask );
 907:../Xilinx_src/micro.c ****                     XSVFDBG_PRINTF( 4, "\n");
 908:../Xilinx_src/micro.c ****                     XSVFDBG_PRINTF1( 3, "   Retry #%d\n", ( ucRepeat + 1 ) );
 909:../Xilinx_src/micro.c ****                     /* Do exception handling retry - ShiftDR only */
 910:../Xilinx_src/micro.c ****                     xsvfGotoTapState( pucTapState, XTAPSTATE_PAUSEDR );
 972              		.loc 1 910 0 is_stmt 1
 973 0120 18001BE5 		ldr	r0, [fp, #-24]
 974 0124 0610A0E3 		mov	r1, #6
 975 0128 FEFFFFEB 		bl	xsvfGotoTapState
 911:../Xilinx_src/micro.c ****                     /* Shift 1 extra bit */
 912:../Xilinx_src/micro.c ****                     xsvfGotoTapState( pucTapState, XTAPSTATE_SHIFTDR );
 976              		.loc 1 912 0
 977 012c 18001BE5 		ldr	r0, [fp, #-24]
 978 0130 0410A0E3 		mov	r1, #4
 979 0134 FEFFFFEB 		bl	xsvfGotoTapState
 913:../Xilinx_src/micro.c ****                     /* Increment RUNTEST time by an additional 25% */
 914:../Xilinx_src/micro.c ****                     lRunTestTime    += ( lRunTestTime >> 2 );
 980              		.loc 1 914 0
 981 0138 14309BE5 		ldr	r3, [fp, #20]
 982 013c 4331A0E1 		mov	r3, r3, asr #2
 983 0140 14209BE5 		ldr	r2, [fp, #20]
 984 0144 033082E0 		add	r3, r2, r3
 985 0148 14308BE5 		str	r3, [fp, #20]
 986 014c 030000EA 		b	.L70
 987              	.L69:
 915:../Xilinx_src/micro.c ****                 }
 916:../Xilinx_src/micro.c ****                 else
 917:../Xilinx_src/micro.c ****                 {
 918:../Xilinx_src/micro.c ****                     /* Do normal exit from Shift-XR */
 919:../Xilinx_src/micro.c ****                     xsvfGotoTapState( pucTapState, ucEndState );
 988              		.loc 1 919 0
 989 0150 1030DBE5 		ldrb	r3, [fp, #16]	@ zero_extendqisi2
 990 0154 18001BE5 		ldr	r0, [fp, #-24]
 991 0158 0310A0E1 		mov	r1, r3
 992 015c FEFFFFEB 		bl	xsvfGotoTapState
 993              	.L70:
 920:../Xilinx_src/micro.c ****                 }
 921:../Xilinx_src/micro.c **** 
 922:../Xilinx_src/micro.c ****                 if ( lRunTestTime )
 994              		.loc 1 922 0
 995 0160 14309BE5 		ldr	r3, [fp, #20]
 996 0164 000053E3 		cmp	r3, #0
 997 0168 0400000A 		beq	.L68
 923:../Xilinx_src/micro.c ****                 {
 924:../Xilinx_src/micro.c ****                     /* Wait for prespecified XRUNTEST time */
 925:../Xilinx_src/micro.c ****                     xsvfGotoTapState( pucTapState, XTAPSTATE_RUNTEST );
 998              		.loc 1 925 0
 999 016c 18001BE5 		ldr	r0, [fp, #-24]
 1000 0170 0110A0E3 		mov	r1, #1
 1001 0174 FEFFFFEB 		bl	xsvfGotoTapState
 926:../Xilinx_src/micro.c ****                     XSVFDBG_PRINTF1( 3, "   Wait = %d usec\n", lRunTestTime );
 927:../Xilinx_src/micro.c ****                     waitTime( lRunTestTime );
 1002              		.loc 1 927 0
 1003 0178 14009BE5 		ldr	r0, [fp, #20]
 1004 017c FEFFFFEB 		bl	waitTime
 1005              	.L68:
 928:../Xilinx_src/micro.c ****                 }
 929:../Xilinx_src/micro.c ****             }
 930:../Xilinx_src/micro.c ****         } while ( iMismatch && ( ucRepeat++ < ucMaxRepeat ) );
 1006              		.loc 1 930 0
 1007 0180 0C301BE5 		ldr	r3, [fp, #-12]
 1008 0184 000053E3 		cmp	r3, #0
 1009 0188 0A00000A 		beq	.L66
 1010              		.loc 1 930 0 is_stmt 0 discriminator 1
 1011 018c 0D205BE5 		ldrb	r2, [fp, #-13]	@ zero_extendqisi2
 1012 0190 1830DBE5 		ldrb	r3, [fp, #24]	@ zero_extendqisi2
 1013 0194 030052E1 		cmp	r2, r3
 1014 0198 0030A023 		movcs	r3, #0
 1015 019c 0130A033 		movcc	r3, #1
 1016 01a0 FF3003E2 		and	r3, r3, #255
 1017 01a4 0D205BE5 		ldrb	r2, [fp, #-13]
 1018 01a8 012082E2 		add	r2, r2, #1
 1019 01ac 0D204BE5 		strb	r2, [fp, #-13]
 1020 01b0 000053E3 		cmp	r3, #0
 1021 01b4 B1FFFF1A 		bne	.L65
 1022              	.L66:
 931:../Xilinx_src/micro.c ****     }
 932:../Xilinx_src/micro.c **** 
 933:../Xilinx_src/micro.c ****     if ( iMismatch )
 1023              		.loc 1 933 0 is_stmt 1
 1024 01b8 0C301BE5 		ldr	r3, [fp, #-12]
 1025 01bc 000053E3 		cmp	r3, #0
 1026 01c0 0B00000A 		beq	.L71
 934:../Xilinx_src/micro.c ****     {
 935:../Xilinx_src/micro.c ****         XSVFDBG_PRINTF( 1, " TDO Expected = ");
 936:../Xilinx_src/micro.c ****         XSVFDBG_PRINTLENVAL( 1, plvTdoExpected );
 937:../Xilinx_src/micro.c ****         XSVFDBG_PRINTF( 1, "\n");
 938:../Xilinx_src/micro.c ****         XSVFDBG_PRINTF( 1, " TDO Captured = ");
 939:../Xilinx_src/micro.c ****         XSVFDBG_PRINTLENVAL( 1, plvTdoCaptured );
 940:../Xilinx_src/micro.c ****         XSVFDBG_PRINTF( 1, "\n");
 941:../Xilinx_src/micro.c ****         XSVFDBG_PRINTF( 1, " TDO Mask     = ");
 942:../Xilinx_src/micro.c ****         XSVFDBG_PRINTLENVAL( 1, plvTdoMask );
 943:../Xilinx_src/micro.c ****         XSVFDBG_PRINTF( 1, "\n");
 944:../Xilinx_src/micro.c ****         if ( ucMaxRepeat && ( ucRepeat > ucMaxRepeat ) )
 1027              		.loc 1 944 0
 1028 01c4 1830DBE5 		ldrb	r3, [fp, #24]	@ zero_extendqisi2
 1029 01c8 000053E3 		cmp	r3, #0
 1030 01cc 0600000A 		beq	.L72
 1031              		.loc 1 944 0 is_stmt 0 discriminator 1
 1032 01d0 0D205BE5 		ldrb	r2, [fp, #-13]	@ zero_extendqisi2
 1033 01d4 1830DBE5 		ldrb	r3, [fp, #24]	@ zero_extendqisi2
 1034 01d8 030052E1 		cmp	r2, r3
 1035 01dc 0200009A 		bls	.L72
 945:../Xilinx_src/micro.c ****         {
 946:../Xilinx_src/micro.c ****             iErrorCode  = XSVF_ERROR_MAXRETRIES;
 1036              		.loc 1 946 0 is_stmt 1
 1037 01e0 0330A0E3 		mov	r3, #3
 1038 01e4 08300BE5 		str	r3, [fp, #-8]
 1039 01e8 010000EA 		b	.L71
 1040              	.L72:
 947:../Xilinx_src/micro.c ****         }
 948:../Xilinx_src/micro.c ****         else
 949:../Xilinx_src/micro.c ****         {
 950:../Xilinx_src/micro.c ****             iErrorCode  = XSVF_ERROR_TDOMISMATCH;
 1041              		.loc 1 950 0
 1042 01ec 0230A0E3 		mov	r3, #2
 1043 01f0 08300BE5 		str	r3, [fp, #-8]
 1044              	.L71:
 951:../Xilinx_src/micro.c ****         }
 952:../Xilinx_src/micro.c ****     }
 953:../Xilinx_src/micro.c **** 
 954:../Xilinx_src/micro.c ****     return( iErrorCode );
 1045              		.loc 1 954 0
 1046 01f4 08301BE5 		ldr	r3, [fp, #-8]
 955:../Xilinx_src/micro.c **** }
 1047              		.loc 1 955 0
 1048 01f8 0300A0E1 		mov	r0, r3
 1049 01fc 04D04BE2 		sub	sp, fp, #4
 1050 0200 0088BDE8 		ldmfd	sp!, {fp, pc}
 1051              		.cfi_endproc
 1052              	.LFE6:
 1054              		.section	.text.xsvfBasicXSDRTDO,"ax",%progbits
 1055              		.align	2
 1056              		.global	xsvfBasicXSDRTDO
 1058              	xsvfBasicXSDRTDO:
 1059              	.LFB7:
 956:../Xilinx_src/micro.c **** 
 957:../Xilinx_src/micro.c **** /*****************************************************************************
 958:../Xilinx_src/micro.c **** * Function:     xsvfBasicXSDRTDO
 959:../Xilinx_src/micro.c **** * Description:  Get the XSDRTDO parameters and execute the XSDRTDO command.
 960:../Xilinx_src/micro.c **** *               This is the common function for all XSDRTDO commands.
 961:../Xilinx_src/micro.c **** * Parameters:   pucTapState         - Current TAP state.
 962:../Xilinx_src/micro.c **** *               lShiftLengthBits    - number of bits to shift.
 963:../Xilinx_src/micro.c **** *               sShiftLengthBytes   - number of bytes to read.
 964:../Xilinx_src/micro.c **** *               plvTdi              - ptr to lenval for TDI data.
 965:../Xilinx_src/micro.c **** *               lvTdoCaptured       - ptr to lenval for storing TDO data.
 966:../Xilinx_src/micro.c **** *               iEndState           - state in which to end the shift.
 967:../Xilinx_src/micro.c **** *               lRunTestTime        - amount of time to wait after the shift.
 968:../Xilinx_src/micro.c **** *               ucMaxRepeat         - maximum xc9500/xl retries.
 969:../Xilinx_src/micro.c **** * Returns:      int                 - 0 = success; otherwise TDO mismatch.
 970:../Xilinx_src/micro.c **** *****************************************************************************/
 971:../Xilinx_src/micro.c **** int xsvfBasicXSDRTDO( unsigned char*    pucTapState,
 972:../Xilinx_src/micro.c ****                       long              lShiftLengthBits,
 973:../Xilinx_src/micro.c ****                       short             sShiftLengthBytes,
 974:../Xilinx_src/micro.c ****                       lenVal*           plvTdi,
 975:../Xilinx_src/micro.c ****                       lenVal*           plvTdoCaptured,
 976:../Xilinx_src/micro.c ****                       lenVal*           plvTdoExpected,
 977:../Xilinx_src/micro.c ****                       lenVal*           plvTdoMask,
 978:../Xilinx_src/micro.c ****                       unsigned char     ucEndState,
 979:../Xilinx_src/micro.c ****                       long              lRunTestTime,
 980:../Xilinx_src/micro.c ****                       unsigned char     ucMaxRepeat )
 981:../Xilinx_src/micro.c **** {
 1060              		.loc 1 981 0
 1061              		.cfi_startproc
 1062              		@ args = 24, pretend = 0, frame = 16
 1063              		@ frame_needed = 1, uses_anonymous_args = 0
 1064 0000 00482DE9 		stmfd	sp!, {fp, lr}
 1065              	.LCFI14:
 1066              		.cfi_def_cfa_offset 8
 1067 0004 04B08DE2 		add	fp, sp, #4
 1068              		.cfi_offset 14, -4
 1069              		.cfi_offset 11, -8
 1070              	.LCFI15:
 1071              		.cfi_def_cfa 11, 4
 1072 0008 28D04DE2 		sub	sp, sp, #40
 1073 000c 08000BE5 		str	r0, [fp, #-8]
 1074 0010 0C100BE5 		str	r1, [fp, #-12]
 1075 0014 14300BE5 		str	r3, [fp, #-20]
 1076 0018 BE204BE1 		strh	r2, [fp, #-14]	@ movhi
 982:../Xilinx_src/micro.c ****     readVal( plvTdi, sShiftLengthBytes );
 1077              		.loc 1 982 0
 1078 001c FE305BE1 		ldrsh	r3, [fp, #-14]
 1079 0020 14001BE5 		ldr	r0, [fp, #-20]
 1080 0024 0310A0E1 		mov	r1, r3
 1081 0028 FEFFFFEB 		bl	readVal
 983:../Xilinx_src/micro.c ****     if ( plvTdoExpected )
 1082              		.loc 1 983 0
 1083 002c 08309BE5 		ldr	r3, [fp, #8]
 1084 0030 000053E3 		cmp	r3, #0
 1085 0034 0300000A 		beq	.L74
 984:../Xilinx_src/micro.c ****     {
 985:../Xilinx_src/micro.c ****         readVal( plvTdoExpected, sShiftLengthBytes );
 1086              		.loc 1 985 0
 1087 0038 FE305BE1 		ldrsh	r3, [fp, #-14]
 1088 003c 08009BE5 		ldr	r0, [fp, #8]
 1089 0040 0310A0E1 		mov	r1, r3
 1090 0044 FEFFFFEB 		bl	readVal
 1091              	.L74:
 986:../Xilinx_src/micro.c ****     }
 987:../Xilinx_src/micro.c ****     return( xsvfShift( pucTapState, XTAPSTATE_SHIFTDR, lShiftLengthBits,
 1092              		.loc 1 987 0
 1093 0048 04309BE5 		ldr	r3, [fp, #4]
 1094 004c 00308DE5 		str	r3, [sp, #0]
 1095 0050 08309BE5 		ldr	r3, [fp, #8]
 1096 0054 04308DE5 		str	r3, [sp, #4]
 1097 0058 0C309BE5 		ldr	r3, [fp, #12]
 1098 005c 08308DE5 		str	r3, [sp, #8]
 1099 0060 1030DBE5 		ldrb	r3, [fp, #16]	@ zero_extendqisi2
 1100 0064 0C308DE5 		str	r3, [sp, #12]
 1101 0068 14309BE5 		ldr	r3, [fp, #20]
 1102 006c 10308DE5 		str	r3, [sp, #16]
 1103 0070 1830DBE5 		ldrb	r3, [fp, #24]	@ zero_extendqisi2
 1104 0074 14308DE5 		str	r3, [sp, #20]
 1105 0078 08001BE5 		ldr	r0, [fp, #-8]
 1106 007c 0410A0E3 		mov	r1, #4
 1107 0080 0C201BE5 		ldr	r2, [fp, #-12]
 1108 0084 14301BE5 		ldr	r3, [fp, #-20]
 1109 0088 FEFFFFEB 		bl	xsvfShift
 1110 008c 0030A0E1 		mov	r3, r0
 988:../Xilinx_src/micro.c ****                        plvTdi, plvTdoCaptured, plvTdoExpected, plvTdoMask,
 989:../Xilinx_src/micro.c ****                        ucEndState, lRunTestTime, ucMaxRepeat ) );
 990:../Xilinx_src/micro.c **** }
 1111              		.loc 1 990 0
 1112 0090 0300A0E1 		mov	r0, r3
 1113 0094 04D04BE2 		sub	sp, fp, #4
 1114 0098 0088BDE8 		ldmfd	sp!, {fp, pc}
 1115              		.cfi_endproc
 1116              	.LFE7:
 1118              		.section	.text.xsvfDoSDRMasking,"ax",%progbits
 1119              		.align	2
 1120              		.global	xsvfDoSDRMasking
 1122              	xsvfDoSDRMasking:
 1123              	.LFB8:
 991:../Xilinx_src/micro.c **** 
 992:../Xilinx_src/micro.c **** /*****************************************************************************
 993:../Xilinx_src/micro.c **** * Function:     xsvfDoSDRMasking
 994:../Xilinx_src/micro.c **** * Description:  Update the data value with the next XSDRINC data and address.
 995:../Xilinx_src/micro.c **** * Example:      dataVal=0x01ff, nextData=0xab, addressMask=0x0100,
 996:../Xilinx_src/micro.c **** *               dataMask=0x00ff, should set dataVal to 0x02ab
 997:../Xilinx_src/micro.c **** * Parameters:   plvTdi          - The current TDI value.
 998:../Xilinx_src/micro.c **** *               plvNextData     - the next data value.
 999:../Xilinx_src/micro.c **** *               plvAddressMask  - the address mask.
1000:../Xilinx_src/micro.c **** *               plvDataMask     - the data mask.
1001:../Xilinx_src/micro.c **** * Returns:      void.
1002:../Xilinx_src/micro.c **** *****************************************************************************/
1003:../Xilinx_src/micro.c **** #ifdef  XSVF_SUPPORT_COMPRESSION
1004:../Xilinx_src/micro.c **** void xsvfDoSDRMasking( lenVal*  plvTdi,
1005:../Xilinx_src/micro.c ****                        lenVal*  plvNextData,
1006:../Xilinx_src/micro.c ****                        lenVal*  plvAddressMask,
1007:../Xilinx_src/micro.c ****                        lenVal*  plvDataMask )
1008:../Xilinx_src/micro.c **** {
 1124              		.loc 1 1008 0
 1125              		.cfi_startproc
 1126              		@ args = 0, pretend = 0, frame = 32
 1127              		@ frame_needed = 1, uses_anonymous_args = 0
 1128 0000 00482DE9 		stmfd	sp!, {fp, lr}
 1129              	.LCFI16:
 1130              		.cfi_def_cfa_offset 8
 1131 0004 04B08DE2 		add	fp, sp, #4
 1132              		.cfi_offset 14, -4
 1133              		.cfi_offset 11, -8
 1134              	.LCFI17:
 1135              		.cfi_def_cfa 11, 4
 1136 0008 20D04DE2 		sub	sp, sp, #32
 1137 000c 18000BE5 		str	r0, [fp, #-24]
 1138 0010 1C100BE5 		str	r1, [fp, #-28]
 1139 0014 20200BE5 		str	r2, [fp, #-32]
 1140 0018 24300BE5 		str	r3, [fp, #-36]
1009:../Xilinx_src/micro.c ****     int             i;
1010:../Xilinx_src/micro.c ****     unsigned char   ucTdi;
1011:../Xilinx_src/micro.c ****     unsigned char   ucTdiMask;
1012:../Xilinx_src/micro.c ****     unsigned char   ucDataMask;
1013:../Xilinx_src/micro.c ****     unsigned char   ucNextData;
1014:../Xilinx_src/micro.c ****     unsigned char   ucNextMask;
1015:../Xilinx_src/micro.c ****     short           sNextData;
1016:../Xilinx_src/micro.c **** 
1017:../Xilinx_src/micro.c ****     /* add the address Mask to dataVal and return as a new dataVal */
1018:../Xilinx_src/micro.c ****     addVal( plvTdi, plvTdi, plvAddressMask );
 1141              		.loc 1 1018 0
 1142 001c 18001BE5 		ldr	r0, [fp, #-24]
 1143 0020 18101BE5 		ldr	r1, [fp, #-24]
 1144 0024 20201BE5 		ldr	r2, [fp, #-32]
 1145 0028 FEFFFFEB 		bl	addVal
1019:../Xilinx_src/micro.c **** 
1020:../Xilinx_src/micro.c ****     ucNextData  = 0;
 1146              		.loc 1 1020 0
 1147 002c 0030A0E3 		mov	r3, #0
 1148 0030 0C304BE5 		strb	r3, [fp, #-12]
1021:../Xilinx_src/micro.c ****     ucNextMask  = 0;
 1149              		.loc 1 1021 0
 1150 0034 0030A0E3 		mov	r3, #0
 1151 0038 0D304BE5 		strb	r3, [fp, #-13]
1022:../Xilinx_src/micro.c ****     sNextData   = plvNextData->len;
 1152              		.loc 1 1022 0
 1153 003c 1C301BE5 		ldr	r3, [fp, #-28]
 1154 0040 B030D3E1 		ldrh	r3, [r3, #0]	@ movhi
 1155 0044 B0314BE1 		strh	r3, [fp, #-16]	@ movhi
1023:../Xilinx_src/micro.c ****     for ( i = plvDataMask->len - 1; i >= 0; --i )
 1156              		.loc 1 1023 0
 1157 0048 24301BE5 		ldr	r3, [fp, #-36]
 1158 004c B030D3E1 		ldrh	r3, [r3, #0]
 1159 0050 0338A0E1 		mov	r3, r3, asl #16
 1160 0054 4338A0E1 		mov	r3, r3, asr #16
 1161 0058 013043E2 		sub	r3, r3, #1
 1162 005c 08300BE5 		str	r3, [fp, #-8]
 1163 0060 4A0000EA 		b	.L76
 1164              	.L84:
1024:../Xilinx_src/micro.c ****     {
1025:../Xilinx_src/micro.c ****         /* Go through data mask in reverse order looking for mask (1) bits */
1026:../Xilinx_src/micro.c ****         ucDataMask  = plvDataMask->val[ i ];
 1165              		.loc 1 1026 0
 1166 0064 24201BE5 		ldr	r2, [fp, #-36]
 1167 0068 08301BE5 		ldr	r3, [fp, #-8]
 1168 006c 033082E0 		add	r3, r2, r3
 1169 0070 0230D3E5 		ldrb	r3, [r3, #2]
 1170 0074 0B304BE5 		strb	r3, [fp, #-11]
1027:../Xilinx_src/micro.c ****         if ( ucDataMask )
 1171              		.loc 1 1027 0
 1172 0078 0B305BE5 		ldrb	r3, [fp, #-11]	@ zero_extendqisi2
 1173 007c 000053E3 		cmp	r3, #0
 1174 0080 3F00000A 		beq	.L77
1028:../Xilinx_src/micro.c ****         {
1029:../Xilinx_src/micro.c ****             /* Retrieve the corresponding TDI byte value */
1030:../Xilinx_src/micro.c ****             ucTdi       = plvTdi->val[ i ];
 1175              		.loc 1 1030 0
 1176 0084 18201BE5 		ldr	r2, [fp, #-24]
 1177 0088 08301BE5 		ldr	r3, [fp, #-8]
 1178 008c 033082E0 		add	r3, r2, r3
 1179 0090 0230D3E5 		ldrb	r3, [r3, #2]
 1180 0094 09304BE5 		strb	r3, [fp, #-9]
1031:../Xilinx_src/micro.c **** 
1032:../Xilinx_src/micro.c ****             /* For each bit in the data mask byte, look for 1's */
1033:../Xilinx_src/micro.c ****             ucTdiMask   = 1;
 1181              		.loc 1 1033 0
 1182 0098 0130A0E3 		mov	r3, #1
 1183 009c 0A304BE5 		strb	r3, [fp, #-10]
1034:../Xilinx_src/micro.c ****             while ( ucDataMask )
 1184              		.loc 1 1034 0
 1185 00a0 2F0000EA 		b	.L78
 1186              	.L83:
1035:../Xilinx_src/micro.c ****             {
1036:../Xilinx_src/micro.c ****                 if ( ucDataMask & 1 )
 1187              		.loc 1 1036 0
 1188 00a4 0B305BE5 		ldrb	r3, [fp, #-11]	@ zero_extendqisi2
 1189 00a8 013003E2 		and	r3, r3, #1
 1190 00ac FF3003E2 		and	r3, r3, #255
 1191 00b0 000053E3 		cmp	r3, #0
 1192 00b4 2400000A 		beq	.L79
1037:../Xilinx_src/micro.c ****                 {
1038:../Xilinx_src/micro.c ****                     if ( !ucNextMask )
 1193              		.loc 1 1038 0
 1194 00b8 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 1195 00bc 000053E3 		cmp	r3, #0
 1196 00c0 0B00001A 		bne	.L80
1039:../Xilinx_src/micro.c ****                     {
1040:../Xilinx_src/micro.c ****                         /* Get the next data byte */
1041:../Xilinx_src/micro.c ****                         ucNextData  = plvNextData->val[ --sNextData ];
 1197              		.loc 1 1041 0
 1198 00c4 B0315BE1 		ldrh	r3, [fp, #-16]	@ movhi
 1199 00c8 013043E2 		sub	r3, r3, #1
 1200 00cc B0314BE1 		strh	r3, [fp, #-16]	@ movhi
 1201 00d0 F0215BE1 		ldrsh	r2, [fp, #-16]
 1202 00d4 1C101BE5 		ldr	r1, [fp, #-28]
 1203 00d8 0230A0E3 		mov	r3, #2
 1204 00dc 022081E0 		add	r2, r1, r2
 1205 00e0 033082E0 		add	r3, r2, r3
 1206 00e4 0030D3E5 		ldrb	r3, [r3, #0]
 1207 00e8 0C304BE5 		strb	r3, [fp, #-12]
1042:../Xilinx_src/micro.c ****                         ucNextMask  = 1;
 1208              		.loc 1 1042 0
 1209 00ec 0130A0E3 		mov	r3, #1
 1210 00f0 0D304BE5 		strb	r3, [fp, #-13]
 1211              	.L80:
1043:../Xilinx_src/micro.c ****                     }
1044:../Xilinx_src/micro.c **** 
1045:../Xilinx_src/micro.c ****                     /* Set or clear the data bit according to the next data */
1046:../Xilinx_src/micro.c ****                     if ( ucNextData & ucNextMask )
 1212              		.loc 1 1046 0
 1213 00f4 0C205BE5 		ldrb	r2, [fp, #-12]
 1214 00f8 0D305BE5 		ldrb	r3, [fp, #-13]
 1215 00fc 033002E0 		and	r3, r2, r3
 1216 0100 FF3003E2 		and	r3, r3, #255
 1217 0104 000053E3 		cmp	r3, #0
 1218 0108 0400000A 		beq	.L81
1047:../Xilinx_src/micro.c ****                     {
1048:../Xilinx_src/micro.c ****                         ucTdi   |= ucTdiMask;       /* Set bit */
 1219              		.loc 1 1048 0
 1220 010c 09205BE5 		ldrb	r2, [fp, #-9]
 1221 0110 0A305BE5 		ldrb	r3, [fp, #-10]
 1222 0114 033082E1 		orr	r3, r2, r3
 1223 0118 09304BE5 		strb	r3, [fp, #-9]
 1224 011c 070000EA 		b	.L82
 1225              	.L81:
1049:../Xilinx_src/micro.c ****                     }
1050:../Xilinx_src/micro.c ****                     else
1051:../Xilinx_src/micro.c ****                     {
1052:../Xilinx_src/micro.c ****                         ucTdi   &= ( ~ucTdiMask );  /* Clear bit */
 1226              		.loc 1 1052 0
 1227 0120 0A305BE5 		ldrb	r3, [fp, #-10]
 1228 0124 0330E0E1 		mvn	r3, r3
 1229 0128 FF3003E2 		and	r3, r3, #255
 1230 012c FF2003E2 		and	r2, r3, #255
 1231 0130 09305BE5 		ldrb	r3, [fp, #-9]	@ zero_extendqisi2
 1232 0134 033002E0 		and	r3, r2, r3
 1233 0138 FF3003E2 		and	r3, r3, #255
 1234 013c 09304BE5 		strb	r3, [fp, #-9]
 1235              	.L82:
1053:../Xilinx_src/micro.c ****                     }
1054:../Xilinx_src/micro.c **** 
1055:../Xilinx_src/micro.c ****                     /* Update the next data */
1056:../Xilinx_src/micro.c ****                     ucNextMask  <<= 1;
 1236              		.loc 1 1056 0
 1237 0140 0D305BE5 		ldrb	r3, [fp, #-13]
 1238 0144 8330A0E1 		mov	r3, r3, asl #1
 1239 0148 0D304BE5 		strb	r3, [fp, #-13]
 1240              	.L79:
1057:../Xilinx_src/micro.c ****                 }
1058:../Xilinx_src/micro.c ****                 ucTdiMask   <<= 1;
 1241              		.loc 1 1058 0
 1242 014c 0A305BE5 		ldrb	r3, [fp, #-10]
 1243 0150 8330A0E1 		mov	r3, r3, asl #1
 1244 0154 0A304BE5 		strb	r3, [fp, #-10]
1059:../Xilinx_src/micro.c ****                 ucDataMask  >>= 1;
 1245              		.loc 1 1059 0
 1246 0158 0B305BE5 		ldrb	r3, [fp, #-11]	@ zero_extendqisi2
 1247 015c A330A0E1 		mov	r3, r3, lsr #1
 1248 0160 0B304BE5 		strb	r3, [fp, #-11]
 1249              	.L78:
1034:../Xilinx_src/micro.c ****             while ( ucDataMask )
 1250              		.loc 1 1034 0 discriminator 1
 1251 0164 0B305BE5 		ldrb	r3, [fp, #-11]	@ zero_extendqisi2
 1252 0168 000053E3 		cmp	r3, #0
 1253 016c CCFFFF1A 		bne	.L83
1060:../Xilinx_src/micro.c ****             }
1061:../Xilinx_src/micro.c **** 
1062:../Xilinx_src/micro.c ****             /* Update the TDI value */
1063:../Xilinx_src/micro.c ****             plvTdi->val[ i ]    = ucTdi;
 1254              		.loc 1 1063 0
 1255 0170 18201BE5 		ldr	r2, [fp, #-24]
 1256 0174 08301BE5 		ldr	r3, [fp, #-8]
 1257 0178 033082E0 		add	r3, r2, r3
 1258 017c 09205BE5 		ldrb	r2, [fp, #-9]
 1259 0180 0220C3E5 		strb	r2, [r3, #2]
 1260              	.L77:
1023:../Xilinx_src/micro.c ****     for ( i = plvDataMask->len - 1; i >= 0; --i )
 1261              		.loc 1 1023 0
 1262 0184 08301BE5 		ldr	r3, [fp, #-8]
 1263 0188 013043E2 		sub	r3, r3, #1
 1264 018c 08300BE5 		str	r3, [fp, #-8]
 1265              	.L76:
1023:../Xilinx_src/micro.c ****     for ( i = plvDataMask->len - 1; i >= 0; --i )
 1266              		.loc 1 1023 0 is_stmt 0 discriminator 1
 1267 0190 08301BE5 		ldr	r3, [fp, #-8]
 1268 0194 000053E3 		cmp	r3, #0
 1269 0198 B1FFFFAA 		bge	.L84
1064:../Xilinx_src/micro.c ****         }
1065:../Xilinx_src/micro.c ****     }
1066:../Xilinx_src/micro.c **** }
 1270              		.loc 1 1066 0 is_stmt 1
 1271 019c 04D04BE2 		sub	sp, fp, #4
 1272 01a0 0088BDE8 		ldmfd	sp!, {fp, pc}
 1273              		.cfi_endproc
 1274              	.LFE8:
 1276              		.section	.text.xsvfDoIllegalCmd,"ax",%progbits
 1277              		.align	2
 1278              		.global	xsvfDoIllegalCmd
 1280              	xsvfDoIllegalCmd:
 1281              	.LFB9:
1067:../Xilinx_src/micro.c **** #endif  /* XSVF_SUPPORT_COMPRESSION */
1068:../Xilinx_src/micro.c **** 
1069:../Xilinx_src/micro.c **** /*============================================================================
1070:../Xilinx_src/micro.c **** * XSVF Command Functions (type = TXsvfDoCmdFuncPtr)
1071:../Xilinx_src/micro.c **** * These functions update pXsvfInfo->iErrorCode only on an error.
1072:../Xilinx_src/micro.c **** * Otherwise, the error code is left alone.
1073:../Xilinx_src/micro.c **** * The function returns the error code from the function.
1074:../Xilinx_src/micro.c **** ============================================================================*/
1075:../Xilinx_src/micro.c **** 
1076:../Xilinx_src/micro.c **** /*****************************************************************************
1077:../Xilinx_src/micro.c **** * Function:     xsvfDoIllegalCmd
1078:../Xilinx_src/micro.c **** * Description:  Function place holder for illegal/unsupported commands.
1079:../Xilinx_src/micro.c **** * Parameters:   pXsvfInfo   - XSVF information pointer.
1080:../Xilinx_src/micro.c **** * Returns:      int         - 0 = success;  non-zero = error.
1081:../Xilinx_src/micro.c **** *****************************************************************************/
1082:../Xilinx_src/micro.c **** int xsvfDoIllegalCmd( SXsvfInfo* pXsvfInfo )
1083:../Xilinx_src/micro.c **** {
 1282              		.loc 1 1083 0
 1283              		.cfi_startproc
 1284              		@ args = 0, pretend = 0, frame = 8
 1285              		@ frame_needed = 1, uses_anonymous_args = 0
 1286              		@ link register save eliminated.
 1287 0000 04B02DE5 		str	fp, [sp, #-4]!
 1288              	.LCFI18:
 1289              		.cfi_def_cfa_offset 4
 1290 0004 00B08DE2 		add	fp, sp, #0
 1291              		.cfi_offset 11, -4
 1292              	.LCFI19:
 1293              		.cfi_def_cfa_register 11
 1294 0008 0CD04DE2 		sub	sp, sp, #12
 1295 000c 08000BE5 		str	r0, [fp, #-8]
1084:../Xilinx_src/micro.c ****     XSVFDBG_PRINTF2( 0, "ERROR:  Encountered unsupported command #%d (%s)\n",
1085:../Xilinx_src/micro.c ****                      ((unsigned int)(pXsvfInfo->ucCommand)),
1086:../Xilinx_src/micro.c ****                      ((pXsvfInfo->ucCommand < XLASTCMD)
1087:../Xilinx_src/micro.c ****                       ? (xsvf_pzCommandName[pXsvfInfo->ucCommand])
1088:../Xilinx_src/micro.c ****                       : "Unknown") );
1089:../Xilinx_src/micro.c ****     pXsvfInfo->iErrorCode   = XSVF_ERROR_ILLEGALCMD;
 1296              		.loc 1 1089 0
 1297 0010 08301BE5 		ldr	r3, [fp, #-8]
 1298 0014 0420A0E3 		mov	r2, #4
 1299 0018 082083E5 		str	r2, [r3, #8]
1090:../Xilinx_src/micro.c ****     return( pXsvfInfo->iErrorCode );
 1300              		.loc 1 1090 0
 1301 001c 08301BE5 		ldr	r3, [fp, #-8]
 1302 0020 083093E5 		ldr	r3, [r3, #8]
1091:../Xilinx_src/micro.c **** }
 1303              		.loc 1 1091 0
 1304 0024 0300A0E1 		mov	r0, r3
 1305 0028 00D08BE2 		add	sp, fp, #0
 1306 002c 04B09DE4 		ldmfd	sp!, {fp}
 1307 0030 1EFF2FE1 		bx	lr
 1308              		.cfi_endproc
 1309              	.LFE9:
 1311              		.section	.text.xsvfDoXCOMPLETE,"ax",%progbits
 1312              		.align	2
 1313              		.global	xsvfDoXCOMPLETE
 1315              	xsvfDoXCOMPLETE:
 1316              	.LFB10:
1092:../Xilinx_src/micro.c **** 
1093:../Xilinx_src/micro.c **** /*****************************************************************************
1094:../Xilinx_src/micro.c **** * Function:     xsvfDoXCOMPLETE
1095:../Xilinx_src/micro.c **** * Description:  XCOMPLETE (no parameters)
1096:../Xilinx_src/micro.c **** *               Update complete status for XSVF player.
1097:../Xilinx_src/micro.c **** * Parameters:   pXsvfInfo   - XSVF information pointer.
1098:../Xilinx_src/micro.c **** * Returns:      int         - 0 = success;  non-zero = error.
1099:../Xilinx_src/micro.c **** *****************************************************************************/
1100:../Xilinx_src/micro.c **** int xsvfDoXCOMPLETE( SXsvfInfo* pXsvfInfo )
1101:../Xilinx_src/micro.c **** {
 1317              		.loc 1 1101 0
 1318              		.cfi_startproc
 1319              		@ args = 0, pretend = 0, frame = 8
 1320              		@ frame_needed = 1, uses_anonymous_args = 0
 1321              		@ link register save eliminated.
 1322 0000 04B02DE5 		str	fp, [sp, #-4]!
 1323              	.LCFI20:
 1324              		.cfi_def_cfa_offset 4
 1325 0004 00B08DE2 		add	fp, sp, #0
 1326              		.cfi_offset 11, -4
 1327              	.LCFI21:
 1328              		.cfi_def_cfa_register 11
 1329 0008 0CD04DE2 		sub	sp, sp, #12
 1330 000c 08000BE5 		str	r0, [fp, #-8]
1102:../Xilinx_src/micro.c ****     pXsvfInfo->ucComplete   = 1;
 1331              		.loc 1 1102 0
 1332 0010 08301BE5 		ldr	r3, [fp, #-8]
 1333 0014 0120A0E3 		mov	r2, #1
 1334 0018 0020C3E5 		strb	r2, [r3, #0]
1103:../Xilinx_src/micro.c ****     return( XSVF_ERROR_NONE );
 1335              		.loc 1 1103 0
 1336 001c 0030A0E3 		mov	r3, #0
1104:../Xilinx_src/micro.c **** }
 1337              		.loc 1 1104 0
 1338 0020 0300A0E1 		mov	r0, r3
 1339 0024 00D08BE2 		add	sp, fp, #0
 1340 0028 04B09DE4 		ldmfd	sp!, {fp}
 1341 002c 1EFF2FE1 		bx	lr
 1342              		.cfi_endproc
 1343              	.LFE10:
 1345              		.section	.text.xsvfDoXTDOMASK,"ax",%progbits
 1346              		.align	2
 1347              		.global	xsvfDoXTDOMASK
 1349              	xsvfDoXTDOMASK:
 1350              	.LFB11:
1105:../Xilinx_src/micro.c **** 
1106:../Xilinx_src/micro.c **** /*****************************************************************************
1107:../Xilinx_src/micro.c **** * Function:     xsvfDoXTDOMASK
1108:../Xilinx_src/micro.c **** * Description:  XTDOMASK <lenVal.TdoMask[XSDRSIZE]>
1109:../Xilinx_src/micro.c **** *               Prespecify the TDO compare mask.
1110:../Xilinx_src/micro.c **** * Parameters:   pXsvfInfo   - XSVF information pointer.
1111:../Xilinx_src/micro.c **** * Returns:      int         - 0 = success;  non-zero = error.
1112:../Xilinx_src/micro.c **** *****************************************************************************/
1113:../Xilinx_src/micro.c **** int xsvfDoXTDOMASK( SXsvfInfo* pXsvfInfo )
1114:../Xilinx_src/micro.c **** {
 1351              		.loc 1 1114 0
 1352              		.cfi_startproc
 1353              		@ args = 0, pretend = 0, frame = 8
 1354              		@ frame_needed = 1, uses_anonymous_args = 0
 1355 0000 00482DE9 		stmfd	sp!, {fp, lr}
 1356              	.LCFI22:
 1357              		.cfi_def_cfa_offset 8
 1358 0004 04B08DE2 		add	fp, sp, #4
 1359              		.cfi_offset 14, -4
 1360              		.cfi_offset 11, -8
 1361              	.LCFI23:
 1362              		.cfi_def_cfa 11, 4
 1363 0008 08D04DE2 		sub	sp, sp, #8
 1364 000c 08000BE5 		str	r0, [fp, #-8]
1115:../Xilinx_src/micro.c ****     readVal( &(pXsvfInfo->lvTdoMask), pXsvfInfo->sShiftLengthBytes );
 1365              		.loc 1 1115 0
 1366 0010 08301BE5 		ldr	r3, [fp, #-8]
 1367 0014 063B83E2 		add	r3, r3, #6144
 1368 0018 263083E2 		add	r3, r3, #38
 1369 001c 08201BE5 		ldr	r2, [fp, #-8]
 1370 0020 B821D2E1 		ldrh	r2, [r2, #24]
 1371 0024 0228A0E1 		mov	r2, r2, asl #16
 1372 0028 4228A0E1 		mov	r2, r2, asr #16
 1373 002c 0300A0E1 		mov	r0, r3
 1374 0030 0210A0E1 		mov	r1, r2
 1375 0034 FEFFFFEB 		bl	readVal
1116:../Xilinx_src/micro.c ****     XSVFDBG_PRINTF( 4, "    TDO Mask     = ");
1117:../Xilinx_src/micro.c ****     XSVFDBG_PRINTLENVAL( 4, &(pXsvfInfo->lvTdoMask) );
1118:../Xilinx_src/micro.c ****     XSVFDBG_PRINTF( 4, "\n");
1119:../Xilinx_src/micro.c ****     return( XSVF_ERROR_NONE );
 1376              		.loc 1 1119 0
 1377 0038 0030A0E3 		mov	r3, #0
1120:../Xilinx_src/micro.c **** }
 1378              		.loc 1 1120 0
 1379 003c 0300A0E1 		mov	r0, r3
 1380 0040 04D04BE2 		sub	sp, fp, #4
 1381 0044 0088BDE8 		ldmfd	sp!, {fp, pc}
 1382              		.cfi_endproc
 1383              	.LFE11:
 1385              		.section	.text.xsvfDoXSIR,"ax",%progbits
 1386              		.align	2
 1387              		.global	xsvfDoXSIR
 1389              	xsvfDoXSIR:
 1390              	.LFB12:
1121:../Xilinx_src/micro.c **** 
1122:../Xilinx_src/micro.c **** /*****************************************************************************
1123:../Xilinx_src/micro.c **** * Function:     xsvfDoXSIR
1124:../Xilinx_src/micro.c **** * Description:  XSIR <(byte)shiftlen> <lenVal.TDI[shiftlen]>
1125:../Xilinx_src/micro.c **** *               Get the instruction and shift the instruction into the TAP.
1126:../Xilinx_src/micro.c **** *               If prespecified XRUNTEST!=0, goto RUNTEST and wait after
1127:../Xilinx_src/micro.c **** *               the shift for XRUNTEST usec.
1128:../Xilinx_src/micro.c **** * Parameters:   pXsvfInfo   - XSVF information pointer.
1129:../Xilinx_src/micro.c **** * Returns:      int         - 0 = success;  non-zero = error.
1130:../Xilinx_src/micro.c **** *****************************************************************************/
1131:../Xilinx_src/micro.c **** int xsvfDoXSIR( SXsvfInfo* pXsvfInfo )
1132:../Xilinx_src/micro.c **** {
 1391              		.loc 1 1132 0
 1392              		.cfi_startproc
 1393              		@ args = 0, pretend = 0, frame = 16
 1394              		@ frame_needed = 1, uses_anonymous_args = 0
 1395 0000 10482DE9 		stmfd	sp!, {r4, fp, lr}
 1396              	.LCFI24:
 1397              		.cfi_def_cfa_offset 12
 1398 0004 08B08DE2 		add	fp, sp, #8
 1399              		.cfi_offset 14, -4
 1400              		.cfi_offset 11, -8
 1401              		.cfi_offset 4, -12
 1402              	.LCFI25:
 1403              		.cfi_def_cfa 11, 4
 1404 0008 2CD04DE2 		sub	sp, sp, #44
 1405 000c 18000BE5 		str	r0, [fp, #-24]
1133:../Xilinx_src/micro.c ****     unsigned char   ucShiftIrBits;
1134:../Xilinx_src/micro.c ****     short           sShiftIrBytes;
1135:../Xilinx_src/micro.c ****     int             iErrorCode;
1136:../Xilinx_src/micro.c **** 
1137:../Xilinx_src/micro.c ****     /* Get the shift length and store */
1138:../Xilinx_src/micro.c ****     readByte( &ucShiftIrBits );
 1406              		.loc 1 1138 0
 1407 0010 13304BE2 		sub	r3, fp, #19
 1408 0014 0300A0E1 		mov	r0, r3
 1409 0018 FEFFFFEB 		bl	readByte
1139:../Xilinx_src/micro.c ****     sShiftIrBytes   = xsvfGetAsNumBytes( ucShiftIrBits );
 1410              		.loc 1 1139 0
 1411 001c 13305BE5 		ldrb	r3, [fp, #-19]	@ zero_extendqisi2
 1412 0020 0300A0E1 		mov	r0, r3
 1413 0024 FEFFFFEB 		bl	xsvfGetAsNumBytes
 1414 0028 0030A0E1 		mov	r3, r0
 1415 002c B2314BE1 		strh	r3, [fp, #-18]	@ movhi
1140:../Xilinx_src/micro.c ****     XSVFDBG_PRINTF1( 3, "   XSIR length = %d\n",
1141:../Xilinx_src/micro.c ****                      ((unsigned int)ucShiftIrBits) );
1142:../Xilinx_src/micro.c **** 
1143:../Xilinx_src/micro.c ****     if ( sShiftIrBytes > MAX_LEN )
 1416              		.loc 1 1143 0
 1417 0030 F2315BE1 		ldrsh	r3, [fp, #-18]
 1418 0034 020B53E3 		cmp	r3, #2048
 1419 0038 020000DA 		ble	.L89
1144:../Xilinx_src/micro.c ****     {
1145:../Xilinx_src/micro.c ****         iErrorCode  = XSVF_ERROR_DATAOVERFLOW;
 1420              		.loc 1 1145 0
 1421 003c 0630A0E3 		mov	r3, #6
 1422 0040 10300BE5 		str	r3, [fp, #-16]
 1423 0044 200000EA 		b	.L90
 1424              	.L89:
1146:../Xilinx_src/micro.c ****     }
1147:../Xilinx_src/micro.c ****     else
1148:../Xilinx_src/micro.c ****     {
1149:../Xilinx_src/micro.c ****         /* Get and store instruction to shift in */
1150:../Xilinx_src/micro.c ****         readVal( &(pXsvfInfo->lvTdi), xsvfGetAsNumBytes( ucShiftIrBits ) );
 1425              		.loc 1 1150 0
 1426 0048 18301BE5 		ldr	r3, [fp, #-24]
 1427 004c 1A4083E2 		add	r4, r3, #26
 1428 0050 13305BE5 		ldrb	r3, [fp, #-19]	@ zero_extendqisi2
 1429 0054 0300A0E1 		mov	r0, r3
 1430 0058 FEFFFFEB 		bl	xsvfGetAsNumBytes
 1431 005c 0030A0E1 		mov	r3, r0
 1432 0060 0400A0E1 		mov	r0, r4
 1433 0064 0310A0E1 		mov	r1, r3
 1434 0068 FEFFFFEB 		bl	readVal
1151:../Xilinx_src/micro.c **** 
1152:../Xilinx_src/micro.c ****         /* Shift the data */
1153:../Xilinx_src/micro.c ****         iErrorCode  = xsvfShift( &(pXsvfInfo->ucTapState), XTAPSTATE_SHIFTIR,
 1435              		.loc 1 1153 0
 1436 006c 18301BE5 		ldr	r3, [fp, #-24]
 1437 0070 0C1083E2 		add	r1, r3, #12
 1438 0074 13305BE5 		ldrb	r3, [fp, #-19]	@ zero_extendqisi2
 1439 0078 0320A0E1 		mov	r2, r3
 1440 007c 18301BE5 		ldr	r3, [fp, #-24]
 1441 0080 1A3083E2 		add	r3, r3, #26
1154:../Xilinx_src/micro.c ****                                  ucShiftIrBits, &(pXsvfInfo->lvTdi),
1155:../Xilinx_src/micro.c ****                                  /*plvTdoCaptured*/0, /*plvTdoExpected*/0,
1156:../Xilinx_src/micro.c ****                                  /*plvTdoMask*/0, pXsvfInfo->ucEndIR,
 1442              		.loc 1 1156 0
 1443 0084 18001BE5 		ldr	r0, [fp, #-24]
1153:../Xilinx_src/micro.c ****         iErrorCode  = xsvfShift( &(pXsvfInfo->ucTapState), XTAPSTATE_SHIFTIR,
 1444              		.loc 1 1153 0
 1445 0088 0DC0D0E5 		ldrb	ip, [r0, #13]	@ zero_extendqisi2
1157:../Xilinx_src/micro.c ****                                  pXsvfInfo->lRunTestTime, /*ucMaxRepeat*/0 );
 1446              		.loc 1 1157 0
 1447 008c 18001BE5 		ldr	r0, [fp, #-24]
1153:../Xilinx_src/micro.c ****         iErrorCode  = xsvfShift( &(pXsvfInfo->ucTapState), XTAPSTATE_SHIFTIR,
 1448              		.loc 1 1153 0
 1449 0090 100090E5 		ldr	r0, [r0, #16]
 1450 0094 00E0A0E3 		mov	lr, #0
 1451 0098 00E08DE5 		str	lr, [sp, #0]
 1452 009c 00E0A0E3 		mov	lr, #0
 1453 00a0 04E08DE5 		str	lr, [sp, #4]
 1454 00a4 00E0A0E3 		mov	lr, #0
 1455 00a8 08E08DE5 		str	lr, [sp, #8]
 1456 00ac 0CC08DE5 		str	ip, [sp, #12]
 1457 00b0 10008DE5 		str	r0, [sp, #16]
 1458 00b4 0000A0E3 		mov	r0, #0
 1459 00b8 14008DE5 		str	r0, [sp, #20]
 1460 00bc 0100A0E1 		mov	r0, r1
 1461 00c0 0B10A0E3 		mov	r1, #11
 1462 00c4 FEFFFFEB 		bl	xsvfShift
 1463 00c8 10000BE5 		str	r0, [fp, #-16]
 1464              	.L90:
1158:../Xilinx_src/micro.c ****      }
1159:../Xilinx_src/micro.c **** 
1160:../Xilinx_src/micro.c ****     if ( iErrorCode != XSVF_ERROR_NONE )
 1465              		.loc 1 1160 0
 1466 00cc 10301BE5 		ldr	r3, [fp, #-16]
 1467 00d0 000053E3 		cmp	r3, #0
 1468 00d4 0200000A 		beq	.L91
1161:../Xilinx_src/micro.c ****     {
1162:../Xilinx_src/micro.c ****         pXsvfInfo->iErrorCode   = iErrorCode;
 1469              		.loc 1 1162 0
 1470 00d8 18301BE5 		ldr	r3, [fp, #-24]
 1471 00dc 10201BE5 		ldr	r2, [fp, #-16]
 1472 00e0 082083E5 		str	r2, [r3, #8]
 1473              	.L91:
1163:../Xilinx_src/micro.c ****     }
1164:../Xilinx_src/micro.c ****     return( iErrorCode );
 1474              		.loc 1 1164 0
 1475 00e4 10301BE5 		ldr	r3, [fp, #-16]
1165:../Xilinx_src/micro.c **** }
 1476              		.loc 1 1165 0
 1477 00e8 0300A0E1 		mov	r0, r3
 1478 00ec 08D04BE2 		sub	sp, fp, #8
 1479 00f0 1088BDE8 		ldmfd	sp!, {r4, fp, pc}
 1480              		.cfi_endproc
 1481              	.LFE12:
 1483              		.section	.text.xsvfDoXSIR2,"ax",%progbits
 1484              		.align	2
 1485              		.global	xsvfDoXSIR2
 1487              	xsvfDoXSIR2:
 1488              	.LFB13:
1166:../Xilinx_src/micro.c **** 
1167:../Xilinx_src/micro.c **** /*****************************************************************************
1168:../Xilinx_src/micro.c **** * Function:     xsvfDoXSIR2
1169:../Xilinx_src/micro.c **** * Description:  XSIR <(2-byte)shiftlen> <lenVal.TDI[shiftlen]>
1170:../Xilinx_src/micro.c **** *               Get the instruction and shift the instruction into the TAP.
1171:../Xilinx_src/micro.c **** *               If prespecified XRUNTEST!=0, goto RUNTEST and wait after
1172:../Xilinx_src/micro.c **** *               the shift for XRUNTEST usec.
1173:../Xilinx_src/micro.c **** * Parameters:   pXsvfInfo   - XSVF information pointer.
1174:../Xilinx_src/micro.c **** * Returns:      int         - 0 = success;  non-zero = error.
1175:../Xilinx_src/micro.c **** *****************************************************************************/
1176:../Xilinx_src/micro.c **** int xsvfDoXSIR2( SXsvfInfo* pXsvfInfo )
1177:../Xilinx_src/micro.c **** {
 1489              		.loc 1 1177 0
 1490              		.cfi_startproc
 1491              		@ args = 0, pretend = 0, frame = 24
 1492              		@ frame_needed = 1, uses_anonymous_args = 0
 1493 0000 10482DE9 		stmfd	sp!, {r4, fp, lr}
 1494              	.LCFI26:
 1495              		.cfi_def_cfa_offset 12
 1496 0004 08B08DE2 		add	fp, sp, #8
 1497              		.cfi_offset 14, -4
 1498              		.cfi_offset 11, -8
 1499              		.cfi_offset 4, -12
 1500              	.LCFI27:
 1501              		.cfi_def_cfa 11, 4
 1502 0008 34D04DE2 		sub	sp, sp, #52
 1503 000c 20000BE5 		str	r0, [fp, #-32]
1178:../Xilinx_src/micro.c ****     long            lShiftIrBits;
1179:../Xilinx_src/micro.c ****     short           sShiftIrBytes;
1180:../Xilinx_src/micro.c ****     int             iErrorCode;
1181:../Xilinx_src/micro.c **** 
1182:../Xilinx_src/micro.c ****     /* Get the shift length and store */
1183:../Xilinx_src/micro.c ****     readVal( &(pXsvfInfo->lvTdi), 2 );
 1504              		.loc 1 1183 0
 1505 0010 20301BE5 		ldr	r3, [fp, #-32]
 1506 0014 1A3083E2 		add	r3, r3, #26
 1507 0018 0300A0E1 		mov	r0, r3
 1508 001c 0210A0E3 		mov	r1, #2
 1509 0020 FEFFFFEB 		bl	readVal
1184:../Xilinx_src/micro.c ****     lShiftIrBits    = value( &(pXsvfInfo->lvTdi) );
 1510              		.loc 1 1184 0
 1511 0024 20301BE5 		ldr	r3, [fp, #-32]
 1512 0028 1A3083E2 		add	r3, r3, #26
 1513 002c 0300A0E1 		mov	r0, r3
 1514 0030 FEFFFFEB 		bl	value
 1515 0034 14000BE5 		str	r0, [fp, #-20]
1185:../Xilinx_src/micro.c ****     sShiftIrBytes   = xsvfGetAsNumBytes( lShiftIrBits );
 1516              		.loc 1 1185 0
 1517 0038 14001BE5 		ldr	r0, [fp, #-20]
 1518 003c FEFFFFEB 		bl	xsvfGetAsNumBytes
 1519 0040 0030A0E1 		mov	r3, r0
 1520 0044 B6314BE1 		strh	r3, [fp, #-22]	@ movhi
1186:../Xilinx_src/micro.c ****     XSVFDBG_PRINTF1( 3, "   XSIR2 length = %d\n", lShiftIrBits);
1187:../Xilinx_src/micro.c **** 
1188:../Xilinx_src/micro.c ****     if ( sShiftIrBytes > MAX_LEN )
 1521              		.loc 1 1188 0
 1522 0048 F6315BE1 		ldrsh	r3, [fp, #-22]
 1523 004c 020B53E3 		cmp	r3, #2048
 1524 0050 020000DA 		ble	.L93
1189:../Xilinx_src/micro.c ****     {
1190:../Xilinx_src/micro.c ****         iErrorCode  = XSVF_ERROR_DATAOVERFLOW;
 1525              		.loc 1 1190 0
 1526 0054 0630A0E3 		mov	r3, #6
 1527 0058 10300BE5 		str	r3, [fp, #-16]
 1528 005c 1E0000EA 		b	.L94
 1529              	.L93:
1191:../Xilinx_src/micro.c ****     }
1192:../Xilinx_src/micro.c ****     else
1193:../Xilinx_src/micro.c ****     {
1194:../Xilinx_src/micro.c ****         /* Get and store instruction to shift in */
1195:../Xilinx_src/micro.c ****         readVal( &(pXsvfInfo->lvTdi), xsvfGetAsNumBytes( lShiftIrBits ) );
 1530              		.loc 1 1195 0
 1531 0060 20301BE5 		ldr	r3, [fp, #-32]
 1532 0064 1A4083E2 		add	r4, r3, #26
 1533 0068 14001BE5 		ldr	r0, [fp, #-20]
 1534 006c FEFFFFEB 		bl	xsvfGetAsNumBytes
 1535 0070 0030A0E1 		mov	r3, r0
 1536 0074 0400A0E1 		mov	r0, r4
 1537 0078 0310A0E1 		mov	r1, r3
 1538 007c FEFFFFEB 		bl	readVal
1196:../Xilinx_src/micro.c **** 
1197:../Xilinx_src/micro.c ****         /* Shift the data */
1198:../Xilinx_src/micro.c ****         iErrorCode  = xsvfShift( &(pXsvfInfo->ucTapState), XTAPSTATE_SHIFTIR,
 1539              		.loc 1 1198 0
 1540 0080 20301BE5 		ldr	r3, [fp, #-32]
 1541 0084 0C2083E2 		add	r2, r3, #12
 1542 0088 20301BE5 		ldr	r3, [fp, #-32]
 1543 008c 1A3083E2 		add	r3, r3, #26
1199:../Xilinx_src/micro.c ****                                  lShiftIrBits, &(pXsvfInfo->lvTdi),
1200:../Xilinx_src/micro.c ****                                  /*plvTdoCaptured*/0, /*plvTdoExpected*/0,
1201:../Xilinx_src/micro.c ****                                  /*plvTdoMask*/0, pXsvfInfo->ucEndIR,
 1544              		.loc 1 1201 0
 1545 0090 20101BE5 		ldr	r1, [fp, #-32]
1198:../Xilinx_src/micro.c ****         iErrorCode  = xsvfShift( &(pXsvfInfo->ucTapState), XTAPSTATE_SHIFTIR,
 1546              		.loc 1 1198 0
 1547 0094 0D00D1E5 		ldrb	r0, [r1, #13]	@ zero_extendqisi2
1202:../Xilinx_src/micro.c ****                                  pXsvfInfo->lRunTestTime, /*ucMaxRepeat*/0 );
 1548              		.loc 1 1202 0
 1549 0098 20101BE5 		ldr	r1, [fp, #-32]
1198:../Xilinx_src/micro.c ****         iErrorCode  = xsvfShift( &(pXsvfInfo->ucTapState), XTAPSTATE_SHIFTIR,
 1550              		.loc 1 1198 0
 1551 009c 101091E5 		ldr	r1, [r1, #16]
 1552 00a0 00C0A0E3 		mov	ip, #0
 1553 00a4 00C08DE5 		str	ip, [sp, #0]
 1554 00a8 00C0A0E3 		mov	ip, #0
 1555 00ac 04C08DE5 		str	ip, [sp, #4]
 1556 00b0 00C0A0E3 		mov	ip, #0
 1557 00b4 08C08DE5 		str	ip, [sp, #8]
 1558 00b8 0C008DE5 		str	r0, [sp, #12]
 1559 00bc 10108DE5 		str	r1, [sp, #16]
 1560 00c0 0010A0E3 		mov	r1, #0
 1561 00c4 14108DE5 		str	r1, [sp, #20]
 1562 00c8 0200A0E1 		mov	r0, r2
 1563 00cc 0B10A0E3 		mov	r1, #11
 1564 00d0 14201BE5 		ldr	r2, [fp, #-20]
 1565 00d4 FEFFFFEB 		bl	xsvfShift
 1566 00d8 10000BE5 		str	r0, [fp, #-16]
 1567              	.L94:
1203:../Xilinx_src/micro.c ****     }
1204:../Xilinx_src/micro.c **** 
1205:../Xilinx_src/micro.c ****     if ( iErrorCode != XSVF_ERROR_NONE )
 1568              		.loc 1 1205 0
 1569 00dc 10301BE5 		ldr	r3, [fp, #-16]
 1570 00e0 000053E3 		cmp	r3, #0
 1571 00e4 0200000A 		beq	.L95
1206:../Xilinx_src/micro.c ****     {
1207:../Xilinx_src/micro.c ****         pXsvfInfo->iErrorCode   = iErrorCode;
 1572              		.loc 1 1207 0
 1573 00e8 20301BE5 		ldr	r3, [fp, #-32]
 1574 00ec 10201BE5 		ldr	r2, [fp, #-16]
 1575 00f0 082083E5 		str	r2, [r3, #8]
 1576              	.L95:
1208:../Xilinx_src/micro.c ****     }
1209:../Xilinx_src/micro.c ****     return( iErrorCode );
 1577              		.loc 1 1209 0
 1578 00f4 10301BE5 		ldr	r3, [fp, #-16]
1210:../Xilinx_src/micro.c **** }
 1579              		.loc 1 1210 0
 1580 00f8 0300A0E1 		mov	r0, r3
 1581 00fc 08D04BE2 		sub	sp, fp, #8
 1582 0100 1088BDE8 		ldmfd	sp!, {r4, fp, pc}
 1583              		.cfi_endproc
 1584              	.LFE13:
 1586              		.section	.text.xsvfDoXSDR,"ax",%progbits
 1587              		.align	2
 1588              		.global	xsvfDoXSDR
 1590              	xsvfDoXSDR:
 1591              	.LFB14:
1211:../Xilinx_src/micro.c **** 
1212:../Xilinx_src/micro.c **** /*****************************************************************************
1213:../Xilinx_src/micro.c **** * Function:     xsvfDoXSDR
1214:../Xilinx_src/micro.c **** * Description:  XSDR <lenVal.TDI[XSDRSIZE]>
1215:../Xilinx_src/micro.c **** *               Shift the given TDI data into the JTAG scan chain.
1216:../Xilinx_src/micro.c **** *               Compare the captured TDO with the expected TDO from the
1217:../Xilinx_src/micro.c **** *               previous XSDRTDO command using the previously specified
1218:../Xilinx_src/micro.c **** *               XTDOMASK.
1219:../Xilinx_src/micro.c **** * Parameters:   pXsvfInfo   - XSVF information pointer.
1220:../Xilinx_src/micro.c **** * Returns:      int         - 0 = success;  non-zero = error.
1221:../Xilinx_src/micro.c **** *****************************************************************************/
1222:../Xilinx_src/micro.c **** int xsvfDoXSDR( SXsvfInfo* pXsvfInfo )
1223:../Xilinx_src/micro.c **** {
 1592              		.loc 1 1223 0
 1593              		.cfi_startproc
 1594              		@ args = 0, pretend = 0, frame = 16
 1595              		@ frame_needed = 1, uses_anonymous_args = 0
 1596 0000 70482DE9 		stmfd	sp!, {r4, r5, r6, fp, lr}
 1597              	.LCFI28:
 1598              		.cfi_def_cfa_offset 20
 1599 0004 10B08DE2 		add	fp, sp, #16
 1600              		.cfi_offset 14, -4
 1601              		.cfi_offset 11, -8
 1602              		.cfi_offset 6, -12
 1603              		.cfi_offset 5, -16
 1604              		.cfi_offset 4, -20
 1605              	.LCFI29:
 1606              		.cfi_def_cfa 11, 4
 1607 0008 2CD04DE2 		sub	sp, sp, #44
 1608 000c 20000BE5 		str	r0, [fp, #-32]
1224:../Xilinx_src/micro.c ****     int iErrorCode;
1225:../Xilinx_src/micro.c ****     readVal( &(pXsvfInfo->lvTdi), pXsvfInfo->sShiftLengthBytes );
 1609              		.loc 1 1225 0
 1610 0010 20301BE5 		ldr	r3, [fp, #-32]
 1611 0014 1A2083E2 		add	r2, r3, #26
 1612 0018 20301BE5 		ldr	r3, [fp, #-32]
 1613 001c B831D3E1 		ldrh	r3, [r3, #24]
 1614 0020 0338A0E1 		mov	r3, r3, asl #16
 1615 0024 4338A0E1 		mov	r3, r3, asr #16
 1616 0028 0200A0E1 		mov	r0, r2
 1617 002c 0310A0E1 		mov	r1, r3
 1618 0030 FEFFFFEB 		bl	readVal
1226:../Xilinx_src/micro.c ****     /* use TDOExpected from last XSDRTDO instruction */
1227:../Xilinx_src/micro.c ****     iErrorCode  = xsvfShift( &(pXsvfInfo->ucTapState), XTAPSTATE_SHIFTDR,
 1619              		.loc 1 1227 0
 1620 0034 20301BE5 		ldr	r3, [fp, #-32]
 1621 0038 0C0083E2 		add	r0, r3, #12
1228:../Xilinx_src/micro.c ****                              pXsvfInfo->lShiftLengthBits, &(pXsvfInfo->lvTdi),
 1622              		.loc 1 1228 0
 1623 003c 20301BE5 		ldr	r3, [fp, #-32]
1227:../Xilinx_src/micro.c ****     iErrorCode  = xsvfShift( &(pXsvfInfo->ucTapState), XTAPSTATE_SHIFTDR,
 1624              		.loc 1 1227 0
 1625 0040 14E093E5 		ldr	lr, [r3, #20]
 1626 0044 20301BE5 		ldr	r3, [fp, #-32]
 1627 0048 1AC083E2 		add	ip, r3, #26
 1628 004c 20301BE5 		ldr	r3, [fp, #-32]
 1629 0050 011A83E2 		add	r1, r3, #4096
 1630 0054 221081E2 		add	r1, r1, #34
 1631 0058 20301BE5 		ldr	r3, [fp, #-32]
 1632 005c 812E83E2 		add	r2, r3, #2064
 1633 0060 0E2082E2 		add	r2, r2, #14
 1634 0064 20301BE5 		ldr	r3, [fp, #-32]
 1635 0068 063B83E2 		add	r3, r3, #6144
 1636 006c 263083E2 		add	r3, r3, #38
1229:../Xilinx_src/micro.c ****                              &(pXsvfInfo->lvTdoCaptured),
1230:../Xilinx_src/micro.c ****                              &(pXsvfInfo->lvTdoExpected),
1231:../Xilinx_src/micro.c ****                              &(pXsvfInfo->lvTdoMask), pXsvfInfo->ucEndDR,
 1637              		.loc 1 1231 0
 1638 0070 20401BE5 		ldr	r4, [fp, #-32]
1227:../Xilinx_src/micro.c ****     iErrorCode  = xsvfShift( &(pXsvfInfo->ucTapState), XTAPSTATE_SHIFTDR,
 1639              		.loc 1 1227 0
 1640 0074 0E60D4E5 		ldrb	r6, [r4, #14]	@ zero_extendqisi2
1232:../Xilinx_src/micro.c ****                              pXsvfInfo->lRunTestTime, pXsvfInfo->ucMaxRepeat );
 1641              		.loc 1 1232 0
 1642 0078 20401BE5 		ldr	r4, [fp, #-32]
1227:../Xilinx_src/micro.c ****     iErrorCode  = xsvfShift( &(pXsvfInfo->ucTapState), XTAPSTATE_SHIFTDR,
 1643              		.loc 1 1227 0
 1644 007c 105094E5 		ldr	r5, [r4, #16]
 1645              		.loc 1 1232 0
 1646 0080 20401BE5 		ldr	r4, [fp, #-32]
1227:../Xilinx_src/micro.c ****     iErrorCode  = xsvfShift( &(pXsvfInfo->ucTapState), XTAPSTATE_SHIFTDR,
 1647              		.loc 1 1227 0
 1648 0084 0F40D4E5 		ldrb	r4, [r4, #15]	@ zero_extendqisi2
 1649 0088 00108DE5 		str	r1, [sp, #0]
 1650 008c 04208DE5 		str	r2, [sp, #4]
 1651 0090 08308DE5 		str	r3, [sp, #8]
 1652 0094 0C608DE5 		str	r6, [sp, #12]
 1653 0098 10508DE5 		str	r5, [sp, #16]
 1654 009c 14408DE5 		str	r4, [sp, #20]
 1655 00a0 0410A0E3 		mov	r1, #4
 1656 00a4 0E20A0E1 		mov	r2, lr
 1657 00a8 0C30A0E1 		mov	r3, ip
 1658 00ac FEFFFFEB 		bl	xsvfShift
 1659 00b0 18000BE5 		str	r0, [fp, #-24]
1233:../Xilinx_src/micro.c ****     if ( iErrorCode != XSVF_ERROR_NONE )
 1660              		.loc 1 1233 0
 1661 00b4 18301BE5 		ldr	r3, [fp, #-24]
 1662 00b8 000053E3 		cmp	r3, #0
 1663 00bc 0200000A 		beq	.L97
1234:../Xilinx_src/micro.c ****     {
1235:../Xilinx_src/micro.c ****         pXsvfInfo->iErrorCode   = iErrorCode;
 1664              		.loc 1 1235 0
 1665 00c0 20301BE5 		ldr	r3, [fp, #-32]
 1666 00c4 18201BE5 		ldr	r2, [fp, #-24]
 1667 00c8 082083E5 		str	r2, [r3, #8]
 1668              	.L97:
1236:../Xilinx_src/micro.c ****     }
1237:../Xilinx_src/micro.c ****     return( iErrorCode );
 1669              		.loc 1 1237 0
 1670 00cc 18301BE5 		ldr	r3, [fp, #-24]
1238:../Xilinx_src/micro.c **** }
 1671              		.loc 1 1238 0
 1672 00d0 0300A0E1 		mov	r0, r3
 1673 00d4 10D04BE2 		sub	sp, fp, #16
 1674 00d8 7088BDE8 		ldmfd	sp!, {r4, r5, r6, fp, pc}
 1675              		.cfi_endproc
 1676              	.LFE14:
 1678              		.section	.text.xsvfDoXRUNTEST,"ax",%progbits
 1679              		.align	2
 1680              		.global	xsvfDoXRUNTEST
 1682              	xsvfDoXRUNTEST:
 1683              	.LFB15:
1239:../Xilinx_src/micro.c **** 
1240:../Xilinx_src/micro.c **** /*****************************************************************************
1241:../Xilinx_src/micro.c **** * Function:     xsvfDoXRUNTEST
1242:../Xilinx_src/micro.c **** * Description:  XRUNTEST <uint32>
1243:../Xilinx_src/micro.c **** *               Prespecify the XRUNTEST wait time for shift operations.
1244:../Xilinx_src/micro.c **** * Parameters:   pXsvfInfo   - XSVF information pointer.
1245:../Xilinx_src/micro.c **** * Returns:      int         - 0 = success;  non-zero = error.
1246:../Xilinx_src/micro.c **** *****************************************************************************/
1247:../Xilinx_src/micro.c **** int xsvfDoXRUNTEST( SXsvfInfo* pXsvfInfo )
1248:../Xilinx_src/micro.c **** {
 1684              		.loc 1 1248 0
 1685              		.cfi_startproc
 1686              		@ args = 0, pretend = 0, frame = 8
 1687              		@ frame_needed = 1, uses_anonymous_args = 0
 1688 0000 00482DE9 		stmfd	sp!, {fp, lr}
 1689              	.LCFI30:
 1690              		.cfi_def_cfa_offset 8
 1691 0004 04B08DE2 		add	fp, sp, #4
 1692              		.cfi_offset 14, -4
 1693              		.cfi_offset 11, -8
 1694              	.LCFI31:
 1695              		.cfi_def_cfa 11, 4
 1696 0008 08D04DE2 		sub	sp, sp, #8
 1697 000c 08000BE5 		str	r0, [fp, #-8]
1249:../Xilinx_src/micro.c ****     readVal( &(pXsvfInfo->lvTdi), 4 );
 1698              		.loc 1 1249 0
 1699 0010 08301BE5 		ldr	r3, [fp, #-8]
 1700 0014 1A3083E2 		add	r3, r3, #26
 1701 0018 0300A0E1 		mov	r0, r3
 1702 001c 0410A0E3 		mov	r1, #4
 1703 0020 FEFFFFEB 		bl	readVal
1250:../Xilinx_src/micro.c ****     pXsvfInfo->lRunTestTime = value( &(pXsvfInfo->lvTdi) );
 1704              		.loc 1 1250 0
 1705 0024 08301BE5 		ldr	r3, [fp, #-8]
 1706 0028 1A3083E2 		add	r3, r3, #26
 1707 002c 0300A0E1 		mov	r0, r3
 1708 0030 FEFFFFEB 		bl	value
 1709 0034 0020A0E1 		mov	r2, r0
 1710 0038 08301BE5 		ldr	r3, [fp, #-8]
 1711 003c 102083E5 		str	r2, [r3, #16]
1251:../Xilinx_src/micro.c ****     XSVFDBG_PRINTF1( 3, "   XRUNTEST = %d\n", pXsvfInfo->lRunTestTime );
1252:../Xilinx_src/micro.c ****     return( XSVF_ERROR_NONE );
 1712              		.loc 1 1252 0
 1713 0040 0030A0E3 		mov	r3, #0
1253:../Xilinx_src/micro.c **** }
 1714              		.loc 1 1253 0
 1715 0044 0300A0E1 		mov	r0, r3
 1716 0048 04D04BE2 		sub	sp, fp, #4
 1717 004c 0088BDE8 		ldmfd	sp!, {fp, pc}
 1718              		.cfi_endproc
 1719              	.LFE15:
 1721              		.section	.text.xsvfDoXREPEAT,"ax",%progbits
 1722              		.align	2
 1723              		.global	xsvfDoXREPEAT
 1725              	xsvfDoXREPEAT:
 1726              	.LFB16:
1254:../Xilinx_src/micro.c **** 
1255:../Xilinx_src/micro.c **** /*****************************************************************************
1256:../Xilinx_src/micro.c **** * Function:     xsvfDoXREPEAT
1257:../Xilinx_src/micro.c **** * Description:  XREPEAT <byte>
1258:../Xilinx_src/micro.c **** *               Prespecify the maximum number of XC9500/XL retries.
1259:../Xilinx_src/micro.c **** * Parameters:   pXsvfInfo   - XSVF information pointer.
1260:../Xilinx_src/micro.c **** * Returns:      int         - 0 = success;  non-zero = error.
1261:../Xilinx_src/micro.c **** *****************************************************************************/
1262:../Xilinx_src/micro.c **** int xsvfDoXREPEAT( SXsvfInfo* pXsvfInfo )
1263:../Xilinx_src/micro.c **** {
 1727              		.loc 1 1263 0
 1728              		.cfi_startproc
 1729              		@ args = 0, pretend = 0, frame = 8
 1730              		@ frame_needed = 1, uses_anonymous_args = 0
 1731 0000 00482DE9 		stmfd	sp!, {fp, lr}
 1732              	.LCFI32:
 1733              		.cfi_def_cfa_offset 8
 1734 0004 04B08DE2 		add	fp, sp, #4
 1735              		.cfi_offset 14, -4
 1736              		.cfi_offset 11, -8
 1737              	.LCFI33:
 1738              		.cfi_def_cfa 11, 4
 1739 0008 08D04DE2 		sub	sp, sp, #8
 1740 000c 08000BE5 		str	r0, [fp, #-8]
1264:../Xilinx_src/micro.c ****     readByte( &(pXsvfInfo->ucMaxRepeat) );
 1741              		.loc 1 1264 0
 1742 0010 08301BE5 		ldr	r3, [fp, #-8]
 1743 0014 0F3083E2 		add	r3, r3, #15
 1744 0018 0300A0E1 		mov	r0, r3
 1745 001c FEFFFFEB 		bl	readByte
1265:../Xilinx_src/micro.c ****     XSVFDBG_PRINTF1( 3, "   XREPEAT = %d\n",
1266:../Xilinx_src/micro.c ****                      ((unsigned int)(pXsvfInfo->ucMaxRepeat)) );
1267:../Xilinx_src/micro.c ****     return( XSVF_ERROR_NONE );
 1746              		.loc 1 1267 0
 1747 0020 0030A0E3 		mov	r3, #0
1268:../Xilinx_src/micro.c **** }
 1748              		.loc 1 1268 0
 1749 0024 0300A0E1 		mov	r0, r3
 1750 0028 04D04BE2 		sub	sp, fp, #4
 1751 002c 0088BDE8 		ldmfd	sp!, {fp, pc}
 1752              		.cfi_endproc
 1753              	.LFE16:
 1755              		.section	.text.xsvfDoXSDRSIZE,"ax",%progbits
 1756              		.align	2
 1757              		.global	xsvfDoXSDRSIZE
 1759              	xsvfDoXSDRSIZE:
 1760              	.LFB17:
1269:../Xilinx_src/micro.c **** 
1270:../Xilinx_src/micro.c **** /*****************************************************************************
1271:../Xilinx_src/micro.c **** * Function:     xsvfDoXSDRSIZE
1272:../Xilinx_src/micro.c **** * Description:  XSDRSIZE <uint32>
1273:../Xilinx_src/micro.c **** *               Prespecify the XRUNTEST wait time for shift operations.
1274:../Xilinx_src/micro.c **** * Parameters:   pXsvfInfo   - XSVF information pointer.
1275:../Xilinx_src/micro.c **** * Returns:      int         - 0 = success;  non-zero = error.
1276:../Xilinx_src/micro.c **** *****************************************************************************/
1277:../Xilinx_src/micro.c **** int xsvfDoXSDRSIZE( SXsvfInfo* pXsvfInfo )
1278:../Xilinx_src/micro.c **** {
 1761              		.loc 1 1278 0
 1762              		.cfi_startproc
 1763              		@ args = 0, pretend = 0, frame = 16
 1764              		@ frame_needed = 1, uses_anonymous_args = 0
 1765 0000 00482DE9 		stmfd	sp!, {fp, lr}
 1766              	.LCFI34:
 1767              		.cfi_def_cfa_offset 8
 1768 0004 04B08DE2 		add	fp, sp, #4
 1769              		.cfi_offset 14, -4
 1770              		.cfi_offset 11, -8
 1771              	.LCFI35:
 1772              		.cfi_def_cfa 11, 4
 1773 0008 10D04DE2 		sub	sp, sp, #16
 1774 000c 10000BE5 		str	r0, [fp, #-16]
1279:../Xilinx_src/micro.c ****     int iErrorCode;
1280:../Xilinx_src/micro.c ****     iErrorCode  = XSVF_ERROR_NONE;
 1775              		.loc 1 1280 0
 1776 0010 0030A0E3 		mov	r3, #0
 1777 0014 08300BE5 		str	r3, [fp, #-8]
1281:../Xilinx_src/micro.c ****     readVal( &(pXsvfInfo->lvTdi), 4 );
 1778              		.loc 1 1281 0
 1779 0018 10301BE5 		ldr	r3, [fp, #-16]
 1780 001c 1A3083E2 		add	r3, r3, #26
 1781 0020 0300A0E1 		mov	r0, r3
 1782 0024 0410A0E3 		mov	r1, #4
 1783 0028 FEFFFFEB 		bl	readVal
1282:../Xilinx_src/micro.c ****     pXsvfInfo->lShiftLengthBits = value( &(pXsvfInfo->lvTdi) );
 1784              		.loc 1 1282 0
 1785 002c 10301BE5 		ldr	r3, [fp, #-16]
 1786 0030 1A3083E2 		add	r3, r3, #26
 1787 0034 0300A0E1 		mov	r0, r3
 1788 0038 FEFFFFEB 		bl	value
 1789 003c 0020A0E1 		mov	r2, r0
 1790 0040 10301BE5 		ldr	r3, [fp, #-16]
 1791 0044 142083E5 		str	r2, [r3, #20]
1283:../Xilinx_src/micro.c ****     pXsvfInfo->sShiftLengthBytes= xsvfGetAsNumBytes( pXsvfInfo->lShiftLengthBits );
 1792              		.loc 1 1283 0
 1793 0048 10301BE5 		ldr	r3, [fp, #-16]
 1794 004c 143093E5 		ldr	r3, [r3, #20]
 1795 0050 0300A0E1 		mov	r0, r3
 1796 0054 FEFFFFEB 		bl	xsvfGetAsNumBytes
 1797 0058 0030A0E1 		mov	r3, r0
 1798 005c 0320A0E1 		mov	r2, r3
 1799 0060 10301BE5 		ldr	r3, [fp, #-16]
 1800 0064 B821C3E1 		strh	r2, [r3, #24]	@ movhi
1284:../Xilinx_src/micro.c ****     XSVFDBG_PRINTF1( 3, "   XSDRSIZE = %d\n", pXsvfInfo->lShiftLengthBits );
1285:../Xilinx_src/micro.c ****     if ( pXsvfInfo->sShiftLengthBytes > MAX_LEN )
 1801              		.loc 1 1285 0
 1802 0068 10301BE5 		ldr	r3, [fp, #-16]
 1803 006c B831D3E1 		ldrh	r3, [r3, #24]
 1804 0070 0338A0E1 		mov	r3, r3, asl #16
 1805 0074 4338A0E1 		mov	r3, r3, asr #16
 1806 0078 020B53E3 		cmp	r3, #2048
 1807 007c 040000DA 		ble	.L101
1286:../Xilinx_src/micro.c ****     {
1287:../Xilinx_src/micro.c ****         iErrorCode  = XSVF_ERROR_DATAOVERFLOW;
 1808              		.loc 1 1287 0
 1809 0080 0630A0E3 		mov	r3, #6
 1810 0084 08300BE5 		str	r3, [fp, #-8]
1288:../Xilinx_src/micro.c ****         pXsvfInfo->iErrorCode   = iErrorCode;
 1811              		.loc 1 1288 0
 1812 0088 10301BE5 		ldr	r3, [fp, #-16]
 1813 008c 08201BE5 		ldr	r2, [fp, #-8]
 1814 0090 082083E5 		str	r2, [r3, #8]
 1815              	.L101:
1289:../Xilinx_src/micro.c ****     }
1290:../Xilinx_src/micro.c ****     return( iErrorCode );
 1816              		.loc 1 1290 0
 1817 0094 08301BE5 		ldr	r3, [fp, #-8]
1291:../Xilinx_src/micro.c **** }
 1818              		.loc 1 1291 0
 1819 0098 0300A0E1 		mov	r0, r3
 1820 009c 04D04BE2 		sub	sp, fp, #4
 1821 00a0 0088BDE8 		ldmfd	sp!, {fp, pc}
 1822              		.cfi_endproc
 1823              	.LFE17:
 1825              		.section	.text.xsvfDoXSDRTDO,"ax",%progbits
 1826              		.align	2
 1827              		.global	xsvfDoXSDRTDO
 1829              	xsvfDoXSDRTDO:
 1830              	.LFB18:
1292:../Xilinx_src/micro.c **** 
1293:../Xilinx_src/micro.c **** /*****************************************************************************
1294:../Xilinx_src/micro.c **** * Function:     xsvfDoXSDRTDO
1295:../Xilinx_src/micro.c **** * Description:  XSDRTDO <lenVal.TDI[XSDRSIZE]> <lenVal.TDO[XSDRSIZE]>
1296:../Xilinx_src/micro.c **** *               Get the TDI and expected TDO values.  Then, shift.
1297:../Xilinx_src/micro.c **** *               Compare the expected TDO with the captured TDO using the
1298:../Xilinx_src/micro.c **** *               prespecified XTDOMASK.
1299:../Xilinx_src/micro.c **** * Parameters:   pXsvfInfo   - XSVF information pointer.
1300:../Xilinx_src/micro.c **** * Returns:      int         - 0 = success;  non-zero = error.
1301:../Xilinx_src/micro.c **** *****************************************************************************/
1302:../Xilinx_src/micro.c **** int xsvfDoXSDRTDO( SXsvfInfo* pXsvfInfo )
1303:../Xilinx_src/micro.c **** {
 1831              		.loc 1 1303 0
 1832              		.cfi_startproc
 1833              		@ args = 0, pretend = 0, frame = 16
 1834              		@ frame_needed = 1, uses_anonymous_args = 0
 1835 0000 F0482DE9 		stmfd	sp!, {r4, r5, r6, r7, fp, lr}
 1836              	.LCFI36:
 1837              		.cfi_def_cfa_offset 24
 1838 0004 14B08DE2 		add	fp, sp, #20
 1839              		.cfi_offset 14, -4
 1840              		.cfi_offset 11, -8
 1841              		.cfi_offset 7, -12
 1842              		.cfi_offset 6, -16
 1843              		.cfi_offset 5, -20
 1844              		.cfi_offset 4, -24
 1845              	.LCFI37:
 1846              		.cfi_def_cfa 11, 4
 1847 0008 28D04DE2 		sub	sp, sp, #40
 1848 000c 20000BE5 		str	r0, [fp, #-32]
1304:../Xilinx_src/micro.c ****     int iErrorCode;
1305:../Xilinx_src/micro.c ****     iErrorCode  = xsvfBasicXSDRTDO( &(pXsvfInfo->ucTapState),
 1849              		.loc 1 1305 0
 1850 0010 20301BE5 		ldr	r3, [fp, #-32]
 1851 0014 0C0083E2 		add	r0, r3, #12
1306:../Xilinx_src/micro.c ****                                     pXsvfInfo->lShiftLengthBits,
 1852              		.loc 1 1306 0
 1853 0018 20301BE5 		ldr	r3, [fp, #-32]
1305:../Xilinx_src/micro.c ****     iErrorCode  = xsvfBasicXSDRTDO( &(pXsvfInfo->ucTapState),
 1854              		.loc 1 1305 0
 1855 001c 144093E5 		ldr	r4, [r3, #20]
1307:../Xilinx_src/micro.c ****                                     pXsvfInfo->sShiftLengthBytes,
 1856              		.loc 1 1307 0
 1857 0020 20301BE5 		ldr	r3, [fp, #-32]
1305:../Xilinx_src/micro.c ****     iErrorCode  = xsvfBasicXSDRTDO( &(pXsvfInfo->ucTapState),
 1858              		.loc 1 1305 0
 1859 0024 B8E1D3E1 		ldrh	lr, [r3, #24]
 1860 0028 20301BE5 		ldr	r3, [fp, #-32]
 1861 002c 1AC083E2 		add	ip, r3, #26
 1862 0030 20301BE5 		ldr	r3, [fp, #-32]
 1863 0034 011A83E2 		add	r1, r3, #4096
 1864 0038 221081E2 		add	r1, r1, #34
 1865 003c 20301BE5 		ldr	r3, [fp, #-32]
 1866 0040 812E83E2 		add	r2, r3, #2064
 1867 0044 0E2082E2 		add	r2, r2, #14
 1868 0048 20301BE5 		ldr	r3, [fp, #-32]
 1869 004c 063B83E2 		add	r3, r3, #6144
 1870 0050 263083E2 		add	r3, r3, #38
1308:../Xilinx_src/micro.c ****                                     &(pXsvfInfo->lvTdi),
1309:../Xilinx_src/micro.c ****                                     &(pXsvfInfo->lvTdoCaptured),
1310:../Xilinx_src/micro.c ****                                     &(pXsvfInfo->lvTdoExpected),
1311:../Xilinx_src/micro.c ****                                     &(pXsvfInfo->lvTdoMask),
1312:../Xilinx_src/micro.c ****                                     pXsvfInfo->ucEndDR,
 1871              		.loc 1 1312 0
 1872 0054 20501BE5 		ldr	r5, [fp, #-32]
1305:../Xilinx_src/micro.c ****     iErrorCode  = xsvfBasicXSDRTDO( &(pXsvfInfo->ucTapState),
 1873              		.loc 1 1305 0
 1874 0058 0E70D5E5 		ldrb	r7, [r5, #14]	@ zero_extendqisi2
1313:../Xilinx_src/micro.c ****                                     pXsvfInfo->lRunTestTime,
 1875              		.loc 1 1313 0
 1876 005c 20501BE5 		ldr	r5, [fp, #-32]
1305:../Xilinx_src/micro.c ****     iErrorCode  = xsvfBasicXSDRTDO( &(pXsvfInfo->ucTapState),
 1877              		.loc 1 1305 0
 1878 0060 106095E5 		ldr	r6, [r5, #16]
1314:../Xilinx_src/micro.c ****                                     pXsvfInfo->ucMaxRepeat );
 1879              		.loc 1 1314 0
 1880 0064 20501BE5 		ldr	r5, [fp, #-32]
1305:../Xilinx_src/micro.c ****     iErrorCode  = xsvfBasicXSDRTDO( &(pXsvfInfo->ucTapState),
 1881              		.loc 1 1305 0
 1882 0068 0F50D5E5 		ldrb	r5, [r5, #15]	@ zero_extendqisi2
 1883 006c 0EE8A0E1 		mov	lr, lr, asl #16
 1884 0070 4EE8A0E1 		mov	lr, lr, asr #16
 1885 0074 00108DE5 		str	r1, [sp, #0]
 1886 0078 04208DE5 		str	r2, [sp, #4]
 1887 007c 08308DE5 		str	r3, [sp, #8]
 1888 0080 0C708DE5 		str	r7, [sp, #12]
 1889 0084 10608DE5 		str	r6, [sp, #16]
 1890 0088 14508DE5 		str	r5, [sp, #20]
 1891 008c 0410A0E1 		mov	r1, r4
 1892 0090 0E20A0E1 		mov	r2, lr
 1893 0094 0C30A0E1 		mov	r3, ip
 1894 0098 FEFFFFEB 		bl	xsvfBasicXSDRTDO
 1895 009c 18000BE5 		str	r0, [fp, #-24]
1315:../Xilinx_src/micro.c ****     if ( iErrorCode != XSVF_ERROR_NONE )
 1896              		.loc 1 1315 0
 1897 00a0 18301BE5 		ldr	r3, [fp, #-24]
 1898 00a4 000053E3 		cmp	r3, #0
 1899 00a8 0200000A 		beq	.L103
1316:../Xilinx_src/micro.c ****     {
1317:../Xilinx_src/micro.c ****         pXsvfInfo->iErrorCode   = iErrorCode;
 1900              		.loc 1 1317 0
 1901 00ac 20301BE5 		ldr	r3, [fp, #-32]
 1902 00b0 18201BE5 		ldr	r2, [fp, #-24]
 1903 00b4 082083E5 		str	r2, [r3, #8]
 1904              	.L103:
1318:../Xilinx_src/micro.c ****     }
1319:../Xilinx_src/micro.c ****     return( iErrorCode );
 1905              		.loc 1 1319 0
 1906 00b8 18301BE5 		ldr	r3, [fp, #-24]
1320:../Xilinx_src/micro.c **** }
 1907              		.loc 1 1320 0
 1908 00bc 0300A0E1 		mov	r0, r3
 1909 00c0 14D04BE2 		sub	sp, fp, #20
 1910 00c4 F088BDE8 		ldmfd	sp!, {r4, r5, r6, r7, fp, pc}
 1911              		.cfi_endproc
 1912              	.LFE18:
 1914              		.section	.text.xsvfDoXSETSDRMASKS,"ax",%progbits
 1915              		.align	2
 1916              		.global	xsvfDoXSETSDRMASKS
 1918              	xsvfDoXSETSDRMASKS:
 1919              	.LFB19:
1321:../Xilinx_src/micro.c **** 
1322:../Xilinx_src/micro.c **** /*****************************************************************************
1323:../Xilinx_src/micro.c **** * Function:     xsvfDoXSETSDRMASKS
1324:../Xilinx_src/micro.c **** * Description:  XSETSDRMASKS <lenVal.AddressMask[XSDRSIZE]>
1325:../Xilinx_src/micro.c **** *                            <lenVal.DataMask[XSDRSIZE]>
1326:../Xilinx_src/micro.c **** *               Get the prespecified address and data mask for the XSDRINC
1327:../Xilinx_src/micro.c **** *               command.
1328:../Xilinx_src/micro.c **** *               Used for xc9500/xl compressed XSVF data.
1329:../Xilinx_src/micro.c **** * Parameters:   pXsvfInfo   - XSVF information pointer.
1330:../Xilinx_src/micro.c **** * Returns:      int         - 0 = success;  non-zero = error.
1331:../Xilinx_src/micro.c **** *****************************************************************************/
1332:../Xilinx_src/micro.c **** #ifdef  XSVF_SUPPORT_COMPRESSION
1333:../Xilinx_src/micro.c **** int xsvfDoXSETSDRMASKS( SXsvfInfo* pXsvfInfo )
1334:../Xilinx_src/micro.c **** {
 1920              		.loc 1 1334 0
 1921              		.cfi_startproc
 1922              		@ args = 0, pretend = 0, frame = 8
 1923              		@ frame_needed = 1, uses_anonymous_args = 0
 1924 0000 00482DE9 		stmfd	sp!, {fp, lr}
 1925              	.LCFI38:
 1926              		.cfi_def_cfa_offset 8
 1927 0004 04B08DE2 		add	fp, sp, #4
 1928              		.cfi_offset 14, -4
 1929              		.cfi_offset 11, -8
 1930              	.LCFI39:
 1931              		.cfi_def_cfa 11, 4
 1932 0008 08D04DE2 		sub	sp, sp, #8
 1933 000c 08000BE5 		str	r0, [fp, #-8]
1335:../Xilinx_src/micro.c ****     /* read the addressMask */
1336:../Xilinx_src/micro.c ****     readVal( &(pXsvfInfo->lvAddressMask), pXsvfInfo->sShiftLengthBytes );
 1934              		.loc 1 1336 0
 1935 0010 08301BE5 		ldr	r3, [fp, #-8]
 1936 0014 023A83E2 		add	r3, r3, #8192
 1937 0018 2A3083E2 		add	r3, r3, #42
 1938 001c 08201BE5 		ldr	r2, [fp, #-8]
 1939 0020 B821D2E1 		ldrh	r2, [r2, #24]
 1940 0024 0228A0E1 		mov	r2, r2, asl #16
 1941 0028 4228A0E1 		mov	r2, r2, asr #16
 1942 002c 0300A0E1 		mov	r0, r3
 1943 0030 0210A0E1 		mov	r1, r2
 1944 0034 FEFFFFEB 		bl	readVal
1337:../Xilinx_src/micro.c ****     /* read the dataMask    */
1338:../Xilinx_src/micro.c ****     readVal( &(pXsvfInfo->lvDataMask), pXsvfInfo->sShiftLengthBytes );
 1945              		.loc 1 1338 0
 1946 0038 08301BE5 		ldr	r3, [fp, #-8]
 1947 003c 0A3B83E2 		add	r3, r3, #10240
 1948 0040 2E3083E2 		add	r3, r3, #46
 1949 0044 08201BE5 		ldr	r2, [fp, #-8]
 1950 0048 B821D2E1 		ldrh	r2, [r2, #24]
 1951 004c 0228A0E1 		mov	r2, r2, asl #16
 1952 0050 4228A0E1 		mov	r2, r2, asr #16
 1953 0054 0300A0E1 		mov	r0, r3
 1954 0058 0210A0E1 		mov	r1, r2
 1955 005c FEFFFFEB 		bl	readVal
1339:../Xilinx_src/micro.c **** 
1340:../Xilinx_src/micro.c ****     XSVFDBG_PRINTF( 4, "    Address Mask = " );
1341:../Xilinx_src/micro.c ****     XSVFDBG_PRINTLENVAL( 4, &(pXsvfInfo->lvAddressMask) );
1342:../Xilinx_src/micro.c ****     XSVFDBG_PRINTF( 4, "\n" );
1343:../Xilinx_src/micro.c ****     XSVFDBG_PRINTF( 4, "    Data Mask    = " );
1344:../Xilinx_src/micro.c ****     XSVFDBG_PRINTLENVAL( 4, &(pXsvfInfo->lvDataMask) );
1345:../Xilinx_src/micro.c ****     XSVFDBG_PRINTF( 4, "\n" );
1346:../Xilinx_src/micro.c **** 
1347:../Xilinx_src/micro.c ****     return( XSVF_ERROR_NONE );
 1956              		.loc 1 1347 0
 1957 0060 0030A0E3 		mov	r3, #0
1348:../Xilinx_src/micro.c **** }
 1958              		.loc 1 1348 0
 1959 0064 0300A0E1 		mov	r0, r3
 1960 0068 04D04BE2 		sub	sp, fp, #4
 1961 006c 0088BDE8 		ldmfd	sp!, {fp, pc}
 1962              		.cfi_endproc
 1963              	.LFE19:
 1965              		.section	.text.xsvfDoXSDRINC,"ax",%progbits
 1966              		.align	2
 1967              		.global	xsvfDoXSDRINC
 1969              	xsvfDoXSDRINC:
 1970              	.LFB20:
1349:../Xilinx_src/micro.c **** #endif  /* XSVF_SUPPORT_COMPRESSION */
1350:../Xilinx_src/micro.c **** 
1351:../Xilinx_src/micro.c **** /*****************************************************************************
1352:../Xilinx_src/micro.c **** * Function:     xsvfDoXSDRINC
1353:../Xilinx_src/micro.c **** * Description:  XSDRINC <lenVal.firstTDI[XSDRSIZE]> <byte(numTimes)>
1354:../Xilinx_src/micro.c **** *                       <lenVal.data[XSETSDRMASKS.dataMask.len]> ...
1355:../Xilinx_src/micro.c **** *               Get the XSDRINC parameters and execute the XSDRINC command.
1356:../Xilinx_src/micro.c **** *               XSDRINC starts by loading the first TDI shift value.
1357:../Xilinx_src/micro.c **** *               Then, for numTimes, XSDRINC gets the next piece of data,
1358:../Xilinx_src/micro.c **** *               replaces the bits from the starting TDI as defined by the
1359:../Xilinx_src/micro.c **** *               XSETSDRMASKS.dataMask, adds the address mask from
1360:../Xilinx_src/micro.c **** *               XSETSDRMASKS.addressMask, shifts the new TDI value,
1361:../Xilinx_src/micro.c **** *               and compares the TDO to the expected TDO from the previous
1362:../Xilinx_src/micro.c **** *               XSDRTDO command using the XTDOMASK.
1363:../Xilinx_src/micro.c **** *               Used for xc9500/xl compressed XSVF data.
1364:../Xilinx_src/micro.c **** * Parameters:   pXsvfInfo   - XSVF information pointer.
1365:../Xilinx_src/micro.c **** * Returns:      int         - 0 = success;  non-zero = error.
1366:../Xilinx_src/micro.c **** *****************************************************************************/
1367:../Xilinx_src/micro.c **** #ifdef  XSVF_SUPPORT_COMPRESSION
1368:../Xilinx_src/micro.c **** int xsvfDoXSDRINC( SXsvfInfo* pXsvfInfo )
1369:../Xilinx_src/micro.c **** {
 1971              		.loc 1 1369 0
 1972              		.cfi_startproc
 1973              		@ args = 0, pretend = 0, frame = 24
 1974              		@ frame_needed = 1, uses_anonymous_args = 0
 1975 0000 70482DE9 		stmfd	sp!, {r4, r5, r6, fp, lr}
 1976              	.LCFI40:
 1977              		.cfi_def_cfa_offset 20
 1978 0004 10B08DE2 		add	fp, sp, #16
 1979              		.cfi_offset 14, -4
 1980              		.cfi_offset 11, -8
 1981              		.cfi_offset 6, -12
 1982              		.cfi_offset 5, -16
 1983              		.cfi_offset 4, -20
 1984              	.LCFI41:
 1985              		.cfi_def_cfa 11, 4
 1986 0008 34D04DE2 		sub	sp, sp, #52
 1987 000c 28000BE5 		str	r0, [fp, #-40]
1370:../Xilinx_src/micro.c ****     int             iErrorCode;
1371:../Xilinx_src/micro.c ****     int             iDataMaskLen;
1372:../Xilinx_src/micro.c ****     unsigned char   ucDataMask;
1373:../Xilinx_src/micro.c ****     unsigned char   ucNumTimes;
1374:../Xilinx_src/micro.c ****     unsigned char   i;
1375:../Xilinx_src/micro.c **** 
1376:../Xilinx_src/micro.c ****     readVal( &(pXsvfInfo->lvTdi), pXsvfInfo->sShiftLengthBytes );
 1988              		.loc 1 1376 0
 1989 0010 28301BE5 		ldr	r3, [fp, #-40]
 1990 0014 1A2083E2 		add	r2, r3, #26
 1991 0018 28301BE5 		ldr	r3, [fp, #-40]
 1992 001c B831D3E1 		ldrh	r3, [r3, #24]
 1993 0020 0338A0E1 		mov	r3, r3, asl #16
 1994 0024 4338A0E1 		mov	r3, r3, asr #16
 1995 0028 0200A0E1 		mov	r0, r2
 1996 002c 0310A0E1 		mov	r1, r3
 1997 0030 FEFFFFEB 		bl	readVal
1377:../Xilinx_src/micro.c ****     iErrorCode  = xsvfShift( &(pXsvfInfo->ucTapState), XTAPSTATE_SHIFTDR,
 1998              		.loc 1 1377 0
 1999 0034 28301BE5 		ldr	r3, [fp, #-40]
 2000 0038 0C0083E2 		add	r0, r3, #12
1378:../Xilinx_src/micro.c ****                              pXsvfInfo->lShiftLengthBits,
 2001              		.loc 1 1378 0
 2002 003c 28301BE5 		ldr	r3, [fp, #-40]
1377:../Xilinx_src/micro.c ****     iErrorCode  = xsvfShift( &(pXsvfInfo->ucTapState), XTAPSTATE_SHIFTDR,
 2003              		.loc 1 1377 0
 2004 0040 14E093E5 		ldr	lr, [r3, #20]
 2005 0044 28301BE5 		ldr	r3, [fp, #-40]
 2006 0048 1AC083E2 		add	ip, r3, #26
 2007 004c 28301BE5 		ldr	r3, [fp, #-40]
 2008 0050 011A83E2 		add	r1, r3, #4096
 2009 0054 221081E2 		add	r1, r1, #34
 2010 0058 28301BE5 		ldr	r3, [fp, #-40]
 2011 005c 812E83E2 		add	r2, r3, #2064
 2012 0060 0E2082E2 		add	r2, r2, #14
 2013 0064 28301BE5 		ldr	r3, [fp, #-40]
 2014 0068 063B83E2 		add	r3, r3, #6144
 2015 006c 263083E2 		add	r3, r3, #38
1379:../Xilinx_src/micro.c ****                              &(pXsvfInfo->lvTdi), &(pXsvfInfo->lvTdoCaptured),
1380:../Xilinx_src/micro.c ****                              &(pXsvfInfo->lvTdoExpected),
1381:../Xilinx_src/micro.c ****                              &(pXsvfInfo->lvTdoMask), pXsvfInfo->ucEndDR,
 2016              		.loc 1 1381 0
 2017 0070 28401BE5 		ldr	r4, [fp, #-40]
1377:../Xilinx_src/micro.c ****     iErrorCode  = xsvfShift( &(pXsvfInfo->ucTapState), XTAPSTATE_SHIFTDR,
 2018              		.loc 1 1377 0
 2019 0074 0E60D4E5 		ldrb	r6, [r4, #14]	@ zero_extendqisi2
1382:../Xilinx_src/micro.c ****                              pXsvfInfo->lRunTestTime, pXsvfInfo->ucMaxRepeat );
 2020              		.loc 1 1382 0
 2021 0078 28401BE5 		ldr	r4, [fp, #-40]
1377:../Xilinx_src/micro.c ****     iErrorCode  = xsvfShift( &(pXsvfInfo->ucTapState), XTAPSTATE_SHIFTDR,
 2022              		.loc 1 1377 0
 2023 007c 105094E5 		ldr	r5, [r4, #16]
 2024              		.loc 1 1382 0
 2025 0080 28401BE5 		ldr	r4, [fp, #-40]
1377:../Xilinx_src/micro.c ****     iErrorCode  = xsvfShift( &(pXsvfInfo->ucTapState), XTAPSTATE_SHIFTDR,
 2026              		.loc 1 1377 0
 2027 0084 0F40D4E5 		ldrb	r4, [r4, #15]	@ zero_extendqisi2
 2028 0088 00108DE5 		str	r1, [sp, #0]
 2029 008c 04208DE5 		str	r2, [sp, #4]
 2030 0090 08308DE5 		str	r3, [sp, #8]
 2031 0094 0C608DE5 		str	r6, [sp, #12]
 2032 0098 10508DE5 		str	r5, [sp, #16]
 2033 009c 14408DE5 		str	r4, [sp, #20]
 2034 00a0 0410A0E3 		mov	r1, #4
 2035 00a4 0E20A0E1 		mov	r2, lr
 2036 00a8 0C30A0E1 		mov	r3, ip
 2037 00ac FEFFFFEB 		bl	xsvfShift
 2038 00b0 18000BE5 		str	r0, [fp, #-24]
1383:../Xilinx_src/micro.c ****     if ( !iErrorCode )
 2039              		.loc 1 1383 0
 2040 00b4 18301BE5 		ldr	r3, [fp, #-24]
 2041 00b8 000053E3 		cmp	r3, #0
 2042 00bc 6700001A 		bne	.L106
1384:../Xilinx_src/micro.c ****     {
1385:../Xilinx_src/micro.c ****         /* Calculate number of data mask bits */
1386:../Xilinx_src/micro.c ****         iDataMaskLen    = 0;
 2043              		.loc 1 1386 0
 2044 00c0 0030A0E3 		mov	r3, #0
 2045 00c4 1C300BE5 		str	r3, [fp, #-28]
1387:../Xilinx_src/micro.c ****         for ( i = 0; i < pXsvfInfo->lvDataMask.len; ++i )
 2046              		.loc 1 1387 0
 2047 00c8 0030A0E3 		mov	r3, #0
 2048 00cc 1E304BE5 		strb	r3, [fp, #-30]
 2049 00d0 150000EA 		b	.L107
 2050              	.L110:
1388:../Xilinx_src/micro.c ****         {
1389:../Xilinx_src/micro.c ****             ucDataMask  = pXsvfInfo->lvDataMask.val[ i ];
 2051              		.loc 1 1389 0
 2052 00d4 1E205BE5 		ldrb	r2, [fp, #-30]	@ zero_extendqisi2
 2053 00d8 28101BE5 		ldr	r1, [fp, #-40]
 2054 00dc A4319FE5 		ldr	r3, .L114
 2055 00e0 022081E0 		add	r2, r1, r2
 2056 00e4 033082E0 		add	r3, r2, r3
 2057 00e8 0830D3E5 		ldrb	r3, [r3, #8]
 2058 00ec 1D304BE5 		strb	r3, [fp, #-29]
1390:../Xilinx_src/micro.c ****             while ( ucDataMask )
 2059              		.loc 1 1390 0
 2060 00f0 070000EA 		b	.L108
 2061              	.L109:
1391:../Xilinx_src/micro.c ****             {
1392:../Xilinx_src/micro.c ****                 iDataMaskLen    += ( ucDataMask & 1 );
 2062              		.loc 1 1392 0
 2063 00f4 1D305BE5 		ldrb	r3, [fp, #-29]	@ zero_extendqisi2
 2064 00f8 013003E2 		and	r3, r3, #1
 2065 00fc 1C201BE5 		ldr	r2, [fp, #-28]
 2066 0100 033082E0 		add	r3, r2, r3
 2067 0104 1C300BE5 		str	r3, [fp, #-28]
1393:../Xilinx_src/micro.c ****                 ucDataMask      >>= 1;
 2068              		.loc 1 1393 0
 2069 0108 1D305BE5 		ldrb	r3, [fp, #-29]	@ zero_extendqisi2
 2070 010c A330A0E1 		mov	r3, r3, lsr #1
 2071 0110 1D304BE5 		strb	r3, [fp, #-29]
 2072              	.L108:
1390:../Xilinx_src/micro.c ****             while ( ucDataMask )
 2073              		.loc 1 1390 0 discriminator 1
 2074 0114 1D305BE5 		ldrb	r3, [fp, #-29]	@ zero_extendqisi2
 2075 0118 000053E3 		cmp	r3, #0
 2076 011c F4FFFF1A 		bne	.L109
1387:../Xilinx_src/micro.c ****         for ( i = 0; i < pXsvfInfo->lvDataMask.len; ++i )
 2077              		.loc 1 1387 0
 2078 0120 1E305BE5 		ldrb	r3, [fp, #-30]
 2079 0124 013083E2 		add	r3, r3, #1
 2080 0128 1E304BE5 		strb	r3, [fp, #-30]
 2081              	.L107:
1387:../Xilinx_src/micro.c ****         for ( i = 0; i < pXsvfInfo->lvDataMask.len; ++i )
 2082              		.loc 1 1387 0 is_stmt 0 discriminator 1
 2083 012c 1E205BE5 		ldrb	r2, [fp, #-30]	@ zero_extendqisi2
 2084 0130 28101BE5 		ldr	r1, [fp, #-40]
 2085 0134 50319FE5 		ldr	r3, .L114+4
 2086 0138 B33091E1 		ldrh	r3, [r1, r3]
 2087 013c 0338A0E1 		mov	r3, r3, asl #16
 2088 0140 4338A0E1 		mov	r3, r3, asr #16
 2089 0144 030052E1 		cmp	r2, r3
 2090 0148 E1FFFFBA 		blt	.L110
1394:../Xilinx_src/micro.c ****             }
1395:../Xilinx_src/micro.c ****         }
1396:../Xilinx_src/micro.c **** 
1397:../Xilinx_src/micro.c ****         /* Get the number of data pieces, i.e. number of times to shift */
1398:../Xilinx_src/micro.c ****         readByte( &ucNumTimes );
 2091              		.loc 1 1398 0 is_stmt 1
 2092 014c 1F304BE2 		sub	r3, fp, #31
 2093 0150 0300A0E1 		mov	r0, r3
 2094 0154 FEFFFFEB 		bl	readByte
1399:../Xilinx_src/micro.c **** 
1400:../Xilinx_src/micro.c ****         /* For numTimes, get data, fix TDI, and shift */
1401:../Xilinx_src/micro.c ****         for ( i = 0; !iErrorCode && ( i < ucNumTimes ); ++i )
 2095              		.loc 1 1401 0
 2096 0158 0030A0E3 		mov	r3, #0
 2097 015c 1E304BE5 		strb	r3, [fp, #-30]
 2098 0160 370000EA 		b	.L111
 2099              	.L112:
1402:../Xilinx_src/micro.c ****         {
1403:../Xilinx_src/micro.c ****             readVal( &(pXsvfInfo->lvNextData),
 2100              		.loc 1 1403 0 discriminator 1
 2101 0164 28301BE5 		ldr	r3, [fp, #-40]
 2102 0168 034A83E2 		add	r4, r3, #12288
 2103 016c 324084E2 		add	r4, r4, #50
 2104 0170 1C001BE5 		ldr	r0, [fp, #-28]
 2105 0174 FEFFFFEB 		bl	xsvfGetAsNumBytes
 2106 0178 0030A0E1 		mov	r3, r0
 2107 017c 0400A0E1 		mov	r0, r4
 2108 0180 0310A0E1 		mov	r1, r3
 2109 0184 FEFFFFEB 		bl	readVal
1404:../Xilinx_src/micro.c ****                      xsvfGetAsNumBytes( iDataMaskLen ) );
1405:../Xilinx_src/micro.c ****             xsvfDoSDRMasking( &(pXsvfInfo->lvTdi),
 2110              		.loc 1 1405 0 discriminator 1
 2111 0188 28301BE5 		ldr	r3, [fp, #-40]
 2112 018c 1A0083E2 		add	r0, r3, #26
 2113 0190 28301BE5 		ldr	r3, [fp, #-40]
 2114 0194 031A83E2 		add	r1, r3, #12288
 2115 0198 321081E2 		add	r1, r1, #50
 2116 019c 28301BE5 		ldr	r3, [fp, #-40]
 2117 01a0 022A83E2 		add	r2, r3, #8192
 2118 01a4 2A2082E2 		add	r2, r2, #42
 2119 01a8 28301BE5 		ldr	r3, [fp, #-40]
 2120 01ac 0A3B83E2 		add	r3, r3, #10240
 2121 01b0 2E3083E2 		add	r3, r3, #46
 2122 01b4 FEFFFFEB 		bl	xsvfDoSDRMasking
1406:../Xilinx_src/micro.c ****                               &(pXsvfInfo->lvNextData),
1407:../Xilinx_src/micro.c ****                               &(pXsvfInfo->lvAddressMask),
1408:../Xilinx_src/micro.c ****                               &(pXsvfInfo->lvDataMask) );
1409:../Xilinx_src/micro.c ****             iErrorCode  = xsvfShift( &(pXsvfInfo->ucTapState),
 2123              		.loc 1 1409 0 discriminator 1
 2124 01b8 28301BE5 		ldr	r3, [fp, #-40]
 2125 01bc 0C0083E2 		add	r0, r3, #12
1410:../Xilinx_src/micro.c ****                                      XTAPSTATE_SHIFTDR,
1411:../Xilinx_src/micro.c ****                                      pXsvfInfo->lShiftLengthBits,
 2126              		.loc 1 1411 0 discriminator 1
 2127 01c0 28301BE5 		ldr	r3, [fp, #-40]
1409:../Xilinx_src/micro.c ****             iErrorCode  = xsvfShift( &(pXsvfInfo->ucTapState),
 2128              		.loc 1 1409 0 discriminator 1
 2129 01c4 14E093E5 		ldr	lr, [r3, #20]
 2130 01c8 28301BE5 		ldr	r3, [fp, #-40]
 2131 01cc 1AC083E2 		add	ip, r3, #26
 2132 01d0 28301BE5 		ldr	r3, [fp, #-40]
 2133 01d4 011A83E2 		add	r1, r3, #4096
 2134 01d8 221081E2 		add	r1, r1, #34
 2135 01dc 28301BE5 		ldr	r3, [fp, #-40]
 2136 01e0 812E83E2 		add	r2, r3, #2064
 2137 01e4 0E2082E2 		add	r2, r2, #14
 2138 01e8 28301BE5 		ldr	r3, [fp, #-40]
 2139 01ec 063B83E2 		add	r3, r3, #6144
 2140 01f0 263083E2 		add	r3, r3, #38
1412:../Xilinx_src/micro.c ****                                      &(pXsvfInfo->lvTdi),
1413:../Xilinx_src/micro.c ****                                      &(pXsvfInfo->lvTdoCaptured),
1414:../Xilinx_src/micro.c ****                                      &(pXsvfInfo->lvTdoExpected),
1415:../Xilinx_src/micro.c ****                                      &(pXsvfInfo->lvTdoMask),
1416:../Xilinx_src/micro.c ****                                      pXsvfInfo->ucEndDR,
 2141              		.loc 1 1416 0 discriminator 1
 2142 01f4 28401BE5 		ldr	r4, [fp, #-40]
1409:../Xilinx_src/micro.c ****             iErrorCode  = xsvfShift( &(pXsvfInfo->ucTapState),
 2143              		.loc 1 1409 0 discriminator 1
 2144 01f8 0E60D4E5 		ldrb	r6, [r4, #14]	@ zero_extendqisi2
1417:../Xilinx_src/micro.c ****                                      pXsvfInfo->lRunTestTime,
 2145              		.loc 1 1417 0 discriminator 1
 2146 01fc 28401BE5 		ldr	r4, [fp, #-40]
1409:../Xilinx_src/micro.c ****             iErrorCode  = xsvfShift( &(pXsvfInfo->ucTapState),
 2147              		.loc 1 1409 0 discriminator 1
 2148 0200 105094E5 		ldr	r5, [r4, #16]
1418:../Xilinx_src/micro.c ****                                      pXsvfInfo->ucMaxRepeat );
 2149              		.loc 1 1418 0 discriminator 1
 2150 0204 28401BE5 		ldr	r4, [fp, #-40]
1409:../Xilinx_src/micro.c ****             iErrorCode  = xsvfShift( &(pXsvfInfo->ucTapState),
 2151              		.loc 1 1409 0 discriminator 1
 2152 0208 0F40D4E5 		ldrb	r4, [r4, #15]	@ zero_extendqisi2
 2153 020c 00108DE5 		str	r1, [sp, #0]
 2154 0210 04208DE5 		str	r2, [sp, #4]
 2155 0214 08308DE5 		str	r3, [sp, #8]
 2156 0218 0C608DE5 		str	r6, [sp, #12]
 2157 021c 10508DE5 		str	r5, [sp, #16]
 2158 0220 14408DE5 		str	r4, [sp, #20]
 2159 0224 0410A0E3 		mov	r1, #4
 2160 0228 0E20A0E1 		mov	r2, lr
 2161 022c 0C30A0E1 		mov	r3, ip
 2162 0230 FEFFFFEB 		bl	xsvfShift
 2163 0234 18000BE5 		str	r0, [fp, #-24]
1401:../Xilinx_src/micro.c ****         for ( i = 0; !iErrorCode && ( i < ucNumTimes ); ++i )
 2164              		.loc 1 1401 0 discriminator 1
 2165 0238 1E305BE5 		ldrb	r3, [fp, #-30]
 2166 023c 013083E2 		add	r3, r3, #1
 2167 0240 1E304BE5 		strb	r3, [fp, #-30]
 2168              	.L111:
 2169 0244 18301BE5 		ldr	r3, [fp, #-24]
 2170 0248 000053E3 		cmp	r3, #0
 2171 024c 0300001A 		bne	.L106
1401:../Xilinx_src/micro.c ****         for ( i = 0; !iErrorCode && ( i < ucNumTimes ); ++i )
 2172              		.loc 1 1401 0 is_stmt 0 discriminator 2
 2173 0250 1F305BE5 		ldrb	r3, [fp, #-31]	@ zero_extendqisi2
 2174 0254 1E205BE5 		ldrb	r2, [fp, #-30]	@ zero_extendqisi2
 2175 0258 030052E1 		cmp	r2, r3
 2176 025c C0FFFF3A 		bcc	.L112
 2177              	.L106:
1419:../Xilinx_src/micro.c ****         }
1420:../Xilinx_src/micro.c ****     }
1421:../Xilinx_src/micro.c ****     if ( iErrorCode != XSVF_ERROR_NONE )
 2178              		.loc 1 1421 0 is_stmt 1
 2179 0260 18301BE5 		ldr	r3, [fp, #-24]
 2180 0264 000053E3 		cmp	r3, #0
 2181 0268 0200000A 		beq	.L113
1422:../Xilinx_src/micro.c ****     {
1423:../Xilinx_src/micro.c ****         pXsvfInfo->iErrorCode   = iErrorCode;
 2182              		.loc 1 1423 0
 2183 026c 28301BE5 		ldr	r3, [fp, #-40]
 2184 0270 18201BE5 		ldr	r2, [fp, #-24]
 2185 0274 082083E5 		str	r2, [r3, #8]
 2186              	.L113:
1424:../Xilinx_src/micro.c ****     }
1425:../Xilinx_src/micro.c ****     return( iErrorCode );
 2187              		.loc 1 1425 0
 2188 0278 18301BE5 		ldr	r3, [fp, #-24]
1426:../Xilinx_src/micro.c **** }
 2189              		.loc 1 1426 0
 2190 027c 0300A0E1 		mov	r0, r3
 2191 0280 10D04BE2 		sub	sp, fp, #16
 2192 0284 7088BDE8 		ldmfd	sp!, {r4, r5, r6, fp, pc}
 2193              	.L115:
 2194              		.align	2
 2195              	.L114:
 2196 0288 28280000 		.word	10280
 2197 028c 2E280000 		.word	10286
 2198              		.cfi_endproc
 2199              	.LFE20:
 2201              		.section	.text.xsvfDoXSDRBCE,"ax",%progbits
 2202              		.align	2
 2203              		.global	xsvfDoXSDRBCE
 2205              	xsvfDoXSDRBCE:
 2206              	.LFB21:
1427:../Xilinx_src/micro.c **** #endif  /* XSVF_SUPPORT_COMPRESSION */
1428:../Xilinx_src/micro.c **** 
1429:../Xilinx_src/micro.c **** /*****************************************************************************
1430:../Xilinx_src/micro.c **** * Function:     xsvfDoXSDRBCE
1431:../Xilinx_src/micro.c **** * Description:  XSDRB/XSDRC/XSDRE <lenVal.TDI[XSDRSIZE]>
1432:../Xilinx_src/micro.c **** *               If not already in SHIFTDR, goto SHIFTDR.
1433:../Xilinx_src/micro.c **** *               Shift the given TDI data into the JTAG scan chain.
1434:../Xilinx_src/micro.c **** *               Ignore TDO.
1435:../Xilinx_src/micro.c **** *               If cmd==XSDRE, then goto ENDDR.  Otherwise, stay in ShiftDR.
1436:../Xilinx_src/micro.c **** *               XSDRB, XSDRC, and XSDRE are the same implementation.
1437:../Xilinx_src/micro.c **** * Parameters:   pXsvfInfo   - XSVF information pointer.
1438:../Xilinx_src/micro.c **** * Returns:      int         - 0 = success;  non-zero = error.
1439:../Xilinx_src/micro.c **** *****************************************************************************/
1440:../Xilinx_src/micro.c **** int xsvfDoXSDRBCE( SXsvfInfo* pXsvfInfo )
1441:../Xilinx_src/micro.c **** {
 2207              		.loc 1 1441 0
 2208              		.cfi_startproc
 2209              		@ args = 0, pretend = 0, frame = 16
 2210              		@ frame_needed = 1, uses_anonymous_args = 0
 2211 0000 00482DE9 		stmfd	sp!, {fp, lr}
 2212              	.LCFI42:
 2213              		.cfi_def_cfa_offset 8
 2214 0004 04B08DE2 		add	fp, sp, #4
 2215              		.cfi_offset 14, -4
 2216              		.cfi_offset 11, -8
 2217              	.LCFI43:
 2218              		.cfi_def_cfa 11, 4
 2219 0008 28D04DE2 		sub	sp, sp, #40
 2220 000c 10000BE5 		str	r0, [fp, #-16]
1442:../Xilinx_src/micro.c ****     unsigned char   ucEndDR;
1443:../Xilinx_src/micro.c ****     int             iErrorCode;
1444:../Xilinx_src/micro.c ****     ucEndDR = (unsigned char)(( pXsvfInfo->ucCommand == XSDRE ) ?
 2221              		.loc 1 1444 0
 2222 0010 10301BE5 		ldr	r3, [fp, #-16]
 2223 0014 0130D3E5 		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2224 0018 0E0053E3 		cmp	r3, #14
 2225 001c 0200001A 		bne	.L117
1445:../Xilinx_src/micro.c ****                                 pXsvfInfo->ucEndDR : XTAPSTATE_SHIFTDR);
 2226              		.loc 1 1445 0 discriminator 1
 2227 0020 10301BE5 		ldr	r3, [fp, #-16]
1444:../Xilinx_src/micro.c ****     ucEndDR = (unsigned char)(( pXsvfInfo->ucCommand == XSDRE ) ?
 2228              		.loc 1 1444 0 discriminator 1
 2229 0024 0E30D3E5 		ldrb	r3, [r3, #14]	@ zero_extendqisi2
 2230 0028 000000EA 		b	.L118
 2231              	.L117:
1444:../Xilinx_src/micro.c ****     ucEndDR = (unsigned char)(( pXsvfInfo->ucCommand == XSDRE ) ?
 2232              		.loc 1 1444 0 is_stmt 0 discriminator 2
 2233 002c 0430A0E3 		mov	r3, #4
 2234              	.L118:
1444:../Xilinx_src/micro.c ****     ucEndDR = (unsigned char)(( pXsvfInfo->ucCommand == XSDRE ) ?
 2235              		.loc 1 1444 0 discriminator 3
 2236 0030 05304BE5 		strb	r3, [fp, #-5]
1446:../Xilinx_src/micro.c ****     iErrorCode  = xsvfBasicXSDRTDO( &(pXsvfInfo->ucTapState),
 2237              		.loc 1 1446 0 is_stmt 1 discriminator 3
 2238 0034 10301BE5 		ldr	r3, [fp, #-16]
 2239 0038 0C0083E2 		add	r0, r3, #12
1447:../Xilinx_src/micro.c ****                                     pXsvfInfo->lShiftLengthBits,
 2240              		.loc 1 1447 0 discriminator 3
 2241 003c 10301BE5 		ldr	r3, [fp, #-16]
1446:../Xilinx_src/micro.c ****     iErrorCode  = xsvfBasicXSDRTDO( &(pXsvfInfo->ucTapState),
 2242              		.loc 1 1446 0 discriminator 3
 2243 0040 141093E5 		ldr	r1, [r3, #20]
1448:../Xilinx_src/micro.c ****                                     pXsvfInfo->sShiftLengthBytes,
 2244              		.loc 1 1448 0 discriminator 3
 2245 0044 10301BE5 		ldr	r3, [fp, #-16]
1446:../Xilinx_src/micro.c ****     iErrorCode  = xsvfBasicXSDRTDO( &(pXsvfInfo->ucTapState),
 2246              		.loc 1 1446 0 discriminator 3
 2247 0048 B821D3E1 		ldrh	r2, [r3, #24]
 2248 004c 10301BE5 		ldr	r3, [fp, #-16]
 2249 0050 1A3083E2 		add	r3, r3, #26
 2250 0054 0228A0E1 		mov	r2, r2, asl #16
 2251 0058 4228A0E1 		mov	r2, r2, asr #16
 2252 005c 00C0A0E3 		mov	ip, #0
 2253 0060 00C08DE5 		str	ip, [sp, #0]
 2254 0064 00C0A0E3 		mov	ip, #0
 2255 0068 04C08DE5 		str	ip, [sp, #4]
 2256 006c 00C0A0E3 		mov	ip, #0
 2257 0070 08C08DE5 		str	ip, [sp, #8]
 2258 0074 05C05BE5 		ldrb	ip, [fp, #-5]	@ zero_extendqisi2
 2259 0078 0CC08DE5 		str	ip, [sp, #12]
 2260 007c 00C0A0E3 		mov	ip, #0
 2261 0080 10C08DE5 		str	ip, [sp, #16]
 2262 0084 00C0A0E3 		mov	ip, #0
 2263 0088 14C08DE5 		str	ip, [sp, #20]
 2264 008c FEFFFFEB 		bl	xsvfBasicXSDRTDO
 2265 0090 0C000BE5 		str	r0, [fp, #-12]
1449:../Xilinx_src/micro.c ****                                     &(pXsvfInfo->lvTdi),
1450:../Xilinx_src/micro.c ****                                     /*plvTdoCaptured*/0, /*plvTdoExpected*/0,
1451:../Xilinx_src/micro.c ****                                     /*plvTdoMask*/0, ucEndDR,
1452:../Xilinx_src/micro.c ****                                     /*lRunTestTime*/0, /*ucMaxRepeat*/0 );
1453:../Xilinx_src/micro.c ****     if ( iErrorCode != XSVF_ERROR_NONE )
 2266              		.loc 1 1453 0 discriminator 3
 2267 0094 0C301BE5 		ldr	r3, [fp, #-12]
 2268 0098 000053E3 		cmp	r3, #0
 2269 009c 0200000A 		beq	.L119
1454:../Xilinx_src/micro.c ****     {
1455:../Xilinx_src/micro.c ****         pXsvfInfo->iErrorCode   = iErrorCode;
 2270              		.loc 1 1455 0
 2271 00a0 10301BE5 		ldr	r3, [fp, #-16]
 2272 00a4 0C201BE5 		ldr	r2, [fp, #-12]
 2273 00a8 082083E5 		str	r2, [r3, #8]
 2274              	.L119:
1456:../Xilinx_src/micro.c ****     }
1457:../Xilinx_src/micro.c ****     return( iErrorCode );
 2275              		.loc 1 1457 0
 2276 00ac 0C301BE5 		ldr	r3, [fp, #-12]
1458:../Xilinx_src/micro.c **** }
 2277              		.loc 1 1458 0
 2278 00b0 0300A0E1 		mov	r0, r3
 2279 00b4 04D04BE2 		sub	sp, fp, #4
 2280 00b8 0088BDE8 		ldmfd	sp!, {fp, pc}
 2281              		.cfi_endproc
 2282              	.LFE21:
 2284              		.section	.text.xsvfDoXSDRTDOBCE,"ax",%progbits
 2285              		.align	2
 2286              		.global	xsvfDoXSDRTDOBCE
 2288              	xsvfDoXSDRTDOBCE:
 2289              	.LFB22:
1459:../Xilinx_src/micro.c **** 
1460:../Xilinx_src/micro.c **** /*****************************************************************************
1461:../Xilinx_src/micro.c **** * Function:     xsvfDoXSDRTDOBCE
1462:../Xilinx_src/micro.c **** * Description:  XSDRB/XSDRC/XSDRE <lenVal.TDI[XSDRSIZE]> <lenVal.TDO[XSDRSIZE]>
1463:../Xilinx_src/micro.c **** *               If not already in SHIFTDR, goto SHIFTDR.
1464:../Xilinx_src/micro.c **** *               Shift the given TDI data into the JTAG scan chain.
1465:../Xilinx_src/micro.c **** *               Compare TDO, but do NOT use XTDOMASK.
1466:../Xilinx_src/micro.c **** *               If cmd==XSDRTDOE, then goto ENDDR.  Otherwise, stay in ShiftDR.
1467:../Xilinx_src/micro.c **** *               XSDRTDOB, XSDRTDOC, and XSDRTDOE are the same implementation.
1468:../Xilinx_src/micro.c **** * Parameters:   pXsvfInfo   - XSVF information pointer.
1469:../Xilinx_src/micro.c **** * Returns:      int         - 0 = success;  non-zero = error.
1470:../Xilinx_src/micro.c **** *****************************************************************************/
1471:../Xilinx_src/micro.c **** int xsvfDoXSDRTDOBCE( SXsvfInfo* pXsvfInfo )
1472:../Xilinx_src/micro.c **** {
 2290              		.loc 1 1472 0
 2291              		.cfi_startproc
 2292              		@ args = 0, pretend = 0, frame = 16
 2293              		@ frame_needed = 1, uses_anonymous_args = 0
 2294 0000 00482DE9 		stmfd	sp!, {fp, lr}
 2295              	.LCFI44:
 2296              		.cfi_def_cfa_offset 8
 2297 0004 04B08DE2 		add	fp, sp, #4
 2298              		.cfi_offset 14, -4
 2299              		.cfi_offset 11, -8
 2300              	.LCFI45:
 2301              		.cfi_def_cfa 11, 4
 2302 0008 28D04DE2 		sub	sp, sp, #40
 2303 000c 10000BE5 		str	r0, [fp, #-16]
1473:../Xilinx_src/micro.c ****     unsigned char   ucEndDR;
1474:../Xilinx_src/micro.c ****     int             iErrorCode;
1475:../Xilinx_src/micro.c ****     ucEndDR = (unsigned char)(( pXsvfInfo->ucCommand == XSDRTDOE ) ?
 2304              		.loc 1 1475 0
 2305 0010 10301BE5 		ldr	r3, [fp, #-16]
 2306 0014 0130D3E5 		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2307 0018 110053E3 		cmp	r3, #17
 2308 001c 0200001A 		bne	.L121
1476:../Xilinx_src/micro.c ****                                 pXsvfInfo->ucEndDR : XTAPSTATE_SHIFTDR);
 2309              		.loc 1 1476 0 discriminator 1
 2310 0020 10301BE5 		ldr	r3, [fp, #-16]
1475:../Xilinx_src/micro.c ****     ucEndDR = (unsigned char)(( pXsvfInfo->ucCommand == XSDRTDOE ) ?
 2311              		.loc 1 1475 0 discriminator 1
 2312 0024 0E30D3E5 		ldrb	r3, [r3, #14]	@ zero_extendqisi2
 2313 0028 000000EA 		b	.L122
 2314              	.L121:
1475:../Xilinx_src/micro.c ****     ucEndDR = (unsigned char)(( pXsvfInfo->ucCommand == XSDRTDOE ) ?
 2315              		.loc 1 1475 0 is_stmt 0 discriminator 2
 2316 002c 0430A0E3 		mov	r3, #4
 2317              	.L122:
1475:../Xilinx_src/micro.c ****     ucEndDR = (unsigned char)(( pXsvfInfo->ucCommand == XSDRTDOE ) ?
 2318              		.loc 1 1475 0 discriminator 3
 2319 0030 05304BE5 		strb	r3, [fp, #-5]
1477:../Xilinx_src/micro.c ****     iErrorCode  = xsvfBasicXSDRTDO( &(pXsvfInfo->ucTapState),
 2320              		.loc 1 1477 0 is_stmt 1 discriminator 3
 2321 0034 10301BE5 		ldr	r3, [fp, #-16]
 2322 0038 0C0083E2 		add	r0, r3, #12
1478:../Xilinx_src/micro.c ****                                     pXsvfInfo->lShiftLengthBits,
 2323              		.loc 1 1478 0 discriminator 3
 2324 003c 10301BE5 		ldr	r3, [fp, #-16]
1477:../Xilinx_src/micro.c ****     iErrorCode  = xsvfBasicXSDRTDO( &(pXsvfInfo->ucTapState),
 2325              		.loc 1 1477 0 discriminator 3
 2326 0040 141093E5 		ldr	r1, [r3, #20]
1479:../Xilinx_src/micro.c ****                                     pXsvfInfo->sShiftLengthBytes,
 2327              		.loc 1 1479 0 discriminator 3
 2328 0044 10301BE5 		ldr	r3, [fp, #-16]
1477:../Xilinx_src/micro.c ****     iErrorCode  = xsvfBasicXSDRTDO( &(pXsvfInfo->ucTapState),
 2329              		.loc 1 1477 0 discriminator 3
 2330 0048 B8E1D3E1 		ldrh	lr, [r3, #24]
 2331 004c 10301BE5 		ldr	r3, [fp, #-16]
 2332 0050 1AC083E2 		add	ip, r3, #26
 2333 0054 10301BE5 		ldr	r3, [fp, #-16]
 2334 0058 012A83E2 		add	r2, r3, #4096
 2335 005c 222082E2 		add	r2, r2, #34
 2336 0060 10301BE5 		ldr	r3, [fp, #-16]
 2337 0064 813E83E2 		add	r3, r3, #2064
 2338 0068 0E3083E2 		add	r3, r3, #14
 2339 006c 0EE8A0E1 		mov	lr, lr, asl #16
 2340 0070 4EE8A0E1 		mov	lr, lr, asr #16
 2341 0074 00208DE5 		str	r2, [sp, #0]
 2342 0078 04308DE5 		str	r3, [sp, #4]
 2343 007c 0030A0E3 		mov	r3, #0
 2344 0080 08308DE5 		str	r3, [sp, #8]
 2345 0084 05305BE5 		ldrb	r3, [fp, #-5]	@ zero_extendqisi2
 2346 0088 0C308DE5 		str	r3, [sp, #12]
 2347 008c 0030A0E3 		mov	r3, #0
 2348 0090 10308DE5 		str	r3, [sp, #16]
 2349 0094 0030A0E3 		mov	r3, #0
 2350 0098 14308DE5 		str	r3, [sp, #20]
 2351 009c 0E20A0E1 		mov	r2, lr
 2352 00a0 0C30A0E1 		mov	r3, ip
 2353 00a4 FEFFFFEB 		bl	xsvfBasicXSDRTDO
 2354 00a8 0C000BE5 		str	r0, [fp, #-12]
1480:../Xilinx_src/micro.c ****                                     &(pXsvfInfo->lvTdi),
1481:../Xilinx_src/micro.c ****                                     &(pXsvfInfo->lvTdoCaptured),
1482:../Xilinx_src/micro.c ****                                     &(pXsvfInfo->lvTdoExpected),
1483:../Xilinx_src/micro.c ****                                     /*plvTdoMask*/0, ucEndDR,
1484:../Xilinx_src/micro.c ****                                     /*lRunTestTime*/0, /*ucMaxRepeat*/0 );
1485:../Xilinx_src/micro.c ****     if ( iErrorCode != XSVF_ERROR_NONE )
 2355              		.loc 1 1485 0 discriminator 3
 2356 00ac 0C301BE5 		ldr	r3, [fp, #-12]
 2357 00b0 000053E3 		cmp	r3, #0
 2358 00b4 0200000A 		beq	.L123
1486:../Xilinx_src/micro.c ****     {
1487:../Xilinx_src/micro.c ****         pXsvfInfo->iErrorCode   = iErrorCode;
 2359              		.loc 1 1487 0
 2360 00b8 10301BE5 		ldr	r3, [fp, #-16]
 2361 00bc 0C201BE5 		ldr	r2, [fp, #-12]
 2362 00c0 082083E5 		str	r2, [r3, #8]
 2363              	.L123:
1488:../Xilinx_src/micro.c ****     }
1489:../Xilinx_src/micro.c ****     return( iErrorCode );
 2364              		.loc 1 1489 0
 2365 00c4 0C301BE5 		ldr	r3, [fp, #-12]
1490:../Xilinx_src/micro.c **** }
 2366              		.loc 1 1490 0
 2367 00c8 0300A0E1 		mov	r0, r3
 2368 00cc 04D04BE2 		sub	sp, fp, #4
 2369 00d0 0088BDE8 		ldmfd	sp!, {fp, pc}
 2370              		.cfi_endproc
 2371              	.LFE22:
 2373              		.section	.text.xsvfDoXSTATE,"ax",%progbits
 2374              		.align	2
 2375              		.global	xsvfDoXSTATE
 2377              	xsvfDoXSTATE:
 2378              	.LFB23:
1491:../Xilinx_src/micro.c **** 
1492:../Xilinx_src/micro.c **** /*****************************************************************************
1493:../Xilinx_src/micro.c **** * Function:     xsvfDoXSTATE
1494:../Xilinx_src/micro.c **** * Description:  XSTATE <byte>
1495:../Xilinx_src/micro.c **** *               <byte> == XTAPSTATE;
1496:../Xilinx_src/micro.c **** *               Get the state parameter and transition the TAP to that state.
1497:../Xilinx_src/micro.c **** * Parameters:   pXsvfInfo   - XSVF information pointer.
1498:../Xilinx_src/micro.c **** * Returns:      int         - 0 = success;  non-zero = error.
1499:../Xilinx_src/micro.c **** *****************************************************************************/
1500:../Xilinx_src/micro.c **** int xsvfDoXSTATE( SXsvfInfo* pXsvfInfo )
1501:../Xilinx_src/micro.c **** {
 2379              		.loc 1 1501 0
 2380              		.cfi_startproc
 2381              		@ args = 0, pretend = 0, frame = 16
 2382              		@ frame_needed = 1, uses_anonymous_args = 0
 2383 0000 00482DE9 		stmfd	sp!, {fp, lr}
 2384              	.LCFI46:
 2385              		.cfi_def_cfa_offset 8
 2386 0004 04B08DE2 		add	fp, sp, #4
 2387              		.cfi_offset 14, -4
 2388              		.cfi_offset 11, -8
 2389              	.LCFI47:
 2390              		.cfi_def_cfa 11, 4
 2391 0008 10D04DE2 		sub	sp, sp, #16
 2392 000c 10000BE5 		str	r0, [fp, #-16]
1502:../Xilinx_src/micro.c ****     unsigned char   ucNextState;
1503:../Xilinx_src/micro.c ****     int             iErrorCode;
1504:../Xilinx_src/micro.c ****     readByte( &ucNextState );
 2393              		.loc 1 1504 0
 2394 0010 09304BE2 		sub	r3, fp, #9
 2395 0014 0300A0E1 		mov	r0, r3
 2396 0018 FEFFFFEB 		bl	readByte
1505:../Xilinx_src/micro.c ****     iErrorCode  = xsvfGotoTapState( &(pXsvfInfo->ucTapState), ucNextState );
 2397              		.loc 1 1505 0
 2398 001c 10301BE5 		ldr	r3, [fp, #-16]
 2399 0020 0C2083E2 		add	r2, r3, #12
 2400 0024 09305BE5 		ldrb	r3, [fp, #-9]	@ zero_extendqisi2
 2401 0028 0200A0E1 		mov	r0, r2
 2402 002c 0310A0E1 		mov	r1, r3
 2403 0030 FEFFFFEB 		bl	xsvfGotoTapState
 2404 0034 08000BE5 		str	r0, [fp, #-8]
1506:../Xilinx_src/micro.c ****     if ( iErrorCode != XSVF_ERROR_NONE )
 2405              		.loc 1 1506 0
 2406 0038 08301BE5 		ldr	r3, [fp, #-8]
 2407 003c 000053E3 		cmp	r3, #0
 2408 0040 0200000A 		beq	.L125
1507:../Xilinx_src/micro.c ****     {
1508:../Xilinx_src/micro.c ****         pXsvfInfo->iErrorCode   = iErrorCode;
 2409              		.loc 1 1508 0
 2410 0044 10301BE5 		ldr	r3, [fp, #-16]
 2411 0048 08201BE5 		ldr	r2, [fp, #-8]
 2412 004c 082083E5 		str	r2, [r3, #8]
 2413              	.L125:
1509:../Xilinx_src/micro.c ****     }
1510:../Xilinx_src/micro.c ****     return( iErrorCode );
 2414              		.loc 1 1510 0
 2415 0050 08301BE5 		ldr	r3, [fp, #-8]
1511:../Xilinx_src/micro.c **** }
 2416              		.loc 1 1511 0
 2417 0054 0300A0E1 		mov	r0, r3
 2418 0058 04D04BE2 		sub	sp, fp, #4
 2419 005c 0088BDE8 		ldmfd	sp!, {fp, pc}
 2420              		.cfi_endproc
 2421              	.LFE23:
 2423              		.section	.text.xsvfDoXENDXR,"ax",%progbits
 2424              		.align	2
 2425              		.global	xsvfDoXENDXR
 2427              	xsvfDoXENDXR:
 2428              	.LFB24:
1512:../Xilinx_src/micro.c **** 
1513:../Xilinx_src/micro.c **** /*****************************************************************************
1514:../Xilinx_src/micro.c **** * Function:     xsvfDoXENDXR
1515:../Xilinx_src/micro.c **** * Description:  XENDIR/XENDDR <byte>
1516:../Xilinx_src/micro.c **** *               <byte>:  0 = RUNTEST;  1 = PAUSE.
1517:../Xilinx_src/micro.c **** *               Get the prespecified XENDIR or XENDDR.
1518:../Xilinx_src/micro.c **** *               Both XENDIR and XENDDR use the same implementation.
1519:../Xilinx_src/micro.c **** * Parameters:   pXsvfInfo   - XSVF information pointer.
1520:../Xilinx_src/micro.c **** * Returns:      int         - 0 = success;  non-zero = error.
1521:../Xilinx_src/micro.c **** *****************************************************************************/
1522:../Xilinx_src/micro.c **** int xsvfDoXENDXR( SXsvfInfo* pXsvfInfo )
1523:../Xilinx_src/micro.c **** {
 2429              		.loc 1 1523 0
 2430              		.cfi_startproc
 2431              		@ args = 0, pretend = 0, frame = 16
 2432              		@ frame_needed = 1, uses_anonymous_args = 0
 2433 0000 00482DE9 		stmfd	sp!, {fp, lr}
 2434              	.LCFI48:
 2435              		.cfi_def_cfa_offset 8
 2436 0004 04B08DE2 		add	fp, sp, #4
 2437              		.cfi_offset 14, -4
 2438              		.cfi_offset 11, -8
 2439              	.LCFI49:
 2440              		.cfi_def_cfa 11, 4
 2441 0008 10D04DE2 		sub	sp, sp, #16
 2442 000c 10000BE5 		str	r0, [fp, #-16]
1524:../Xilinx_src/micro.c ****     int             iErrorCode;
1525:../Xilinx_src/micro.c ****     unsigned char   ucEndState;
1526:../Xilinx_src/micro.c **** 
1527:../Xilinx_src/micro.c ****     iErrorCode  = XSVF_ERROR_NONE;
 2443              		.loc 1 1527 0
 2444 0010 0030A0E3 		mov	r3, #0
 2445 0014 08300BE5 		str	r3, [fp, #-8]
1528:../Xilinx_src/micro.c ****     readByte( &ucEndState );
 2446              		.loc 1 1528 0
 2447 0018 09304BE2 		sub	r3, fp, #9
 2448 001c 0300A0E1 		mov	r0, r3
 2449 0020 FEFFFFEB 		bl	readByte
1529:../Xilinx_src/micro.c ****     if ( ( ucEndState != XENDXR_RUNTEST ) && ( ucEndState != XENDXR_PAUSE ) )
 2450              		.loc 1 1529 0
 2451 0024 09305BE5 		ldrb	r3, [fp, #-9]	@ zero_extendqisi2
 2452 0028 000053E3 		cmp	r3, #0
 2453 002c 0500000A 		beq	.L127
 2454              		.loc 1 1529 0 is_stmt 0 discriminator 1
 2455 0030 09305BE5 		ldrb	r3, [fp, #-9]	@ zero_extendqisi2
 2456 0034 010053E3 		cmp	r3, #1
 2457 0038 0200000A 		beq	.L127
1530:../Xilinx_src/micro.c ****     {
1531:../Xilinx_src/micro.c ****         iErrorCode  = XSVF_ERROR_ILLEGALSTATE;
 2458              		.loc 1 1531 0 is_stmt 1
 2459 003c 0530A0E3 		mov	r3, #5
 2460 0040 08300BE5 		str	r3, [fp, #-8]
 2461 0044 180000EA 		b	.L128
 2462              	.L127:
1532:../Xilinx_src/micro.c ****     }
1533:../Xilinx_src/micro.c ****     else
1534:../Xilinx_src/micro.c ****     {
1535:../Xilinx_src/micro.c **** 
1536:../Xilinx_src/micro.c ****     if ( pXsvfInfo->ucCommand == XENDIR )
 2463              		.loc 1 1536 0
 2464 0048 10301BE5 		ldr	r3, [fp, #-16]
 2465 004c 0130D3E5 		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2466 0050 130053E3 		cmp	r3, #19
 2467 0054 0A00001A 		bne	.L129
1537:../Xilinx_src/micro.c ****     {
1538:../Xilinx_src/micro.c ****             if ( ucEndState == XENDXR_RUNTEST )
 2468              		.loc 1 1538 0
 2469 0058 09305BE5 		ldrb	r3, [fp, #-9]	@ zero_extendqisi2
 2470 005c 000053E3 		cmp	r3, #0
 2471 0060 0300001A 		bne	.L130
1539:../Xilinx_src/micro.c ****             {
1540:../Xilinx_src/micro.c ****                 pXsvfInfo->ucEndIR  = XTAPSTATE_RUNTEST;
 2472              		.loc 1 1540 0
 2473 0064 10301BE5 		ldr	r3, [fp, #-16]
 2474 0068 0120A0E3 		mov	r2, #1
 2475 006c 0D20C3E5 		strb	r2, [r3, #13]
 2476 0070 0D0000EA 		b	.L128
 2477              	.L130:
1541:../Xilinx_src/micro.c ****             }
1542:../Xilinx_src/micro.c ****             else
1543:../Xilinx_src/micro.c ****             {
1544:../Xilinx_src/micro.c ****                 pXsvfInfo->ucEndIR  = XTAPSTATE_PAUSEIR;
 2478              		.loc 1 1544 0
 2479 0074 10301BE5 		ldr	r3, [fp, #-16]
 2480 0078 0D20A0E3 		mov	r2, #13
 2481 007c 0D20C3E5 		strb	r2, [r3, #13]
 2482 0080 090000EA 		b	.L128
 2483              	.L129:
1545:../Xilinx_src/micro.c ****             }
1546:../Xilinx_src/micro.c ****             XSVFDBG_PRINTF1( 3, "   ENDIR State = %s\n",
1547:../Xilinx_src/micro.c ****                              xsvf_pzTapState[ pXsvfInfo->ucEndIR ] );
1548:../Xilinx_src/micro.c ****         }
1549:../Xilinx_src/micro.c ****     else    /* XENDDR */
1550:../Xilinx_src/micro.c ****     {
1551:../Xilinx_src/micro.c ****             if ( ucEndState == XENDXR_RUNTEST )
 2484              		.loc 1 1551 0
 2485 0084 09305BE5 		ldrb	r3, [fp, #-9]	@ zero_extendqisi2
 2486 0088 000053E3 		cmp	r3, #0
 2487 008c 0300001A 		bne	.L131
1552:../Xilinx_src/micro.c ****             {
1553:../Xilinx_src/micro.c ****                 pXsvfInfo->ucEndDR  = XTAPSTATE_RUNTEST;
 2488              		.loc 1 1553 0
 2489 0090 10301BE5 		ldr	r3, [fp, #-16]
 2490 0094 0120A0E3 		mov	r2, #1
 2491 0098 0E20C3E5 		strb	r2, [r3, #14]
 2492 009c 020000EA 		b	.L128
 2493              	.L131:
1554:../Xilinx_src/micro.c ****             }
1555:../Xilinx_src/micro.c ****     else
1556:../Xilinx_src/micro.c ****     {
1557:../Xilinx_src/micro.c ****                 pXsvfInfo->ucEndDR  = XTAPSTATE_PAUSEDR;
 2494              		.loc 1 1557 0
 2495 00a0 10301BE5 		ldr	r3, [fp, #-16]
 2496 00a4 0620A0E3 		mov	r2, #6
 2497 00a8 0E20C3E5 		strb	r2, [r3, #14]
 2498              	.L128:
1558:../Xilinx_src/micro.c ****             }
1559:../Xilinx_src/micro.c ****             XSVFDBG_PRINTF1( 3, "   ENDDR State = %s\n",
1560:../Xilinx_src/micro.c ****                              xsvf_pzTapState[ pXsvfInfo->ucEndDR ] );
1561:../Xilinx_src/micro.c ****         }
1562:../Xilinx_src/micro.c ****     }
1563:../Xilinx_src/micro.c **** 
1564:../Xilinx_src/micro.c ****     if ( iErrorCode != XSVF_ERROR_NONE )
 2499              		.loc 1 1564 0
 2500 00ac 08301BE5 		ldr	r3, [fp, #-8]
 2501 00b0 000053E3 		cmp	r3, #0
 2502 00b4 0200000A 		beq	.L132
1565:../Xilinx_src/micro.c ****     {
1566:../Xilinx_src/micro.c ****         pXsvfInfo->iErrorCode   = iErrorCode;
 2503              		.loc 1 1566 0
 2504 00b8 10301BE5 		ldr	r3, [fp, #-16]
 2505 00bc 08201BE5 		ldr	r2, [fp, #-8]
 2506 00c0 082083E5 		str	r2, [r3, #8]
 2507              	.L132:
1567:../Xilinx_src/micro.c ****     }
1568:../Xilinx_src/micro.c ****     return( iErrorCode );
 2508              		.loc 1 1568 0
 2509 00c4 08301BE5 		ldr	r3, [fp, #-8]
1569:../Xilinx_src/micro.c **** }
 2510              		.loc 1 1569 0
 2511 00c8 0300A0E1 		mov	r0, r3
 2512 00cc 04D04BE2 		sub	sp, fp, #4
 2513 00d0 0088BDE8 		ldmfd	sp!, {fp, pc}
 2514              		.cfi_endproc
 2515              	.LFE24:
 2517              		.section	.text.xsvfDoXCOMMENT,"ax",%progbits
 2518              		.align	2
 2519              		.global	xsvfDoXCOMMENT
 2521              	xsvfDoXCOMMENT:
 2522              	.LFB25:
1570:../Xilinx_src/micro.c **** 
1571:../Xilinx_src/micro.c **** /*****************************************************************************
1572:../Xilinx_src/micro.c **** * Function:     xsvfDoXCOMMENT
1573:../Xilinx_src/micro.c **** * Description:  XCOMMENT <text string ending in \0>
1574:../Xilinx_src/micro.c **** *               <text string ending in \0> == text comment;
1575:../Xilinx_src/micro.c **** *               Arbitrary comment embedded in the XSVF.
1576:../Xilinx_src/micro.c **** * Parameters:   pXsvfInfo   - XSVF information pointer.
1577:../Xilinx_src/micro.c **** * Returns:      int         - 0 = success;  non-zero = error.
1578:../Xilinx_src/micro.c **** *****************************************************************************/
1579:../Xilinx_src/micro.c **** int xsvfDoXCOMMENT( SXsvfInfo* pXsvfInfo )
1580:../Xilinx_src/micro.c **** {
 2523              		.loc 1 1580 0
 2524              		.cfi_startproc
 2525              		@ args = 0, pretend = 0, frame = 16
 2526              		@ frame_needed = 1, uses_anonymous_args = 0
 2527 0000 00482DE9 		stmfd	sp!, {fp, lr}
 2528              	.LCFI50:
 2529              		.cfi_def_cfa_offset 8
 2530 0004 04B08DE2 		add	fp, sp, #4
 2531              		.cfi_offset 14, -4
 2532              		.cfi_offset 11, -8
 2533              	.LCFI51:
 2534              		.cfi_def_cfa 11, 4
 2535 0008 10D04DE2 		sub	sp, sp, #16
 2536 000c 10000BE5 		str	r0, [fp, #-16]
 2537              	.L134:
1581:../Xilinx_src/micro.c ****     /* Use the comment for debugging */
1582:../Xilinx_src/micro.c ****     /* Otherwise, read through the comment to the end '\0' and ignore */
1583:../Xilinx_src/micro.c ****     unsigned char   ucText;
1584:../Xilinx_src/micro.c **** 
1585:../Xilinx_src/micro.c ****     if ( xsvf_iDebugLevel > 0 )
1586:../Xilinx_src/micro.c ****     {
1587:../Xilinx_src/micro.c ****         putchar( ' ' );
1588:../Xilinx_src/micro.c ****     }
1589:../Xilinx_src/micro.c **** 
1590:../Xilinx_src/micro.c ****     do
1591:../Xilinx_src/micro.c ****     {
1592:../Xilinx_src/micro.c ****         readByte( &ucText );
 2538              		.loc 1 1592 0
 2539 0010 05304BE2 		sub	r3, fp, #5
 2540 0014 0300A0E1 		mov	r0, r3
 2541 0018 FEFFFFEB 		bl	readByte
1593:../Xilinx_src/micro.c ****         if ( xsvf_iDebugLevel > 0 )
1594:../Xilinx_src/micro.c ****         {
1595:../Xilinx_src/micro.c ****             putchar( ucText ? ucText : '\n' );
1596:../Xilinx_src/micro.c ****         }
1597:../Xilinx_src/micro.c ****     } while ( ucText );
 2542              		.loc 1 1597 0
 2543 001c 05305BE5 		ldrb	r3, [fp, #-5]	@ zero_extendqisi2
 2544 0020 000053E3 		cmp	r3, #0
 2545 0024 F9FFFF1A 		bne	.L134
1598:../Xilinx_src/micro.c **** 
1599:../Xilinx_src/micro.c ****     pXsvfInfo->iErrorCode   = XSVF_ERROR_NONE;
 2546              		.loc 1 1599 0
 2547 0028 10301BE5 		ldr	r3, [fp, #-16]
 2548 002c 0020A0E3 		mov	r2, #0
 2549 0030 082083E5 		str	r2, [r3, #8]
1600:../Xilinx_src/micro.c **** 
1601:../Xilinx_src/micro.c ****     return( pXsvfInfo->iErrorCode );
 2550              		.loc 1 1601 0
 2551 0034 10301BE5 		ldr	r3, [fp, #-16]
 2552 0038 083093E5 		ldr	r3, [r3, #8]
1602:../Xilinx_src/micro.c **** }
 2553              		.loc 1 1602 0
 2554 003c 0300A0E1 		mov	r0, r3
 2555 0040 04D04BE2 		sub	sp, fp, #4
 2556 0044 0088BDE8 		ldmfd	sp!, {fp, pc}
 2557              		.cfi_endproc
 2558              	.LFE25:
 2560              		.section	.text.xsvfDoXWAIT,"ax",%progbits
 2561              		.align	2
 2562              		.global	xsvfDoXWAIT
 2564              	xsvfDoXWAIT:
 2565              	.LFB26:
1603:../Xilinx_src/micro.c **** 
1604:../Xilinx_src/micro.c **** /*****************************************************************************
1605:../Xilinx_src/micro.c **** * Function:     xsvfDoXWAIT
1606:../Xilinx_src/micro.c **** * Description:  XWAIT <wait_state> <end_state> <wait_time>
1607:../Xilinx_src/micro.c **** *               If not already in <wait_state>, then go to <wait_state>.
1608:../Xilinx_src/micro.c **** *               Wait in <wait_state> for <wait_time> microseconds.
1609:../Xilinx_src/micro.c **** *               Finally, if not already in <end_state>, then goto <end_state>.
1610:../Xilinx_src/micro.c **** * Parameters:   pXsvfInfo   - XSVF information pointer.
1611:../Xilinx_src/micro.c **** * Returns:      int         - 0 = success;  non-zero = error.
1612:../Xilinx_src/micro.c **** *****************************************************************************/
1613:../Xilinx_src/micro.c **** int xsvfDoXWAIT( SXsvfInfo* pXsvfInfo )
1614:../Xilinx_src/micro.c **** {
 2566              		.loc 1 1614 0
 2567              		.cfi_startproc
 2568              		@ args = 0, pretend = 0, frame = 16
 2569              		@ frame_needed = 1, uses_anonymous_args = 0
 2570 0000 00482DE9 		stmfd	sp!, {fp, lr}
 2571              	.LCFI52:
 2572              		.cfi_def_cfa_offset 8
 2573 0004 04B08DE2 		add	fp, sp, #4
 2574              		.cfi_offset 14, -4
 2575              		.cfi_offset 11, -8
 2576              	.LCFI53:
 2577              		.cfi_def_cfa 11, 4
 2578 0008 10D04DE2 		sub	sp, sp, #16
 2579 000c 10000BE5 		str	r0, [fp, #-16]
1615:../Xilinx_src/micro.c ****     unsigned char   ucWaitState;
1616:../Xilinx_src/micro.c ****     unsigned char   ucEndState;
1617:../Xilinx_src/micro.c ****     long            lWaitTime;
1618:../Xilinx_src/micro.c **** 
1619:../Xilinx_src/micro.c ****     /* Get Parameters */
1620:../Xilinx_src/micro.c ****     /* <wait_state> */
1621:../Xilinx_src/micro.c ****     readVal( &(pXsvfInfo->lvTdi), 1 );
 2580              		.loc 1 1621 0
 2581 0010 10301BE5 		ldr	r3, [fp, #-16]
 2582 0014 1A3083E2 		add	r3, r3, #26
 2583 0018 0300A0E1 		mov	r0, r3
 2584 001c 0110A0E3 		mov	r1, #1
 2585 0020 FEFFFFEB 		bl	readVal
1622:../Xilinx_src/micro.c ****     ucWaitState = pXsvfInfo->lvTdi.val[0];
 2586              		.loc 1 1622 0
 2587 0024 10301BE5 		ldr	r3, [fp, #-16]
 2588 0028 1C30D3E5 		ldrb	r3, [r3, #28]
 2589 002c 05304BE5 		strb	r3, [fp, #-5]
1623:../Xilinx_src/micro.c **** 
1624:../Xilinx_src/micro.c ****     /* <end_state> */
1625:../Xilinx_src/micro.c ****     readVal( &(pXsvfInfo->lvTdi), 1 );
 2590              		.loc 1 1625 0
 2591 0030 10301BE5 		ldr	r3, [fp, #-16]
 2592 0034 1A3083E2 		add	r3, r3, #26
 2593 0038 0300A0E1 		mov	r0, r3
 2594 003c 0110A0E3 		mov	r1, #1
 2595 0040 FEFFFFEB 		bl	readVal
1626:../Xilinx_src/micro.c ****     ucEndState = pXsvfInfo->lvTdi.val[0];
 2596              		.loc 1 1626 0
 2597 0044 10301BE5 		ldr	r3, [fp, #-16]
 2598 0048 1C30D3E5 		ldrb	r3, [r3, #28]
 2599 004c 06304BE5 		strb	r3, [fp, #-6]
1627:../Xilinx_src/micro.c **** 
1628:../Xilinx_src/micro.c ****     /* <wait_time> */
1629:../Xilinx_src/micro.c ****     readVal( &(pXsvfInfo->lvTdi), 4 );
 2600              		.loc 1 1629 0
 2601 0050 10301BE5 		ldr	r3, [fp, #-16]
 2602 0054 1A3083E2 		add	r3, r3, #26
 2603 0058 0300A0E1 		mov	r0, r3
 2604 005c 0410A0E3 		mov	r1, #4
 2605 0060 FEFFFFEB 		bl	readVal
1630:../Xilinx_src/micro.c ****     lWaitTime = value( &(pXsvfInfo->lvTdi) );
 2606              		.loc 1 1630 0
 2607 0064 10301BE5 		ldr	r3, [fp, #-16]
 2608 0068 1A3083E2 		add	r3, r3, #26
 2609 006c 0300A0E1 		mov	r0, r3
 2610 0070 FEFFFFEB 		bl	value
 2611 0074 0C000BE5 		str	r0, [fp, #-12]
1631:../Xilinx_src/micro.c ****     XSVFDBG_PRINTF2( 3, "   XWAIT:  state = %s; time = %d\n",
1632:../Xilinx_src/micro.c ****                      xsvf_pzTapState[ ucWaitState ], lWaitTime );
1633:../Xilinx_src/micro.c **** 
1634:../Xilinx_src/micro.c ****     /* If not already in <wait_state>, go to <wait_state> */
1635:../Xilinx_src/micro.c ****     if ( pXsvfInfo->ucTapState != ucWaitState )
 2612              		.loc 1 1635 0
 2613 0078 10301BE5 		ldr	r3, [fp, #-16]
 2614 007c 0C30D3E5 		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 2615 0080 05205BE5 		ldrb	r2, [fp, #-5]	@ zero_extendqisi2
 2616 0084 030052E1 		cmp	r2, r3
 2617 0088 0500000A 		beq	.L136
1636:../Xilinx_src/micro.c ****     {
1637:../Xilinx_src/micro.c ****         xsvfGotoTapState( &(pXsvfInfo->ucTapState), ucWaitState );
 2618              		.loc 1 1637 0
 2619 008c 10301BE5 		ldr	r3, [fp, #-16]
 2620 0090 0C2083E2 		add	r2, r3, #12
 2621 0094 05305BE5 		ldrb	r3, [fp, #-5]	@ zero_extendqisi2
 2622 0098 0200A0E1 		mov	r0, r2
 2623 009c 0310A0E1 		mov	r1, r3
 2624 00a0 FEFFFFEB 		bl	xsvfGotoTapState
 2625              	.L136:
1638:../Xilinx_src/micro.c ****     }
1639:../Xilinx_src/micro.c **** 
1640:../Xilinx_src/micro.c ****     /* Wait for <wait_time> microseconds */
1641:../Xilinx_src/micro.c ****     waitTime( lWaitTime );
 2626              		.loc 1 1641 0
 2627 00a4 0C001BE5 		ldr	r0, [fp, #-12]
 2628 00a8 FEFFFFEB 		bl	waitTime
1642:../Xilinx_src/micro.c **** 
1643:../Xilinx_src/micro.c ****     /* If not already in <end_state>, go to <end_state> */
1644:../Xilinx_src/micro.c ****     if ( pXsvfInfo->ucTapState != ucEndState )
 2629              		.loc 1 1644 0
 2630 00ac 10301BE5 		ldr	r3, [fp, #-16]
 2631 00b0 0C30D3E5 		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 2632 00b4 06205BE5 		ldrb	r2, [fp, #-6]	@ zero_extendqisi2
 2633 00b8 030052E1 		cmp	r2, r3
 2634 00bc 0500000A 		beq	.L137
1645:../Xilinx_src/micro.c ****     {
1646:../Xilinx_src/micro.c ****         xsvfGotoTapState( &(pXsvfInfo->ucTapState), ucEndState );
 2635              		.loc 1 1646 0
 2636 00c0 10301BE5 		ldr	r3, [fp, #-16]
 2637 00c4 0C2083E2 		add	r2, r3, #12
 2638 00c8 06305BE5 		ldrb	r3, [fp, #-6]	@ zero_extendqisi2
 2639 00cc 0200A0E1 		mov	r0, r2
 2640 00d0 0310A0E1 		mov	r1, r3
 2641 00d4 FEFFFFEB 		bl	xsvfGotoTapState
 2642              	.L137:
1647:../Xilinx_src/micro.c ****     }
1648:../Xilinx_src/micro.c **** 
1649:../Xilinx_src/micro.c ****     return( XSVF_ERROR_NONE );
 2643              		.loc 1 1649 0
 2644 00d8 0030A0E3 		mov	r3, #0
1650:../Xilinx_src/micro.c **** }
 2645              		.loc 1 1650 0
 2646 00dc 0300A0E1 		mov	r0, r3
 2647 00e0 04D04BE2 		sub	sp, fp, #4
 2648 00e4 0088BDE8 		ldmfd	sp!, {fp, pc}
 2649              		.cfi_endproc
 2650              	.LFE26:
 2652              		.section	.text.xsvfInitialize,"ax",%progbits
 2653              		.align	2
 2654              		.global	xsvfInitialize
 2656              	xsvfInitialize:
 2657              	.LFB27:
1651:../Xilinx_src/micro.c **** 
1652:../Xilinx_src/micro.c **** 
1653:../Xilinx_src/micro.c **** /*============================================================================
1654:../Xilinx_src/micro.c **** * Execution Control Functions
1655:../Xilinx_src/micro.c **** ============================================================================*/
1656:../Xilinx_src/micro.c **** 
1657:../Xilinx_src/micro.c **** /*****************************************************************************
1658:../Xilinx_src/micro.c **** * Function:     xsvfInitialize
1659:../Xilinx_src/micro.c **** * Description:  Initialize the xsvf player.
1660:../Xilinx_src/micro.c **** *               Call this before running the player to initialize the data
1661:../Xilinx_src/micro.c **** *               in the SXsvfInfo struct.
1662:../Xilinx_src/micro.c **** *               xsvfCleanup is called to clean up the data in SXsvfInfo
1663:../Xilinx_src/micro.c **** *               after the XSVF is played.
1664:../Xilinx_src/micro.c **** * Parameters:   pXsvfInfo   - ptr to the XSVF information.
1665:../Xilinx_src/micro.c **** * Returns:      int - 0 = success; otherwise error.
1666:../Xilinx_src/micro.c **** *****************************************************************************/
1667:../Xilinx_src/micro.c **** int xsvfInitialize( SXsvfInfo* pXsvfInfo )
1668:../Xilinx_src/micro.c **** {
 2658              		.loc 1 1668 0
 2659              		.cfi_startproc
 2660              		@ args = 0, pretend = 0, frame = 8
 2661              		@ frame_needed = 1, uses_anonymous_args = 0
 2662 0000 00482DE9 		stmfd	sp!, {fp, lr}
 2663              	.LCFI54:
 2664              		.cfi_def_cfa_offset 8
 2665 0004 04B08DE2 		add	fp, sp, #4
 2666              		.cfi_offset 14, -4
 2667              		.cfi_offset 11, -8
 2668              	.LCFI55:
 2669              		.cfi_def_cfa 11, 4
 2670 0008 08D04DE2 		sub	sp, sp, #8
 2671 000c 08000BE5 		str	r0, [fp, #-8]
1669:../Xilinx_src/micro.c ****     /* Initialize values */
1670:../Xilinx_src/micro.c ****     pXsvfInfo->iErrorCode   = xsvfInfoInit( pXsvfInfo );
 2672              		.loc 1 1670 0
 2673 0010 08001BE5 		ldr	r0, [fp, #-8]
 2674 0014 FEFFFFEB 		bl	xsvfInfoInit
 2675 0018 0020A0E1 		mov	r2, r0
 2676 001c 08301BE5 		ldr	r3, [fp, #-8]
 2677 0020 082083E5 		str	r2, [r3, #8]
1671:../Xilinx_src/micro.c **** 
1672:../Xilinx_src/micro.c ****     if ( !pXsvfInfo->iErrorCode )
 2678              		.loc 1 1672 0
 2679 0024 08301BE5 		ldr	r3, [fp, #-8]
 2680 0028 083093E5 		ldr	r3, [r3, #8]
 2681 002c 000053E3 		cmp	r3, #0
 2682 0030 0700001A 		bne	.L139
1673:../Xilinx_src/micro.c ****     {
1674:../Xilinx_src/micro.c ****         /* Initialize the TAPs */
1675:../Xilinx_src/micro.c ****         pXsvfInfo->iErrorCode   = xsvfGotoTapState( &(pXsvfInfo->ucTapState),
 2683              		.loc 1 1675 0
 2684 0034 08301BE5 		ldr	r3, [fp, #-8]
 2685 0038 0C3083E2 		add	r3, r3, #12
 2686 003c 0300A0E1 		mov	r0, r3
 2687 0040 0010A0E3 		mov	r1, #0
 2688 0044 FEFFFFEB 		bl	xsvfGotoTapState
 2689 0048 0020A0E1 		mov	r2, r0
 2690 004c 08301BE5 		ldr	r3, [fp, #-8]
 2691 0050 082083E5 		str	r2, [r3, #8]
 2692              	.L139:
1676:../Xilinx_src/micro.c ****                                                     XTAPSTATE_RESET );
1677:../Xilinx_src/micro.c ****     }
1678:../Xilinx_src/micro.c **** 
1679:../Xilinx_src/micro.c ****     return( pXsvfInfo->iErrorCode );
 2693              		.loc 1 1679 0
 2694 0054 08301BE5 		ldr	r3, [fp, #-8]
 2695 0058 083093E5 		ldr	r3, [r3, #8]
1680:../Xilinx_src/micro.c **** }
 2696              		.loc 1 1680 0
 2697 005c 0300A0E1 		mov	r0, r3
 2698 0060 04D04BE2 		sub	sp, fp, #4
 2699 0064 0088BDE8 		ldmfd	sp!, {fp, pc}
 2700              		.cfi_endproc
 2701              	.LFE27:
 2703              		.section	.text.xsvfRun,"ax",%progbits
 2704              		.align	2
 2705              		.global	xsvfRun
 2707              	xsvfRun:
 2708              	.LFB28:
1681:../Xilinx_src/micro.c **** 
1682:../Xilinx_src/micro.c **** /*****************************************************************************
1683:../Xilinx_src/micro.c **** * Function:     xsvfRun
1684:../Xilinx_src/micro.c **** * Description:  Run the xsvf player for a single command and return.
1685:../Xilinx_src/micro.c **** *               First, call xsvfInitialize.
1686:../Xilinx_src/micro.c **** *               Then, repeatedly call this function until an error is detected
1687:../Xilinx_src/micro.c **** *               or until the pXsvfInfo->ucComplete variable is non-zero.
1688:../Xilinx_src/micro.c **** *               Finally, call xsvfCleanup to cleanup any remnants.
1689:../Xilinx_src/micro.c **** * Parameters:   pXsvfInfo   - ptr to the XSVF information.
1690:../Xilinx_src/micro.c **** * Returns:      int         - 0 = success; otherwise error.
1691:../Xilinx_src/micro.c **** *****************************************************************************/
1692:../Xilinx_src/micro.c **** int xsvfRun( SXsvfInfo* pXsvfInfo )
1693:../Xilinx_src/micro.c **** {
 2709              		.loc 1 1693 0
 2710              		.cfi_startproc
 2711              		@ args = 0, pretend = 0, frame = 8
 2712              		@ frame_needed = 1, uses_anonymous_args = 0
 2713 0000 00482DE9 		stmfd	sp!, {fp, lr}
 2714              	.LCFI56:
 2715              		.cfi_def_cfa_offset 8
 2716 0004 04B08DE2 		add	fp, sp, #4
 2717              		.cfi_offset 14, -4
 2718              		.cfi_offset 11, -8
 2719              	.LCFI57:
 2720              		.cfi_def_cfa 11, 4
 2721 0008 08D04DE2 		sub	sp, sp, #8
 2722 000c 08000BE5 		str	r0, [fp, #-8]
1694:../Xilinx_src/micro.c ****     /* Process the XSVF commands */
1695:../Xilinx_src/micro.c ****     if ( (!pXsvfInfo->iErrorCode) && (!pXsvfInfo->ucComplete) )
 2723              		.loc 1 1695 0
 2724 0010 08301BE5 		ldr	r3, [fp, #-8]
 2725 0014 083093E5 		ldr	r3, [r3, #8]
 2726 0018 000053E3 		cmp	r3, #0
 2727 001c 1A00001A 		bne	.L141
 2728              		.loc 1 1695 0 is_stmt 0 discriminator 1
 2729 0020 08301BE5 		ldr	r3, [fp, #-8]
 2730 0024 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2731 0028 000053E3 		cmp	r3, #0
 2732 002c 1600001A 		bne	.L141
1696:../Xilinx_src/micro.c ****     {
1697:../Xilinx_src/micro.c ****         /* read 1 byte for the instruction */
1698:../Xilinx_src/micro.c ****         readByte( &(pXsvfInfo->ucCommand) );
 2733              		.loc 1 1698 0 is_stmt 1
 2734 0030 08301BE5 		ldr	r3, [fp, #-8]
 2735 0034 013083E2 		add	r3, r3, #1
 2736 0038 0300A0E1 		mov	r0, r3
 2737 003c FEFFFFEB 		bl	readByte
1699:../Xilinx_src/micro.c ****         ++(pXsvfInfo->lCommandCount);
 2738              		.loc 1 1699 0
 2739 0040 08301BE5 		ldr	r3, [fp, #-8]
 2740 0044 043093E5 		ldr	r3, [r3, #4]
 2741 0048 012083E2 		add	r2, r3, #1
 2742 004c 08301BE5 		ldr	r3, [fp, #-8]
 2743 0050 042083E5 		str	r2, [r3, #4]
1700:../Xilinx_src/micro.c **** 
1701:../Xilinx_src/micro.c ****         if ( pXsvfInfo->ucCommand < XLASTCMD )
 2744              		.loc 1 1701 0
 2745 0054 08301BE5 		ldr	r3, [fp, #-8]
 2746 0058 0130D3E5 		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2747 005c 170053E3 		cmp	r3, #23
 2748 0060 0700008A 		bhi	.L142
1702:../Xilinx_src/micro.c ****         {
1703:../Xilinx_src/micro.c ****             /* Execute the command.  Func sets error code. */
1704:../Xilinx_src/micro.c ****             XSVFDBG_PRINTF1( 2, "  %s\n",
1705:../Xilinx_src/micro.c ****                              xsvf_pzCommandName[pXsvfInfo->ucCommand] );
1706:../Xilinx_src/micro.c ****             /* If your compiler cannot take this form,
1707:../Xilinx_src/micro.c ****                then convert to a switch statement */
1708:../Xilinx_src/micro.c ****             xsvf_pfDoCmd[ pXsvfInfo->ucCommand ]( pXsvfInfo );
 2749              		.loc 1 1708 0
 2750 0064 08301BE5 		ldr	r3, [fp, #-8]
 2751 0068 0130D3E5 		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2752 006c 0320A0E1 		mov	r2, r3
 2753 0070 28309FE5 		ldr	r3, .L143
 2754 0074 023193E7 		ldr	r3, [r3, r2, asl #2]
 2755 0078 08001BE5 		ldr	r0, [fp, #-8]
 2756 007c 33FF2FE1 		blx	r3
 2757 0080 010000EA 		b	.L141
 2758              	.L142:
1709:../Xilinx_src/micro.c ****         }
1710:../Xilinx_src/micro.c ****         else
1711:../Xilinx_src/micro.c ****         {
1712:../Xilinx_src/micro.c ****             /* Illegal command value.  Func sets error code. */
1713:../Xilinx_src/micro.c ****             xsvfDoIllegalCmd( pXsvfInfo );
 2759              		.loc 1 1713 0
 2760 0084 08001BE5 		ldr	r0, [fp, #-8]
 2761 0088 FEFFFFEB 		bl	xsvfDoIllegalCmd
 2762              	.L141:
1714:../Xilinx_src/micro.c ****         }
1715:../Xilinx_src/micro.c ****     }
1716:../Xilinx_src/micro.c **** 
1717:../Xilinx_src/micro.c ****     return( pXsvfInfo->iErrorCode );
 2763              		.loc 1 1717 0
 2764 008c 08301BE5 		ldr	r3, [fp, #-8]
 2765 0090 083093E5 		ldr	r3, [r3, #8]
1718:../Xilinx_src/micro.c **** }
 2766              		.loc 1 1718 0
 2767 0094 0300A0E1 		mov	r0, r3
 2768 0098 04D04BE2 		sub	sp, fp, #4
 2769 009c 0088BDE8 		ldmfd	sp!, {fp, pc}
 2770              	.L144:
 2771              		.align	2
 2772              	.L143:
 2773 00a0 00000000 		.word	xsvf_pfDoCmd
 2774              		.cfi_endproc
 2775              	.LFE28:
 2777              		.section	.text.xsvfCleanup,"ax",%progbits
 2778              		.align	2
 2779              		.global	xsvfCleanup
 2781              	xsvfCleanup:
 2782              	.LFB29:
1719:../Xilinx_src/micro.c **** 
1720:../Xilinx_src/micro.c **** /*****************************************************************************
1721:../Xilinx_src/micro.c **** * Function:     xsvfCleanup
1722:../Xilinx_src/micro.c **** * Description:  cleanup remnants of the xsvf player.
1723:../Xilinx_src/micro.c **** * Parameters:   pXsvfInfo   - ptr to the XSVF information.
1724:../Xilinx_src/micro.c **** * Returns:      void.
1725:../Xilinx_src/micro.c **** *****************************************************************************/
1726:../Xilinx_src/micro.c **** void xsvfCleanup( SXsvfInfo* pXsvfInfo )
1727:../Xilinx_src/micro.c **** {
 2783              		.loc 1 1727 0
 2784              		.cfi_startproc
 2785              		@ args = 0, pretend = 0, frame = 8
 2786              		@ frame_needed = 1, uses_anonymous_args = 0
 2787 0000 00482DE9 		stmfd	sp!, {fp, lr}
 2788              	.LCFI58:
 2789              		.cfi_def_cfa_offset 8
 2790 0004 04B08DE2 		add	fp, sp, #4
 2791              		.cfi_offset 14, -4
 2792              		.cfi_offset 11, -8
 2793              	.LCFI59:
 2794              		.cfi_def_cfa 11, 4
 2795 0008 08D04DE2 		sub	sp, sp, #8
 2796 000c 08000BE5 		str	r0, [fp, #-8]
1728:../Xilinx_src/micro.c ****     xsvfInfoCleanup( pXsvfInfo );
 2797              		.loc 1 1728 0
 2798 0010 08001BE5 		ldr	r0, [fp, #-8]
 2799 0014 FEFFFFEB 		bl	xsvfInfoCleanup
1729:../Xilinx_src/micro.c **** }
 2800              		.loc 1 1729 0
 2801 0018 04D04BE2 		sub	sp, fp, #4
 2802 001c 0088BDE8 		ldmfd	sp!, {fp, pc}
 2803              		.cfi_endproc
 2804              	.LFE29:
 2806              		.comm	xsvfInfo,14392,4
 2807              		.section	.rodata
 2808              		.align	2
 2809              	.LC0:
 2810 0000 0A535543 		.ascii	"\012SUCCESS - Completed XSVF execution.\012\000"
 2810      43455353 
 2810      202D2043 
 2810      6F6D706C 
 2810      65746564 
 2811 0026 0000     		.section	.text.xsvfExecute,"ax",%progbits
 2812              		.align	2
 2813              		.global	xsvfExecute
 2815              	xsvfExecute:
 2816              	.LFB30:
1730:../Xilinx_src/micro.c **** 
1731:../Xilinx_src/micro.c **** 
1732:../Xilinx_src/micro.c **** /*============================================================================
1733:../Xilinx_src/micro.c **** * xsvfExecute() - The primary entry point to the XSVF player
1734:../Xilinx_src/micro.c **** ============================================================================*/
1735:../Xilinx_src/micro.c **** 
1736:../Xilinx_src/micro.c **** /*****************************************************************************
1737:../Xilinx_src/micro.c **** * Function:     xsvfExecute
1738:../Xilinx_src/micro.c **** * Description:  Process, interpret, and apply the XSVF commands.
1739:../Xilinx_src/micro.c **** *               See port.c:readByte for source of XSVF data.
1740:../Xilinx_src/micro.c **** * Parameters:   none.
1741:../Xilinx_src/micro.c **** * Returns:      int - Legacy result values:  1 == success;  0 == failed.
1742:../Xilinx_src/micro.c **** *****************************************************************************/
1743:../Xilinx_src/micro.c **** SXsvfInfo   xsvfInfo;
1744:../Xilinx_src/micro.c **** int xsvfExecute()
1745:../Xilinx_src/micro.c **** {
 2817              		.loc 1 1745 0
 2818              		.cfi_startproc
 2819              		@ args = 0, pretend = 0, frame = 0
 2820              		@ frame_needed = 1, uses_anonymous_args = 0
 2821 0000 00482DE9 		stmfd	sp!, {fp, lr}
 2822              	.LCFI60:
 2823              		.cfi_def_cfa_offset 8
 2824 0004 04B08DE2 		add	fp, sp, #4
 2825              		.cfi_offset 14, -4
 2826              		.cfi_offset 11, -8
 2827              	.LCFI61:
 2828              		.cfi_def_cfa 11, 4
1746:../Xilinx_src/micro.c **** ////	SXsvfInfo   xsvfInfo;	// Moved this to global memory so that it wasn't on the stack
1747:../Xilinx_src/micro.c **** 
1748:../Xilinx_src/micro.c **** 	xsvfInitialize( &xsvfInfo );
 2829              		.loc 1 1748 0
 2830 0008 60009FE5 		ldr	r0, .L151
 2831 000c FEFFFFEB 		bl	xsvfInitialize
1749:../Xilinx_src/micro.c **** 
1750:../Xilinx_src/micro.c ****     while ( !xsvfInfo.iErrorCode && (!xsvfInfo.ucComplete) )
 2832              		.loc 1 1750 0
 2833 0010 010000EA 		b	.L147
 2834              	.L149:
1751:../Xilinx_src/micro.c ****     {
1752:../Xilinx_src/micro.c ****         xsvfRun( &xsvfInfo );
 2835              		.loc 1 1752 0
 2836 0014 54009FE5 		ldr	r0, .L151
 2837 0018 FEFFFFEB 		bl	xsvfRun
 2838              	.L147:
1750:../Xilinx_src/micro.c ****     while ( !xsvfInfo.iErrorCode && (!xsvfInfo.ucComplete) )
 2839              		.loc 1 1750 0 discriminator 1
 2840 001c 4C309FE5 		ldr	r3, .L151
 2841 0020 083093E5 		ldr	r3, [r3, #8]
 2842 0024 000053E3 		cmp	r3, #0
 2843 0028 0300001A 		bne	.L148
1750:../Xilinx_src/micro.c ****     while ( !xsvfInfo.iErrorCode && (!xsvfInfo.ucComplete) )
 2844              		.loc 1 1750 0 is_stmt 0 discriminator 2
 2845 002c 3C309FE5 		ldr	r3, .L151
 2846 0030 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2847 0034 000053E3 		cmp	r3, #0
 2848 0038 F5FFFF0A 		beq	.L149
 2849              	.L148:
1753:../Xilinx_src/micro.c ****     }
1754:../Xilinx_src/micro.c **** 
1755:../Xilinx_src/micro.c ****     if ( xsvfInfo.iErrorCode )
 2850              		.loc 1 1755 0 is_stmt 1
 2851 003c 2C309FE5 		ldr	r3, .L151
 2852 0040 083093E5 		ldr	r3, [r3, #8]
 2853 0044 000053E3 		cmp	r3, #0
 2854 0048 0200001A 		bne	.L150
1756:../Xilinx_src/micro.c ****     {
1757:../Xilinx_src/micro.c ****         XSVFDBG_PRINTF1( 0, "%s\n", xsvf_pzErrorName[
1758:../Xilinx_src/micro.c ****                          ( xsvfInfo.iErrorCode < XSVF_ERROR_LAST )
1759:../Xilinx_src/micro.c ****                          ? xsvfInfo.iErrorCode : XSVF_ERROR_UNKNOWN ] );
1760:../Xilinx_src/micro.c ****         XSVFDBG_PRINTF2( 0, "ERROR at or near XSVF command #%d.  See line #%d in the XSVF ASCII fil
1761:../Xilinx_src/micro.c ****                          xsvfInfo.lCommandCount, xsvfInfo.lCommandCount );
1762:../Xilinx_src/micro.c ****     }
1763:../Xilinx_src/micro.c ****     else
1764:../Xilinx_src/micro.c ****     {
1765:../Xilinx_src/micro.c ****     	CyU3PDebugPrint(4, "\nSUCCESS - Completed XSVF execution.\n");
 2855              		.loc 1 1765 0
 2856 004c 0400A0E3 		mov	r0, #4
 2857 0050 1C109FE5 		ldr	r1, .L151+4
 2858 0054 FEFFFFEB 		bl	CyU3PDebugPrint
 2859              	.L150:
1766:../Xilinx_src/micro.c ****         XSVFDBG_PRINTF( 0, "SUCCESS - Completed XSVF execution.\n" );
1767:../Xilinx_src/micro.c ****     }
1768:../Xilinx_src/micro.c **** 
1769:../Xilinx_src/micro.c ****     xsvfCleanup( &xsvfInfo );
 2860              		.loc 1 1769 0
 2861 0058 10009FE5 		ldr	r0, .L151
 2862 005c FEFFFFEB 		bl	xsvfCleanup
1770:../Xilinx_src/micro.c **** 
1771:../Xilinx_src/micro.c ****     return( XSVF_ERRORCODE(xsvfInfo.iErrorCode) );
 2863              		.loc 1 1771 0
 2864 0060 08309FE5 		ldr	r3, .L151
 2865 0064 083093E5 		ldr	r3, [r3, #8]
1772:../Xilinx_src/micro.c **** }
 2866              		.loc 1 1772 0
 2867 0068 0300A0E1 		mov	r0, r3
 2868 006c 0088BDE8 		ldmfd	sp!, {fp, pc}
 2869              	.L152:
 2870              		.align	2
 2871              	.L151:
 2872 0070 00000000 		.word	xsvfInfo
 2873 0074 00000000 		.word	.LC0
 2874              		.cfi_endproc
 2875              	.LFE30:
 2877              		.text
 2878              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 micro.c
C:\Users\John\AppData\Local\Temp\ccOILO2H.s:26     .data.xsvf_pfDoCmd:00000000 xsvf_pfDoCmd
C:\Users\John\AppData\Local\Temp\ccOILO2H.s:23     .data.xsvf_pfDoCmd:00000000 $d
C:\Users\John\AppData\Local\Temp\ccOILO2H.s:1315   .text.xsvfDoXCOMPLETE:00000000 xsvfDoXCOMPLETE
C:\Users\John\AppData\Local\Temp\ccOILO2H.s:1349   .text.xsvfDoXTDOMASK:00000000 xsvfDoXTDOMASK
C:\Users\John\AppData\Local\Temp\ccOILO2H.s:1389   .text.xsvfDoXSIR:00000000 xsvfDoXSIR
C:\Users\John\AppData\Local\Temp\ccOILO2H.s:1590   .text.xsvfDoXSDR:00000000 xsvfDoXSDR
C:\Users\John\AppData\Local\Temp\ccOILO2H.s:1682   .text.xsvfDoXRUNTEST:00000000 xsvfDoXRUNTEST
C:\Users\John\AppData\Local\Temp\ccOILO2H.s:1280   .text.xsvfDoIllegalCmd:00000000 xsvfDoIllegalCmd
C:\Users\John\AppData\Local\Temp\ccOILO2H.s:1725   .text.xsvfDoXREPEAT:00000000 xsvfDoXREPEAT
C:\Users\John\AppData\Local\Temp\ccOILO2H.s:1759   .text.xsvfDoXSDRSIZE:00000000 xsvfDoXSDRSIZE
C:\Users\John\AppData\Local\Temp\ccOILO2H.s:1829   .text.xsvfDoXSDRTDO:00000000 xsvfDoXSDRTDO
C:\Users\John\AppData\Local\Temp\ccOILO2H.s:1918   .text.xsvfDoXSETSDRMASKS:00000000 xsvfDoXSETSDRMASKS
C:\Users\John\AppData\Local\Temp\ccOILO2H.s:1969   .text.xsvfDoXSDRINC:00000000 xsvfDoXSDRINC
C:\Users\John\AppData\Local\Temp\ccOILO2H.s:2205   .text.xsvfDoXSDRBCE:00000000 xsvfDoXSDRBCE
C:\Users\John\AppData\Local\Temp\ccOILO2H.s:2288   .text.xsvfDoXSDRTDOBCE:00000000 xsvfDoXSDRTDOBCE
C:\Users\John\AppData\Local\Temp\ccOILO2H.s:2377   .text.xsvfDoXSTATE:00000000 xsvfDoXSTATE
C:\Users\John\AppData\Local\Temp\ccOILO2H.s:2427   .text.xsvfDoXENDXR:00000000 xsvfDoXENDXR
C:\Users\John\AppData\Local\Temp\ccOILO2H.s:1487   .text.xsvfDoXSIR2:00000000 xsvfDoXSIR2
C:\Users\John\AppData\Local\Temp\ccOILO2H.s:2521   .text.xsvfDoXCOMMENT:00000000 xsvfDoXCOMMENT
C:\Users\John\AppData\Local\Temp\ccOILO2H.s:2564   .text.xsvfDoXWAIT:00000000 xsvfDoXWAIT
C:\Users\John\AppData\Local\Temp\ccOILO2H.s:52     .text.xsvfInfoInit:00000000 $a
C:\Users\John\AppData\Local\Temp\ccOILO2H.s:55     .text.xsvfInfoInit:00000000 xsvfInfoInit
C:\Users\John\AppData\Local\Temp\ccOILO2H.s:127    .text.xsvfInfoCleanup:00000000 $a
C:\Users\John\AppData\Local\Temp\ccOILO2H.s:130    .text.xsvfInfoCleanup:00000000 xsvfInfoCleanup
C:\Users\John\AppData\Local\Temp\ccOILO2H.s:154    .text.xsvfGetAsNumBytes:00000000 $a
C:\Users\John\AppData\Local\Temp\ccOILO2H.s:157    .text.xsvfGetAsNumBytes:00000000 xsvfGetAsNumBytes
C:\Users\John\AppData\Local\Temp\ccOILO2H.s:193    .text.xsvfTmsTransition:00000000 $a
C:\Users\John\AppData\Local\Temp\ccOILO2H.s:196    .text.xsvfTmsTransition:00000000 xsvfTmsTransition
C:\Users\John\AppData\Local\Temp\ccOILO2H.s:233    .text.xsvfGotoTapState:00000000 $a
C:\Users\John\AppData\Local\Temp\ccOILO2H.s:236    .text.xsvfGotoTapState:00000000 xsvfGotoTapState
C:\Users\John\AppData\Local\Temp\ccOILO2H.s:364    .text.xsvfGotoTapState:00000148 $d
C:\Users\John\AppData\Local\Temp\ccOILO2H.s:382    .text.xsvfGotoTapState:00000188 $a
C:\Users\John\AppData\Local\Temp\ccOILO2H.s:700    .text.xsvfShiftOnly:00000000 $a
C:\Users\John\AppData\Local\Temp\ccOILO2H.s:703    .text.xsvfShiftOnly:00000000 xsvfShiftOnly
C:\Users\John\AppData\Local\Temp\ccOILO2H.s:867    .text.xsvfShift:00000000 $a
C:\Users\John\AppData\Local\Temp\ccOILO2H.s:870    .text.xsvfShift:00000000 xsvfShift
C:\Users\John\AppData\Local\Temp\ccOILO2H.s:1055   .text.xsvfBasicXSDRTDO:00000000 $a
C:\Users\John\AppData\Local\Temp\ccOILO2H.s:1058   .text.xsvfBasicXSDRTDO:00000000 xsvfBasicXSDRTDO
C:\Users\John\AppData\Local\Temp\ccOILO2H.s:1119   .text.xsvfDoSDRMasking:00000000 $a
C:\Users\John\AppData\Local\Temp\ccOILO2H.s:1122   .text.xsvfDoSDRMasking:00000000 xsvfDoSDRMasking
C:\Users\John\AppData\Local\Temp\ccOILO2H.s:1277   .text.xsvfDoIllegalCmd:00000000 $a
C:\Users\John\AppData\Local\Temp\ccOILO2H.s:1312   .text.xsvfDoXCOMPLETE:00000000 $a
C:\Users\John\AppData\Local\Temp\ccOILO2H.s:1346   .text.xsvfDoXTDOMASK:00000000 $a
C:\Users\John\AppData\Local\Temp\ccOILO2H.s:1386   .text.xsvfDoXSIR:00000000 $a
C:\Users\John\AppData\Local\Temp\ccOILO2H.s:1484   .text.xsvfDoXSIR2:00000000 $a
C:\Users\John\AppData\Local\Temp\ccOILO2H.s:1587   .text.xsvfDoXSDR:00000000 $a
C:\Users\John\AppData\Local\Temp\ccOILO2H.s:1679   .text.xsvfDoXRUNTEST:00000000 $a
C:\Users\John\AppData\Local\Temp\ccOILO2H.s:1722   .text.xsvfDoXREPEAT:00000000 $a
C:\Users\John\AppData\Local\Temp\ccOILO2H.s:1756   .text.xsvfDoXSDRSIZE:00000000 $a
C:\Users\John\AppData\Local\Temp\ccOILO2H.s:1826   .text.xsvfDoXSDRTDO:00000000 $a
C:\Users\John\AppData\Local\Temp\ccOILO2H.s:1915   .text.xsvfDoXSETSDRMASKS:00000000 $a
C:\Users\John\AppData\Local\Temp\ccOILO2H.s:1966   .text.xsvfDoXSDRINC:00000000 $a
C:\Users\John\AppData\Local\Temp\ccOILO2H.s:2196   .text.xsvfDoXSDRINC:00000288 $d
C:\Users\John\AppData\Local\Temp\ccOILO2H.s:2202   .text.xsvfDoXSDRBCE:00000000 $a
C:\Users\John\AppData\Local\Temp\ccOILO2H.s:2285   .text.xsvfDoXSDRTDOBCE:00000000 $a
C:\Users\John\AppData\Local\Temp\ccOILO2H.s:2374   .text.xsvfDoXSTATE:00000000 $a
C:\Users\John\AppData\Local\Temp\ccOILO2H.s:2424   .text.xsvfDoXENDXR:00000000 $a
C:\Users\John\AppData\Local\Temp\ccOILO2H.s:2518   .text.xsvfDoXCOMMENT:00000000 $a
C:\Users\John\AppData\Local\Temp\ccOILO2H.s:2561   .text.xsvfDoXWAIT:00000000 $a
C:\Users\John\AppData\Local\Temp\ccOILO2H.s:2653   .text.xsvfInitialize:00000000 $a
C:\Users\John\AppData\Local\Temp\ccOILO2H.s:2656   .text.xsvfInitialize:00000000 xsvfInitialize
C:\Users\John\AppData\Local\Temp\ccOILO2H.s:2704   .text.xsvfRun:00000000 $a
C:\Users\John\AppData\Local\Temp\ccOILO2H.s:2707   .text.xsvfRun:00000000 xsvfRun
C:\Users\John\AppData\Local\Temp\ccOILO2H.s:2773   .text.xsvfRun:000000a0 $d
C:\Users\John\AppData\Local\Temp\ccOILO2H.s:2778   .text.xsvfCleanup:00000000 $a
C:\Users\John\AppData\Local\Temp\ccOILO2H.s:2781   .text.xsvfCleanup:00000000 xsvfCleanup
                            *COM*:00003838 xsvfInfo
C:\Users\John\AppData\Local\Temp\ccOILO2H.s:2808   .rodata:00000000 $d
C:\Users\John\AppData\Local\Temp\ccOILO2H.s:2812   .text.xsvfExecute:00000000 $a
C:\Users\John\AppData\Local\Temp\ccOILO2H.s:2815   .text.xsvfExecute:00000000 xsvfExecute
C:\Users\John\AppData\Local\Temp\ccOILO2H.s:2872   .text.xsvfExecute:00000070 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
setPort
readTDOBit
waitTime
EqualLenVal
readVal
addVal
readByte
value
CyU3PDebugPrint
