   1              		.cpu arm926ej-s
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 18, 4
  11              		.file	"I2C_DebugConsole.c"
  19              	.Ltext0:
  20              		.cfi_sections	.debug_frame
  21              		.section	.bss.I2C_DebugThread,"aw",%nobits
  22              		.align	2
  25              	I2C_DebugThread:
  26 0000 00000000 		.space	168
  26      00000000 
  26      00000000 
  26      00000000 
  26      00000000 
  27              		.section	.bss.I2C_DebugLock,"aw",%nobits
  28              		.align	2
  31              	I2C_DebugLock:
  32 0000 00000000 		.space	56
  32      00000000 
  32      00000000 
  32      00000000 
  32      00000000 
  33              		.section	.bss.I2C_DebugQueue,"aw",%nobits
  34              		.align	2
  37              	I2C_DebugQueue:
  38 0000 00000000 		.space	60
  38      00000000 
  38      00000000 
  38      00000000 
  38      00000000 
  39              		.section	.bss.I2C_DebugTXHandle,"aw",%nobits
  40              		.align	2
  43              	I2C_DebugTXHandle:
  44 0000 00000000 		.space	160
  44      00000000 
  44      00000000 
  44      00000000 
  44      00000000 
  45              		.section	.bss.I2C_DebugRXHandle,"aw",%nobits
  46              		.align	2
  49              	I2C_DebugRXHandle:
  50 0000 00000000 		.space	160
  50      00000000 
  50      00000000 
  50      00000000 
  50      00000000 
  51              		.comm	I2C_DebugEnabled,4,4
  52              		.section	.bss.Queue,"aw",%nobits
  53              		.align	2
  56              	Queue:
  57 0000 00000000 		.space	96
  57      00000000 
  57      00000000 
  57      00000000 
  57      00000000 
  58              		.section	.bss.I2C_DebugTraceLevel,"aw",%nobits
  61              	I2C_DebugTraceLevel:
  62 0000 00       		.space	1
  63              		.section	.rodata
  64              		.align	2
  65              	.LC0:
  66 0000 43795533 		.ascii	"CyU3PDmaBufferAlloc\000"
  66      50446D61 
  66      42756666 
  66      6572416C 
  66      6C6F6300 
  67              		.align	2
  68              	.LC1:
  69 0014 257300   		.ascii	"%s\000"
  70 0017 00       		.align	2
  71              	.LC2:
  72 0018 51756575 		.ascii	"QueueSend\000"
  72      6553656E 
  72      6400
  73              		.section	.text.I2C_DebugPrint,"ax",%progbits
  74              		.align	2
  75              		.global	I2C_DebugPrint
  77              	I2C_DebugPrint:
  78              	.LFB0:
  79              		.file 1 "../I2C_DebugConsole.c"
   1:../I2C_DebugConsole.c **** /*
   2:../I2C_DebugConsole.c ****  * I2C_DebugConsole.c
   3:../I2C_DebugConsole.c ****  *
   4:../I2C_DebugConsole.c ****  *  This module implements the DebugPrint portion of cyu3debug.c for an I2C-based console
   5:../I2C_DebugConsole.c ****  *    The LOG function is not implemented which makes this code simpler
   6:../I2C_DebugConsole.c ****  */
   7:../I2C_DebugConsole.c **** 
   8:../I2C_DebugConsole.c **** #include "Application.h"
   9:../I2C_DebugConsole.c **** #include <stdarg.h>        // For argument processing
  10:../I2C_DebugConsole.c **** #include <string.h>
  11:../I2C_DebugConsole.c **** 
  12:../I2C_DebugConsole.c **** // Declare external functions
  13:../I2C_DebugConsole.c **** extern void CheckStatus(char* StringPtr, CyU3PReturnStatus_t Status);
  14:../I2C_DebugConsole.c **** extern void GotConsoleInput(uint8_t Source, char InputChar);
  15:../I2C_DebugConsole.c **** extern CyU3PReturnStatus_t MyDebugSNPrint(uint8_t *debugMsg, uint16_t *length, char *message, va_li
  16:../I2C_DebugConsole.c **** 
  17:../I2C_DebugConsole.c **** // Variables static to this module
  18:../I2C_DebugConsole.c **** static CyU3PThread      I2C_DebugThread;
  19:../I2C_DebugConsole.c **** static CyU3PMutex       I2C_DebugLock;
  20:../I2C_DebugConsole.c **** static CyU3PQueue       I2C_DebugQueue;
  21:../I2C_DebugConsole.c **** static CyU3PDmaChannel  I2C_DebugTXHandle;
  22:../I2C_DebugConsole.c **** static CyU3PDmaChannel  I2C_DebugRXHandle;
  23:../I2C_DebugConsole.c **** CyBool_t         I2C_DebugEnabled;       // Debug Init has been called or not
  24:../I2C_DebugConsole.c **** static CyU3PDmaBuffer_t Queue[CY_U3P_DEBUG_DMA_BUFFER_COUNT];
  25:../I2C_DebugConsole.c **** static uint8_t          I2C_DebugTraceLevel;
  26:../I2C_DebugConsole.c **** 
  27:../I2C_DebugConsole.c **** CyU3PReturnStatus_t I2C_DebugPrint(uint8_t Priority, char* Message, ...)
  28:../I2C_DebugConsole.c **** {
  80              		.loc 1 28 0
  81              		.cfi_startproc
  82              		@ args = 4, pretend = 12, frame = 32
  83              		@ frame_needed = 1, uses_anonymous_args = 1
  84 0000 0E002DE9 		stmfd	sp!, {r1, r2, r3}
  85              	.LCFI0:
  86              		.cfi_def_cfa_offset 12
  87 0004 00482DE9 		stmfd	sp!, {fp, lr}
  88              	.LCFI1:
  89              		.cfi_def_cfa_offset 20
  90 0008 04B08DE2 		add	fp, sp, #4
  91              		.cfi_offset 14, -16
  92              		.cfi_offset 11, -20
  93              		.cfi_offset 3, -4
  94              		.cfi_offset 2, -8
  95              		.cfi_offset 1, -12
  96              	.LCFI2:
  97              		.cfi_def_cfa 11, 16
  98 000c 24D04DE2 		sub	sp, sp, #36
  99 0010 0030A0E1 		mov	r3, r0
 100 0014 21304BE5 		strb	r3, [fp, #-33]
  29:../I2C_DebugConsole.c ****     // This takes the same parameters as CyU3PDebugPrint and my code is modeled on CyU3PDebugPrint
  30:../I2C_DebugConsole.c ****     // I format Message, including any parameters, into a DMA Buffer then Queue this buffer for I2C
  31:../I2C_DebugConsole.c ****     // I check for Console Input after every Console Output
  32:../I2C_DebugConsole.c ****     // A Queue timeout is used to ensure that Console Input is called at least once a second
  33:../I2C_DebugConsole.c ****     CyU3PReturnStatus_t Status = CY_U3P_SUCCESS;
 101              		.loc 1 33 0
 102 0018 0030A0E3 		mov	r3, #0
 103 001c 0C300BE5 		str	r3, [fp, #-12]
  34:../I2C_DebugConsole.c ****     va_list argp;
  35:../I2C_DebugConsole.c ****     CyU3PDmaBuffer_t CurrentDMABuffer;
  36:../I2C_DebugConsole.c **** 
  37:../I2C_DebugConsole.c ****     // First do some error checking
  38:../I2C_DebugConsole.c ****     if (!I2C_DebugEnabled) return CY_U3P_ERROR_NOT_STARTED;
 104              		.loc 1 38 0
 105 0020 70319FE5 		ldr	r3, .L10
 106 0024 003093E5 		ldr	r3, [r3, #0]
 107 0028 000053E3 		cmp	r3, #0
 108 002c 0100001A 		bne	.L2
 109              		.loc 1 38 0 is_stmt 0 discriminator 1
 110 0030 4230A0E3 		mov	r3, #66
 111 0034 520000EA 		b	.L3
 112              	.L2:
  39:../I2C_DebugConsole.c ****     if (Priority > glDebugTraceLevel) return CY_U3P_SUCCESS;
 113              		.loc 1 39 0 is_stmt 1
 114 0038 5C319FE5 		ldr	r3, .L10+4
 115 003c 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 116 0040 21205BE5 		ldrb	r2, [fp, #-33]	@ zero_extendqisi2
 117 0044 030052E1 		cmp	r2, r3
 118 0048 0100009A 		bls	.L4
 119              		.loc 1 39 0 is_stmt 0 discriminator 1
 120 004c 0030A0E3 		mov	r3, #0
 121 0050 4B0000EA 		b	.L3
 122              	.L4:
  40:../I2C_DebugConsole.c ****     if (CyU3PThreadIdentify() == NULL) return CY_U3P_ERROR_INVALID_CALLER;    // This function can 
 123              		.loc 1 40 0 is_stmt 1
 124 0054 FEFFFFEB 		bl	_tx_thread_identify
 125 0058 0030A0E1 		mov	r3, r0
 126 005c 000053E3 		cmp	r3, #0
 127 0060 0100001A 		bne	.L5
 128              		.loc 1 40 0 is_stmt 0 discriminator 1
 129 0064 1330A0E3 		mov	r3, #19
 130 0068 450000EA 		b	.L3
 131              	.L5:
  41:../I2C_DebugConsole.c **** 
  42:../I2C_DebugConsole.c ****     // OK to proceed, get a buffer then use a Cypress routine to do the Message interpretation
  43:../I2C_DebugConsole.c ****     CyU3PMutexGet(&I2C_DebugLock, CYU3P_WAIT_FOREVER);
 132              		.loc 1 43 0 is_stmt 1
 133 006c 2C019FE5 		ldr	r0, .L10+8
 134 0070 0010E0E3 		mvn	r1, #0
 135 0074 FEFFFFEB 		bl	_txe_mutex_get
  44:../I2C_DebugConsole.c **** 
  45:../I2C_DebugConsole.c ****     // Allocate the buffer for formatting the string.
  46:../I2C_DebugConsole.c ****     CurrentDMABuffer.buffer = CyU3PDmaBufferAlloc(CY_U3P_DEBUG_DMA_BUFFER_SIZE);
 136              		.loc 1 46 0
 137 0078 010CA0E3 		mov	r0, #256
 138 007c FEFFFFEB 		bl	CyU3PDmaBufferAlloc
 139 0080 0030A0E1 		mov	r3, r0
 140 0084 1C300BE5 		str	r3, [fp, #-28]
  47:../I2C_DebugConsole.c ****     if (CurrentDMABuffer.buffer == NULL) CheckStatus("CyU3PDmaBufferAlloc", CY_U3P_ERROR_MEMORY_ERR
 141              		.loc 1 47 0
 142 0088 1C301BE5 		ldr	r3, [fp, #-28]
 143 008c 000053E3 		cmp	r3, #0
 144 0090 0200001A 		bne	.L6
 145              		.loc 1 47 0 is_stmt 0 discriminator 1
 146 0094 08019FE5 		ldr	r0, .L10+12
 147 0098 1010A0E3 		mov	r1, #16
 148 009c FEFFFFEB 		bl	CheckStatus
 149              	.L6:
  48:../I2C_DebugConsole.c **** 
  49:../I2C_DebugConsole.c ****     if (Status == CY_U3P_SUCCESS)   
 150              		.loc 1 49 0 is_stmt 1
 151 00a0 0C301BE5 		ldr	r3, [fp, #-12]
 152 00a4 000053E3 		cmp	r3, #0
 153 00a8 1500001A 		bne	.L7
  50:../I2C_DebugConsole.c ****     {
  51:../I2C_DebugConsole.c ****         CurrentDMABuffer.count = CurrentDMABuffer.size = CY_U3P_DEBUG_DMA_BUFFER_SIZE;
 154              		.loc 1 51 0
 155 00ac 013CA0E3 		mov	r3, #256
 156 00b0 B6314BE1 		strh	r3, [fp, #-22]	@ movhi
 157 00b4 B6315BE1 		ldrh	r3, [fp, #-22]
 158 00b8 B8314BE1 		strh	r3, [fp, #-24]	@ movhi
  52:../I2C_DebugConsole.c ****         CurrentDMABuffer.status = 0;
 159              		.loc 1 52 0
 160 00bc 0030A0E3 		mov	r3, #0
 161 00c0 B4314BE1 		strh	r3, [fp, #-20]	@ movhi
  53:../I2C_DebugConsole.c ****         va_start(argp, Message);
 162              		.loc 1 53 0
 163 00c4 08308BE2 		add	r3, fp, #8
 164 00c8 10300BE5 		str	r3, [fp, #-16]
  54:../I2C_DebugConsole.c ****         // MyDebugSNPrint updates CurrentDMABuffer.count
  55:../I2C_DebugConsole.c ****         Status = MyDebugSNPrint(CurrentDMABuffer.buffer, &CurrentDMABuffer.count, Message, argp);
 165              		.loc 1 55 0
 166 00cc 1C201BE5 		ldr	r2, [fp, #-28]
 167 00d0 1C304BE2 		sub	r3, fp, #28
 168 00d4 043083E2 		add	r3, r3, #4
 169 00d8 0200A0E1 		mov	r0, r2
 170 00dc 0310A0E1 		mov	r1, r3
 171 00e0 04209BE5 		ldr	r2, [fp, #4]
 172 00e4 10301BE5 		ldr	r3, [fp, #-16]
 173 00e8 FEFFFFEB 		bl	MyDebugSNPrint
 174 00ec 0C000BE5 		str	r0, [fp, #-12]
  56:../I2C_DebugConsole.c ****         va_end(argp);
  57:../I2C_DebugConsole.c ****         // Increment the count to include the NULL character also.
  58:../I2C_DebugConsole.c ****         CurrentDMABuffer.count++;
 175              		.loc 1 58 0
 176 00f0 B8315BE1 		ldrh	r3, [fp, #-24]
 177 00f4 013083E2 		add	r3, r3, #1
 178 00f8 0338A0E1 		mov	r3, r3, asl #16
 179 00fc 2338A0E1 		mov	r3, r3, lsr #16
 180 0100 B8314BE1 		strh	r3, [fp, #-24]	@ movhi
 181              	.L7:
  59:../I2C_DebugConsole.c ****     }
  60:../I2C_DebugConsole.c ****     if (Status == CY_U3P_SUCCESS)   
 182              		.loc 1 60 0
 183 0104 0C301BE5 		ldr	r3, [fp, #-12]
 184 0108 000053E3 		cmp	r3, #0
 185 010c 1000001A 		bne	.L8
  61:../I2C_DebugConsole.c ****     {
  62:../I2C_DebugConsole.c ****     	// Copy the output to the UART Console also for this dual console example
  63:../I2C_DebugConsole.c ****     	CyU3PDebugPrint(4, "%s", CurrentDMABuffer.buffer);
 186              		.loc 1 63 0
 187 0110 1C301BE5 		ldr	r3, [fp, #-28]
 188 0114 0400A0E3 		mov	r0, #4
 189 0118 88109FE5 		ldr	r1, .L10+16
 190 011c 0320A0E1 		mov	r2, r3
 191 0120 FEFFFFEB 		bl	CyU3PDebugPrint
  64:../I2C_DebugConsole.c ****         // Now queue this message to be displayed on the I2C console
  65:../I2C_DebugConsole.c ****         Status = CyU3PQueueSend(&I2C_DebugQueue, &CurrentDMABuffer, CYU3P_WAIT_FOREVER);
 192              		.loc 1 65 0
 193 0124 1C304BE2 		sub	r3, fp, #28
 194 0128 7C009FE5 		ldr	r0, .L10+20
 195 012c 0310A0E1 		mov	r1, r3
 196 0130 0020E0E3 		mvn	r2, #0
 197 0134 FEFFFFEB 		bl	_txe_queue_send
 198 0138 0C000BE5 		str	r0, [fp, #-12]
  66:../I2C_DebugConsole.c ****         if (Status != CY_U3P_SUCCESS) CheckStatus("QueueSend", Status);
 199              		.loc 1 66 0
 200 013c 0C301BE5 		ldr	r3, [fp, #-12]
 201 0140 000053E3 		cmp	r3, #0
 202 0144 0200000A 		beq	.L8
 203              		.loc 1 66 0 is_stmt 0 discriminator 1
 204 0148 60009FE5 		ldr	r0, .L10+24
 205 014c 0C101BE5 		ldr	r1, [fp, #-12]
 206 0150 FEFFFFEB 		bl	CheckStatus
 207              	.L8:
  67:../I2C_DebugConsole.c ****     }
  68:../I2C_DebugConsole.c ****     if ((Status != CY_U3P_SUCCESS) && (CurrentDMABuffer.buffer != NULL))
 208              		.loc 1 68 0 is_stmt 1
 209 0154 0C301BE5 		ldr	r3, [fp, #-12]
 210 0158 000053E3 		cmp	r3, #0
 211 015c 0500000A 		beq	.L9
 212              		.loc 1 68 0 is_stmt 0 discriminator 1
 213 0160 1C301BE5 		ldr	r3, [fp, #-28]
 214 0164 000053E3 		cmp	r3, #0
 215 0168 0200000A 		beq	.L9
  69:../I2C_DebugConsole.c ****     {
  70:../I2C_DebugConsole.c ****         CyU3PDmaBufferFree(CurrentDMABuffer.buffer);
 216              		.loc 1 70 0 is_stmt 1
 217 016c 1C301BE5 		ldr	r3, [fp, #-28]
 218 0170 0300A0E1 		mov	r0, r3
 219 0174 FEFFFFEB 		bl	CyU3PDmaBufferFree
 220              	.L9:
  71:../I2C_DebugConsole.c ****     }
  72:../I2C_DebugConsole.c ****     CyU3PMutexPut(&I2C_DebugLock);
 221              		.loc 1 72 0
 222 0178 20009FE5 		ldr	r0, .L10+8
 223 017c FEFFFFEB 		bl	_txe_mutex_put
  73:../I2C_DebugConsole.c ****     return Status;
 224              		.loc 1 73 0
 225 0180 0C301BE5 		ldr	r3, [fp, #-12]
 226              	.L3:
  74:../I2C_DebugConsole.c **** }
 227              		.loc 1 74 0
 228 0184 0300A0E1 		mov	r0, r3
 229 0188 04D04BE2 		sub	sp, fp, #4
 230 018c 0048BDE8 		ldmfd	sp!, {fp, lr}
 231 0190 0CD08DE2 		add	sp, sp, #12
 232 0194 1EFF2FE1 		bx	lr
 233              	.L11:
 234              		.align	2
 235              	.L10:
 236 0198 00000000 		.word	I2C_DebugEnabled
 237 019c 00000000 		.word	glDebugTraceLevel
 238 01a0 00000000 		.word	I2C_DebugLock
 239 01a4 00000000 		.word	.LC0
 240 01a8 14000000 		.word	.LC1
 241 01ac 00000000 		.word	I2C_DebugQueue
 242 01b0 18000000 		.word	.LC2
 243              		.cfi_endproc
 244              	.LFE0:
 246              		.section	.rodata
 247 0022 0000     		.align	2
 248              	.LC3:
 249 0024 49326349 		.ascii	"I2cInit\000"
 249      6E697400 
 250              		.align	2
 251              	.LC4:
 252 002c 49326353 		.ascii	"I2cSetConfig\000"
 252      6574436F 
 252      6E666967 
 252      00
 253              		.section	.text.Restart_I2C,"ax",%progbits
 254              		.align	2
 255              		.global	Restart_I2C
 257              	Restart_I2C:
 258              	.LFB1:
  75:../I2C_DebugConsole.c **** 
  76:../I2C_DebugConsole.c **** CyU3PReturnStatus_t Restart_I2C()
  77:../I2C_DebugConsole.c **** {
 259              		.loc 1 77 0
 260              		.cfi_startproc
 261              		@ args = 0, pretend = 0, frame = 24
 262              		@ frame_needed = 1, uses_anonymous_args = 0
 263 0000 00482DE9 		stmfd	sp!, {fp, lr}
 264              	.LCFI3:
 265              		.cfi_def_cfa_offset 8
 266 0004 04B08DE2 		add	fp, sp, #4
 267              		.cfi_offset 14, -4
 268              		.cfi_offset 11, -8
 269              	.LCFI4:
 270              		.cfi_def_cfa 11, 4
 271 0008 18D04DE2 		sub	sp, sp, #24
  78:../I2C_DebugConsole.c ****     CyU3PReturnStatus_t Status;
  79:../I2C_DebugConsole.c ****     CyU3PI2cConfig_t i2cConfig;
  80:../I2C_DebugConsole.c **** 
  81:../I2C_DebugConsole.c ****     CyU3PI2cDeInit();           // Turn it off if it is on
 272              		.loc 1 81 0
 273 000c FEFFFFEB 		bl	CyU3PI2cDeInit
  82:../I2C_DebugConsole.c ****     Status = CyU3PI2cInit();    // Start the I2C driver
 274              		.loc 1 82 0
 275 0010 FEFFFFEB 		bl	CyU3PI2cInit
 276 0014 08000BE5 		str	r0, [fp, #-8]
  83:../I2C_DebugConsole.c ****     CheckStatus("I2cInit", Status);
 277              		.loc 1 83 0
 278 0018 64009FE5 		ldr	r0, .L13
 279 001c 08101BE5 		ldr	r1, [fp, #-8]
 280 0020 FEFFFFEB 		bl	CheckStatus
  84:../I2C_DebugConsole.c **** 
  85:../I2C_DebugConsole.c ****     i2cConfig.bitRate    = CY_FX_USBI2C_I2C_BITRATE;
 281              		.loc 1 85 0
 282 0024 5C309FE5 		ldr	r3, .L13+4
 283 0028 18300BE5 		str	r3, [fp, #-24]
  86:../I2C_DebugConsole.c ****     i2cConfig.busTimeout = -1;
 284              		.loc 1 86 0
 285 002c 0030E0E3 		mvn	r3, #0
 286 0030 10300BE5 		str	r3, [fp, #-16]
  87:../I2C_DebugConsole.c ****     i2cConfig.dmaTimeout = -1;
 287              		.loc 1 87 0
 288 0034 0030E0E3 		mvn	r3, #0
 289 0038 BC304BE1 		strh	r3, [fp, #-12]	@ movhi
  88:../I2C_DebugConsole.c ****     i2cConfig.isDma      = CyTrue;
 290              		.loc 1 88 0
 291 003c 0130A0E3 		mov	r3, #1
 292 0040 14300BE5 		str	r3, [fp, #-20]
  89:../I2C_DebugConsole.c ****     Status = CyU3PI2cSetConfig(&i2cConfig, NULL);
 293              		.loc 1 89 0
 294 0044 18304BE2 		sub	r3, fp, #24
 295 0048 0300A0E1 		mov	r0, r3
 296 004c 0010A0E3 		mov	r1, #0
 297 0050 FEFFFFEB 		bl	CyU3PI2cSetConfig
 298 0054 08000BE5 		str	r0, [fp, #-8]
  90:../I2C_DebugConsole.c ****     CheckStatus("I2cSetConfig", Status);
 299              		.loc 1 90 0
 300 0058 2C009FE5 		ldr	r0, .L13+8
 301 005c 08101BE5 		ldr	r1, [fp, #-8]
 302 0060 FEFFFFEB 		bl	CheckStatus
  91:../I2C_DebugConsole.c **** 
  92:../I2C_DebugConsole.c ****     CyU3PDmaChannelReset(&I2C_DebugRXHandle);
 303              		.loc 1 92 0
 304 0064 24009FE5 		ldr	r0, .L13+12
 305 0068 FEFFFFEB 		bl	CyU3PDmaChannelReset
  93:../I2C_DebugConsole.c ****     CyU3PDmaChannelReset(&I2C_DebugTXHandle);
 306              		.loc 1 93 0
 307 006c 20009FE5 		ldr	r0, .L13+16
 308 0070 FEFFFFEB 		bl	CyU3PDmaChannelReset
  94:../I2C_DebugConsole.c **** 
  95:../I2C_DebugConsole.c ****     return Status;
 309              		.loc 1 95 0
 310 0074 08301BE5 		ldr	r3, [fp, #-8]
  96:../I2C_DebugConsole.c **** }
 311              		.loc 1 96 0
 312 0078 0300A0E1 		mov	r0, r3
 313 007c 04D04BE2 		sub	sp, fp, #4
 314 0080 0088BDE8 		ldmfd	sp!, {fp, pc}
 315              	.L14:
 316              		.align	2
 317              	.L13:
 318 0084 24000000 		.word	.LC3
 319 0088 801A0600 		.word	400000
 320 008c 2C000000 		.word	.LC4
 321 0090 00000000 		.word	I2C_DebugRXHandle
 322 0094 00000000 		.word	I2C_DebugTXHandle
 323              		.cfi_endproc
 324              	.LFE1:
 326              		.section	.rodata
 327 0039 000000   		.align	2
 328              	.LC5:
 329 003c 5369676E 		.ascii	"Signal Thread Ready\000"
 329      616C2054 
 329      68726561 
 329      64205265 
 329      61647900 
 330              		.align	2
 331              	.LC6:
 332 0050 43795533 		.ascii	"CyU3PI2cSendCommand\000"
 332      50493263 
 332      53656E64 
 332      436F6D6D 
 332      616E6400 
 333              		.align	2
 334              	.LC7:
 335 0064 43795533 		.ascii	"CyU3PDmaChannelSetupRecvBuffer\000"
 335      50446D61 
 335      4368616E 
 335      6E656C53 
 335      65747570 
 336 0083 00       		.align	2
 337              	.LC8:
 338 0084 43795533 		.ascii	"CyU3PDmaChannelSetupSendBuffer\000"
 338      50446D61 
 338      4368616E 
 338      6E656C53 
 338      65747570 
 339 00a3 00       		.align	2
 340              	.LC9:
 341 00a4 4932435F 		.ascii	"I2C_Write\000"
 341      57726974 
 341      6500
 342 00ae 0000     		.align	2
 343              	.LC10:
 344 00b0 556E6162 		.ascii	"Unable to re-queue data buffer\000"
 344      6C652074 
 344      6F207265 
 344      2D717565 
 344      75652064 
 345              		.section	.text.I2C_ConsoleThread,"ax",%progbits
 346              		.align	2
 347              		.global	I2C_ConsoleThread
 349              	I2C_ConsoleThread:
 350              	.LFB2:
  97:../I2C_DebugConsole.c **** 
  98:../I2C_DebugConsole.c **** void I2C_ConsoleThread(uint32_t Value)
  99:../I2C_DebugConsole.c **** {
 351              		.loc 1 99 0
 352              		.cfi_startproc
 353              		@ args = 0, pretend = 0, frame = 64
 354              		@ frame_needed = 1, uses_anonymous_args = 0
 355 0000 00482DE9 		stmfd	sp!, {fp, lr}
 356              	.LCFI5:
 357              		.cfi_def_cfa_offset 8
 358 0004 04B08DE2 		add	fp, sp, #4
 359              		.cfi_offset 14, -4
 360              		.cfi_offset 11, -8
 361              	.LCFI6:
 362              		.cfi_def_cfa 11, 4
 363 0008 40D04DE2 		sub	sp, sp, #64
 364 000c 40000BE5 		str	r0, [fp, #-64]
 100:../I2C_DebugConsole.c ****     // Value passed to this thread is a Semaphore that thread should signal once it is ready proces
 101:../I2C_DebugConsole.c ****     CyU3PReturnStatus_t Status, Q_Status;
 102:../I2C_DebugConsole.c ****     CyU3PDmaBuffer_t FilledBuffer, ConsoleIn;
 103:../I2C_DebugConsole.c ****     CyU3PI2cPreamble_t Preamble;
 104:../I2C_DebugConsole.c ****     int32_t retryCount = I2C_RETRY_COUNT;
 365              		.loc 1 104 0
 366 0010 1430A0E3 		mov	r3, #20
 367 0014 0C300BE5 		str	r3, [fp, #-12]
 105:../I2C_DebugConsole.c **** 
 106:../I2C_DebugConsole.c ****     // Get an aligned buffer to collect I2C Console Input
 107:../I2C_DebugConsole.c ****     ConsoleIn.buffer = CyU3PDmaBufferAlloc(I2C_READ_SIZE);
 368              		.loc 1 107 0
 369 0018 4000A0E3 		mov	r0, #64
 370 001c FEFFFFEB 		bl	CyU3PDmaBufferAlloc
 371 0020 0030A0E1 		mov	r3, r0
 372 0024 2C300BE5 		str	r3, [fp, #-44]
 108:../I2C_DebugConsole.c ****     ConsoleIn.size = I2C_READ_SIZE;
 373              		.loc 1 108 0
 374 0028 4030A0E3 		mov	r3, #64
 375 002c B6324BE1 		strh	r3, [fp, #-38]	@ movhi
 109:../I2C_DebugConsole.c ****     // Preset fixed data
 110:../I2C_DebugConsole.c ****     Preamble.buffer[0] = CY7C65215_DeviceAddress<<1;
 376              		.loc 1 110 0
 377 0030 7B30E0E3 		mvn	r3, #123
 378 0034 38304BE5 		strb	r3, [fp, #-56]
 111:../I2C_DebugConsole.c ****     Preamble.length = 1;
 379              		.loc 1 111 0
 380 0038 0130A0E3 		mov	r3, #1
 381 003c 30304BE5 		strb	r3, [fp, #-48]
 112:../I2C_DebugConsole.c ****     Preamble.ctrlMask = 0;
 382              		.loc 1 112 0
 383 0040 0030A0E3 		mov	r3, #0
 384 0044 BE324BE1 		strh	r3, [fp, #-46]	@ movhi
 113:../I2C_DebugConsole.c **** 
 114:../I2C_DebugConsole.c ****     // Tell InitDebug that the thread is ready for work
 115:../I2C_DebugConsole.c ****     Status = CyU3PSemaphorePut((CyU3PSemaphore*)Value);
 385              		.loc 1 115 0
 386 0048 40301BE5 		ldr	r3, [fp, #-64]
 387 004c 0300A0E1 		mov	r0, r3
 388 0050 FEFFFFEB 		bl	_txe_semaphore_put
 389 0054 08000BE5 		str	r0, [fp, #-8]
 116:../I2C_DebugConsole.c ****     CheckStatus("Signal Thread Ready", Status);
 390              		.loc 1 116 0
 391 0058 68029FE5 		ldr	r0, .L35
 392 005c 08101BE5 		ldr	r1, [fp, #-8]
 393 0060 FEFFFFEB 		bl	CheckStatus
 394 0064 040000EA 		b	.L30
 395              	.L32:
 117:../I2C_DebugConsole.c **** 
 118:../I2C_DebugConsole.c ****     // Now wait for filled buffers to be send to the Queue and forward them to the I2C Block
 119:../I2C_DebugConsole.c ****     while (1)
 120:../I2C_DebugConsole.c ****     {
 121:../I2C_DebugConsole.c ****         Q_Status = CyU3PQueueReceive(&I2C_DebugQueue, &FilledBuffer, 100);
 122:../I2C_DebugConsole.c **** 
 123:../I2C_DebugConsole.c ****         // It is recommended to read from the I2C device before transmitting anything.
 124:../I2C_DebugConsole.c ****         if ((Q_Status == CY_U3P_ERROR_QUEUE_EMPTY) || (Q_Status == CY_U3P_SUCCESS))
 125:../I2C_DebugConsole.c ****         {
 126:../I2C_DebugConsole.c ****             // Poll I2C for console in
 127:../I2C_DebugConsole.c ****             Preamble.buffer[0] |= 1;		// For a Read
 128:../I2C_DebugConsole.c ****             Status = CyU3PI2cSendCommand(&Preamble, I2C_READ_SIZE, CyTrue);
 129:../I2C_DebugConsole.c ****             CheckStatus("CyU3PI2cSendCommand", Status);
 130:../I2C_DebugConsole.c ****             if (Status == CY_U3P_SUCCESS)
 131:../I2C_DebugConsole.c ****             {
 132:../I2C_DebugConsole.c ****                 CyU3PMemSet (ConsoleIn.buffer, 0xFF, I2C_READ_SIZE);
 133:../I2C_DebugConsole.c ****                 ConsoleIn.count = ConsoleIn.status = 0;
 134:../I2C_DebugConsole.c ****                 Status = CyU3PDmaChannelSetupRecvBuffer(&I2C_DebugRXHandle, &ConsoleIn);
 135:../I2C_DebugConsole.c ****                 CheckStatus("CyU3PDmaChannelSetupRecvBuffer", Status);
 136:../I2C_DebugConsole.c ****             }
 137:../I2C_DebugConsole.c ****             if (Status == CY_U3P_SUCCESS)
 138:../I2C_DebugConsole.c ****             {
 139:../I2C_DebugConsole.c ****                 Status = CyU3PDmaChannelWaitForCompletion(&I2C_DebugRXHandle, 100);
 140:../I2C_DebugConsole.c **** //                CheckStatus("CyU3PDmaChannelWaitForCompletion(RX)", Status);
 141:../I2C_DebugConsole.c ****             }
 142:../I2C_DebugConsole.c ****             if (Status == CY_U3P_SUCCESS)
 143:../I2C_DebugConsole.c ****             {
 144:../I2C_DebugConsole.c ****                 uint32_t i;
 145:../I2C_DebugConsole.c ****                 for (i = 0; i < I2C_READ_SIZE; i++)
 146:../I2C_DebugConsole.c ****                 {
 147:../I2C_DebugConsole.c ****                     if (ConsoleIn.buffer[i] != 0xFF) GotConsoleInput(1, ConsoleIn.buffer[i]);
 148:../I2C_DebugConsole.c ****                     else break;
 149:../I2C_DebugConsole.c ****                 }
 150:../I2C_DebugConsole.c ****             }
 151:../I2C_DebugConsole.c ****             else Restart_I2C ();		// Read failed, recover the I2C Channel
 152:../I2C_DebugConsole.c ****             CyU3PThreadSleep(50); 		// Short sleep after an I2C operation is recommended.
 153:../I2C_DebugConsole.c ****         }
 154:../I2C_DebugConsole.c **** 
 155:../I2C_DebugConsole.c ****         if (Q_Status == CY_U3P_SUCCESS)
 156:../I2C_DebugConsole.c ****         {
 157:../I2C_DebugConsole.c ****             // There was a buffer waiting, send it to the I2C Block
 158:../I2C_DebugConsole.c ****             Status = CyU3PDmaChannelSetupSendBuffer (&I2C_DebugTXHandle, &FilledBuffer);
 159:../I2C_DebugConsole.c ****             CheckStatus("CyU3PDmaChannelSetupSendBuffer", Status);
 160:../I2C_DebugConsole.c ****             // Now tell the I2C Block what to do with this buffer of data
 161:../I2C_DebugConsole.c ****             Preamble.buffer[0] &= 0xFE;	// Clear LSb = Write
 162:../I2C_DebugConsole.c ****             if (Status == CY_U3P_SUCCESS) CyU3PI2cSendCommand(&Preamble, FilledBuffer.count, CyFals
 163:../I2C_DebugConsole.c ****             // Wait for the I2C transfer to be done
 164:../I2C_DebugConsole.c ****             if (Status == CY_U3P_SUCCESS) Status = CyU3PI2cWaitForBlockXfer(CyFalse);
 165:../I2C_DebugConsole.c ****             if (Status != CY_U3P_SUCCESS)
 166:../I2C_DebugConsole.c ****             {
 167:../I2C_DebugConsole.c ****             	CheckStatus("I2C_Write", Status);
 168:../I2C_DebugConsole.c ****                 Restart_I2C();
 169:../I2C_DebugConsole.c ****                 CyU3PThreadSleep (50);
 170:../I2C_DebugConsole.c ****                 if (retryCount > 0)
 171:../I2C_DebugConsole.c ****                 {
 172:../I2C_DebugConsole.c ****                     retryCount--;
 173:../I2C_DebugConsole.c ****                     // Put this buffer at the start of the Queue
 174:../I2C_DebugConsole.c ****                     Status = CyU3PQueuePrioritySend(&I2C_DebugQueue, &FilledBuffer, CYU3P_NO_WAIT);
 175:../I2C_DebugConsole.c ****                     if (Status != CY_U3P_SUCCESS) CyU3PDebugPrint(4, "Unable to re-queue data buffe
 176:../I2C_DebugConsole.c ****                 }
 177:../I2C_DebugConsole.c ****             }
 178:../I2C_DebugConsole.c ****             else	// Successfully displayed the message, wrap up
 179:../I2C_DebugConsole.c ****             {
 180:../I2C_DebugConsole.c ****             	retryCount = I2C_RETRY_COUNT;				// Reset Retry Count
 181:../I2C_DebugConsole.c ****             	CyU3PDmaBufferFree(FilledBuffer.buffer);	// Give back the original buffer
 182:../I2C_DebugConsole.c ****             }
 183:../I2C_DebugConsole.c ****         }
 184:../I2C_DebugConsole.c ****     }
 396              		.loc 1 184 0
 397 0068 0000A0E1 		mov	r0, r0	@ nop
 398 006c 020000EA 		b	.L30
 399              	.L33:
 400 0070 0000A0E1 		mov	r0, r0	@ nop
 401 0074 000000EA 		b	.L30
 402              	.L34:
 403 0078 0000A0E1 		mov	r0, r0	@ nop
 404              	.L30:
 121:../I2C_DebugConsole.c ****         Q_Status = CyU3PQueueReceive(&I2C_DebugQueue, &FilledBuffer, 100);
 405              		.loc 1 121 0
 406 007c 20304BE2 		sub	r3, fp, #32
 407 0080 44029FE5 		ldr	r0, .L35+4
 408 0084 0310A0E1 		mov	r1, r3
 409 0088 6420A0E3 		mov	r2, #100
 410 008c FEFFFFEB 		bl	_txe_queue_receive
 411 0090 14000BE5 		str	r0, [fp, #-20]
 124:../I2C_DebugConsole.c ****         if ((Q_Status == CY_U3P_ERROR_QUEUE_EMPTY) || (Q_Status == CY_U3P_SUCCESS))
 412              		.loc 1 124 0
 413 0094 14301BE5 		ldr	r3, [fp, #-20]
 414 0098 0A0053E3 		cmp	r3, #10
 415 009c 0200000A 		beq	.L16
 124:../I2C_DebugConsole.c ****         if ((Q_Status == CY_U3P_ERROR_QUEUE_EMPTY) || (Q_Status == CY_U3P_SUCCESS))
 416              		.loc 1 124 0 is_stmt 0 discriminator 1
 417 00a0 14301BE5 		ldr	r3, [fp, #-20]
 418 00a4 000053E3 		cmp	r3, #0
 419 00a8 4600001A 		bne	.L17
 420              	.L16:
 127:../I2C_DebugConsole.c ****             Preamble.buffer[0] |= 1;		// For a Read
 421              		.loc 1 127 0 is_stmt 1
 422 00ac 38305BE5 		ldrb	r3, [fp, #-56]	@ zero_extendqisi2
 423 00b0 013083E3 		orr	r3, r3, #1
 424 00b4 FF3003E2 		and	r3, r3, #255
 425 00b8 38304BE5 		strb	r3, [fp, #-56]
 128:../I2C_DebugConsole.c ****             Status = CyU3PI2cSendCommand(&Preamble, I2C_READ_SIZE, CyTrue);
 426              		.loc 1 128 0
 427 00bc 38304BE2 		sub	r3, fp, #56
 428 00c0 0300A0E1 		mov	r0, r3
 429 00c4 4010A0E3 		mov	r1, #64
 430 00c8 0120A0E3 		mov	r2, #1
 431 00cc FEFFFFEB 		bl	CyU3PI2cSendCommand
 432 00d0 08000BE5 		str	r0, [fp, #-8]
 129:../I2C_DebugConsole.c ****             CheckStatus("CyU3PI2cSendCommand", Status);
 433              		.loc 1 129 0
 434 00d4 F4019FE5 		ldr	r0, .L35+8
 435 00d8 08101BE5 		ldr	r1, [fp, #-8]
 436 00dc FEFFFFEB 		bl	CheckStatus
 130:../I2C_DebugConsole.c ****             if (Status == CY_U3P_SUCCESS)
 437              		.loc 1 130 0
 438 00e0 08301BE5 		ldr	r3, [fp, #-8]
 439 00e4 000053E3 		cmp	r3, #0
 440 00e8 1000001A 		bne	.L18
 132:../I2C_DebugConsole.c ****                 CyU3PMemSet (ConsoleIn.buffer, 0xFF, I2C_READ_SIZE);
 441              		.loc 1 132 0
 442 00ec 2C301BE5 		ldr	r3, [fp, #-44]
 443 00f0 0300A0E1 		mov	r0, r3
 444 00f4 FF10A0E3 		mov	r1, #255
 445 00f8 4020A0E3 		mov	r2, #64
 446 00fc FEFFFFEB 		bl	CyU3PMemSet
 133:../I2C_DebugConsole.c ****                 ConsoleIn.count = ConsoleIn.status = 0;
 447              		.loc 1 133 0
 448 0100 0030A0E3 		mov	r3, #0
 449 0104 B4324BE1 		strh	r3, [fp, #-36]	@ movhi
 450 0108 B4325BE1 		ldrh	r3, [fp, #-36]
 451 010c B8324BE1 		strh	r3, [fp, #-40]	@ movhi
 134:../I2C_DebugConsole.c ****                 Status = CyU3PDmaChannelSetupRecvBuffer(&I2C_DebugRXHandle, &ConsoleIn);
 452              		.loc 1 134 0
 453 0110 2C304BE2 		sub	r3, fp, #44
 454 0114 B8019FE5 		ldr	r0, .L35+12
 455 0118 0310A0E1 		mov	r1, r3
 456 011c FEFFFFEB 		bl	CyU3PDmaChannelSetupRecvBuffer
 457 0120 08000BE5 		str	r0, [fp, #-8]
 135:../I2C_DebugConsole.c ****                 CheckStatus("CyU3PDmaChannelSetupRecvBuffer", Status);
 458              		.loc 1 135 0
 459 0124 AC019FE5 		ldr	r0, .L35+16
 460 0128 08101BE5 		ldr	r1, [fp, #-8]
 461 012c FEFFFFEB 		bl	CheckStatus
 462              	.L18:
 137:../I2C_DebugConsole.c ****             if (Status == CY_U3P_SUCCESS)
 463              		.loc 1 137 0
 464 0130 08301BE5 		ldr	r3, [fp, #-8]
 465 0134 000053E3 		cmp	r3, #0
 466 0138 0300001A 		bne	.L19
 139:../I2C_DebugConsole.c ****                 Status = CyU3PDmaChannelWaitForCompletion(&I2C_DebugRXHandle, 100);
 467              		.loc 1 139 0
 468 013c 90019FE5 		ldr	r0, .L35+12
 469 0140 6410A0E3 		mov	r1, #100
 470 0144 FEFFFFEB 		bl	CyU3PDmaChannelWaitForCompletion
 471 0148 08000BE5 		str	r0, [fp, #-8]
 472              	.L19:
 142:../I2C_DebugConsole.c ****             if (Status == CY_U3P_SUCCESS)
 473              		.loc 1 142 0
 474 014c 08301BE5 		ldr	r3, [fp, #-8]
 475 0150 000053E3 		cmp	r3, #0
 476 0154 1600001A 		bne	.L20
 477              	.LBB2:
 145:../I2C_DebugConsole.c ****                 for (i = 0; i < I2C_READ_SIZE; i++)
 478              		.loc 1 145 0
 479 0158 0030A0E3 		mov	r3, #0
 480 015c 10300BE5 		str	r3, [fp, #-16]
 481 0160 0F0000EA 		b	.L21
 482              	.L24:
 147:../I2C_DebugConsole.c ****                     if (ConsoleIn.buffer[i] != 0xFF) GotConsoleInput(1, ConsoleIn.buffer[i]);
 483              		.loc 1 147 0
 484 0164 2C201BE5 		ldr	r2, [fp, #-44]
 485 0168 10301BE5 		ldr	r3, [fp, #-16]
 486 016c 033082E0 		add	r3, r2, r3
 487 0170 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 488 0174 FF0053E3 		cmp	r3, #255
 489 0178 0F00000A 		beq	.L31
 147:../I2C_DebugConsole.c ****                     if (ConsoleIn.buffer[i] != 0xFF) GotConsoleInput(1, ConsoleIn.buffer[i]);
 490              		.loc 1 147 0 is_stmt 0 discriminator 1
 491 017c 2C201BE5 		ldr	r2, [fp, #-44]
 492 0180 10301BE5 		ldr	r3, [fp, #-16]
 493 0184 033082E0 		add	r3, r2, r3
 494 0188 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 495 018c 0100A0E3 		mov	r0, #1
 496 0190 0310A0E1 		mov	r1, r3
 497 0194 FEFFFFEB 		bl	GotConsoleInput
 145:../I2C_DebugConsole.c ****                 for (i = 0; i < I2C_READ_SIZE; i++)
 498              		.loc 1 145 0 is_stmt 1 discriminator 1
 499 0198 10301BE5 		ldr	r3, [fp, #-16]
 500 019c 013083E2 		add	r3, r3, #1
 501 01a0 10300BE5 		str	r3, [fp, #-16]
 502              	.L21:
 503 01a4 10301BE5 		ldr	r3, [fp, #-16]
 504 01a8 3F0053E3 		cmp	r3, #63
 505 01ac ECFFFF9A 		bls	.L24
 145:../I2C_DebugConsole.c ****                 for (i = 0; i < I2C_READ_SIZE; i++)
 506              		.loc 1 145 0 is_stmt 0
 507 01b0 020000EA 		b	.L25
 508              	.L20:
 509              	.LBE2:
 151:../I2C_DebugConsole.c ****             else Restart_I2C ();		// Read failed, recover the I2C Channel
 510              		.loc 1 151 0 is_stmt 1
 511 01b4 FEFFFFEB 		bl	Restart_I2C
 512 01b8 000000EA 		b	.L25
 513              	.L31:
 514              	.LBB3:
 148:../I2C_DebugConsole.c ****                     else break;
 515              		.loc 1 148 0
 516 01bc 0000A0E1 		mov	r0, r0	@ nop
 517              	.L25:
 518              	.LBE3:
 152:../I2C_DebugConsole.c ****             CyU3PThreadSleep(50); 		// Short sleep after an I2C operation is recommended.
 519              		.loc 1 152 0
 520 01c0 3200A0E3 		mov	r0, #50
 521 01c4 FEFFFFEB 		bl	_tx_thread_sleep
 522              	.L17:
 155:../I2C_DebugConsole.c ****         if (Q_Status == CY_U3P_SUCCESS)
 523              		.loc 1 155 0
 524 01c8 14301BE5 		ldr	r3, [fp, #-20]
 525 01cc 000053E3 		cmp	r3, #0
 526 01d0 A4FFFF1A 		bne	.L32
 158:../I2C_DebugConsole.c ****             Status = CyU3PDmaChannelSetupSendBuffer (&I2C_DebugTXHandle, &FilledBuffer);
 527              		.loc 1 158 0
 528 01d4 20304BE2 		sub	r3, fp, #32
 529 01d8 FC009FE5 		ldr	r0, .L35+20
 530 01dc 0310A0E1 		mov	r1, r3
 531 01e0 FEFFFFEB 		bl	CyU3PDmaChannelSetupSendBuffer
 532 01e4 08000BE5 		str	r0, [fp, #-8]
 159:../I2C_DebugConsole.c ****             CheckStatus("CyU3PDmaChannelSetupSendBuffer", Status);
 533              		.loc 1 159 0
 534 01e8 F0009FE5 		ldr	r0, .L35+24
 535 01ec 08101BE5 		ldr	r1, [fp, #-8]
 536 01f0 FEFFFFEB 		bl	CheckStatus
 161:../I2C_DebugConsole.c ****             Preamble.buffer[0] &= 0xFE;	// Clear LSb = Write
 537              		.loc 1 161 0
 538 01f4 38305BE5 		ldrb	r3, [fp, #-56]	@ zero_extendqisi2
 539 01f8 0130C3E3 		bic	r3, r3, #1
 540 01fc FF3003E2 		and	r3, r3, #255
 541 0200 38304BE5 		strb	r3, [fp, #-56]
 162:../I2C_DebugConsole.c ****             if (Status == CY_U3P_SUCCESS) CyU3PI2cSendCommand(&Preamble, FilledBuffer.count, CyFals
 542              		.loc 1 162 0
 543 0204 08301BE5 		ldr	r3, [fp, #-8]
 544 0208 000053E3 		cmp	r3, #0
 545 020c 0500001A 		bne	.L27
 162:../I2C_DebugConsole.c ****             if (Status == CY_U3P_SUCCESS) CyU3PI2cSendCommand(&Preamble, FilledBuffer.count, CyFals
 546              		.loc 1 162 0 is_stmt 0 discriminator 1
 547 0210 BC315BE1 		ldrh	r3, [fp, #-28]
 548 0214 38204BE2 		sub	r2, fp, #56
 549 0218 0200A0E1 		mov	r0, r2
 550 021c 0310A0E1 		mov	r1, r3
 551 0220 0020A0E3 		mov	r2, #0
 552 0224 FEFFFFEB 		bl	CyU3PI2cSendCommand
 553              	.L27:
 164:../I2C_DebugConsole.c ****             if (Status == CY_U3P_SUCCESS) Status = CyU3PI2cWaitForBlockXfer(CyFalse);
 554              		.loc 1 164 0 is_stmt 1
 555 0228 08301BE5 		ldr	r3, [fp, #-8]
 556 022c 000053E3 		cmp	r3, #0
 557 0230 0200001A 		bne	.L28
 164:../I2C_DebugConsole.c ****             if (Status == CY_U3P_SUCCESS) Status = CyU3PI2cWaitForBlockXfer(CyFalse);
 558              		.loc 1 164 0 is_stmt 0 discriminator 1
 559 0234 0000A0E3 		mov	r0, #0
 560 0238 FEFFFFEB 		bl	CyU3PI2cWaitForBlockXfer
 561 023c 08000BE5 		str	r0, [fp, #-8]
 562              	.L28:
 165:../I2C_DebugConsole.c ****             if (Status != CY_U3P_SUCCESS)
 563              		.loc 1 165 0 is_stmt 1
 564 0240 08301BE5 		ldr	r3, [fp, #-8]
 565 0244 000053E3 		cmp	r3, #0
 566 0248 1800000A 		beq	.L29
 167:../I2C_DebugConsole.c ****             	CheckStatus("I2C_Write", Status);
 567              		.loc 1 167 0
 568 024c 90009FE5 		ldr	r0, .L35+28
 569 0250 08101BE5 		ldr	r1, [fp, #-8]
 570 0254 FEFFFFEB 		bl	CheckStatus
 168:../I2C_DebugConsole.c ****                 Restart_I2C();
 571              		.loc 1 168 0
 572 0258 FEFFFFEB 		bl	Restart_I2C
 169:../I2C_DebugConsole.c ****                 CyU3PThreadSleep (50);
 573              		.loc 1 169 0
 574 025c 3200A0E3 		mov	r0, #50
 575 0260 FEFFFFEB 		bl	_tx_thread_sleep
 170:../I2C_DebugConsole.c ****                 if (retryCount > 0)
 576              		.loc 1 170 0
 577 0264 0C301BE5 		ldr	r3, [fp, #-12]
 578 0268 000053E3 		cmp	r3, #0
 579 026c 7FFFFFDA 		ble	.L33
 172:../I2C_DebugConsole.c ****                     retryCount--;
 580              		.loc 1 172 0
 581 0270 0C301BE5 		ldr	r3, [fp, #-12]
 582 0274 013043E2 		sub	r3, r3, #1
 583 0278 0C300BE5 		str	r3, [fp, #-12]
 174:../I2C_DebugConsole.c ****                     Status = CyU3PQueuePrioritySend(&I2C_DebugQueue, &FilledBuffer, CYU3P_NO_WAIT);
 584              		.loc 1 174 0
 585 027c 20304BE2 		sub	r3, fp, #32
 586 0280 44009FE5 		ldr	r0, .L35+4
 587 0284 0310A0E1 		mov	r1, r3
 588 0288 0020A0E3 		mov	r2, #0
 589 028c FEFFFFEB 		bl	_txe_queue_front_send
 590 0290 08000BE5 		str	r0, [fp, #-8]
 175:../I2C_DebugConsole.c ****                     if (Status != CY_U3P_SUCCESS) CyU3PDebugPrint(4, "Unable to re-queue data buffe
 591              		.loc 1 175 0
 592 0294 08301BE5 		ldr	r3, [fp, #-8]
 593 0298 000053E3 		cmp	r3, #0
 594 029c 75FFFF0A 		beq	.L34
 175:../I2C_DebugConsole.c ****                     if (Status != CY_U3P_SUCCESS) CyU3PDebugPrint(4, "Unable to re-queue data buffe
 595              		.loc 1 175 0 is_stmt 0 discriminator 1
 596 02a0 0400A0E3 		mov	r0, #4
 597 02a4 3C109FE5 		ldr	r1, .L35+32
 598 02a8 FEFFFFEB 		bl	CyU3PDebugPrint
 599              		.loc 1 184 0 is_stmt 1 discriminator 1
 600 02ac 72FFFFEA 		b	.L30
 601              	.L29:
 180:../I2C_DebugConsole.c ****             	retryCount = I2C_RETRY_COUNT;				// Reset Retry Count
 602              		.loc 1 180 0
 603 02b0 1430A0E3 		mov	r3, #20
 604 02b4 0C300BE5 		str	r3, [fp, #-12]
 181:../I2C_DebugConsole.c ****             	CyU3PDmaBufferFree(FilledBuffer.buffer);	// Give back the original buffer
 605              		.loc 1 181 0
 606 02b8 20301BE5 		ldr	r3, [fp, #-32]
 607 02bc 0300A0E1 		mov	r0, r3
 608 02c0 FEFFFFEB 		bl	CyU3PDmaBufferFree
 609              		.loc 1 184 0
 610 02c4 6CFFFFEA 		b	.L30
 611              	.L36:
 612              		.align	2
 613              	.L35:
 614 02c8 3C000000 		.word	.LC5
 615 02cc 00000000 		.word	I2C_DebugQueue
 616 02d0 50000000 		.word	.LC6
 617 02d4 00000000 		.word	I2C_DebugRXHandle
 618 02d8 64000000 		.word	.LC7
 619 02dc 00000000 		.word	I2C_DebugTXHandle
 620 02e0 84000000 		.word	.LC8
 621 02e4 A4000000 		.word	.LC9
 622 02e8 B0000000 		.word	.LC10
 623              		.cfi_endproc
 624              	.LFE2:
 626              		.section	.rodata
 627 00cf 00       		.align	2
 628              	.LC11:
 629 00d0 43795533 		.ascii	"CyU3PI2cInit\000"
 629      50493263 
 629      496E6974 
 629      00
 630 00dd 000000   		.align	2
 631              	.LC12:
 632 00e0 53657420 		.ascii	"Set I2C Config\000"
 632      49324320 
 632      436F6E66 
 632      696700
 633 00ef 00       		.align	2
 634              	.LC13:
 635 00f0 43795533 		.ascii	"CyU3PDmaChannelCreate(I2C_TX)\000"
 635      50446D61 
 635      4368616E 
 635      6E656C43 
 635      72656174 
 636 010e 0000     		.align	2
 637              	.LC14:
 638 0110 43795533 		.ascii	"CyU3PDmaChannelCreate(I2C_RX)\000"
 638      50446D61 
 638      4368616E 
 638      6E656C43 
 638      72656174 
 639 012e 0000     		.align	2
 640              	.LC15:
 641 0130 4932435F 		.ascii	"I2C_Debug Mutex\000"
 641      44656275 
 641      67204D75 
 641      74657800 
 642              		.align	2
 643              	.LC16:
 644 0140 4932435F 		.ascii	"I2C_Debug Queue\000"
 644      44656275 
 644      67205175 
 644      65756500 
 645              		.align	2
 646              	.LC17:
 647 0150 54687265 		.ascii	"ThreadSignal SemaphoreCreate\000"
 647      61645369 
 647      676E616C 
 647      2053656D 
 647      6170686F 
 648 016d 000000   		.align	2
 649              	.LC18:
 650 0170 33303A49 		.ascii	"30:I2C_Debug_Thread\000"
 650      32435F44 
 650      65627567 
 650      5F546872 
 650      65616400 
 651              		.align	2
 652              	.LC19:
 653 0184 43726561 		.ascii	"Create I2C_Debug_Thread\000"
 653      74652049 
 653      32435F44 
 653      65627567 
 653      5F546872 
 654              		.section	.text.I2C_DebugInit,"ax",%progbits
 655              		.align	2
 656              		.global	I2C_DebugInit
 658              	I2C_DebugInit:
 659              	.LFB3:
 185:../I2C_DebugConsole.c **** }
 186:../I2C_DebugConsole.c **** 
 187:../I2C_DebugConsole.c **** CyU3PReturnStatus_t I2C_DebugInit(uint8_t TraceLevel)
 188:../I2C_DebugConsole.c **** {
 660              		.loc 1 188 0
 661              		.cfi_startproc
 662              		@ args = 0, pretend = 0, frame = 96
 663              		@ frame_needed = 1, uses_anonymous_args = 0
 664 0000 00482DE9 		stmfd	sp!, {fp, lr}
 665              	.LCFI7:
 666              		.cfi_def_cfa_offset 8
 667 0004 04B08DE2 		add	fp, sp, #4
 668              		.cfi_offset 14, -4
 669              		.cfi_offset 11, -8
 670              	.LCFI8:
 671              		.cfi_def_cfa 11, 4
 672 0008 80D04DE2 		sub	sp, sp, #128
 673 000c 0030A0E1 		mov	r3, r0
 674 0010 5D304BE5 		strb	r3, [fp, #-93]
 189:../I2C_DebugConsole.c ****     CyU3PI2cConfig_t i2cConfig;
 190:../I2C_DebugConsole.c ****     CyU3PDmaChannelConfig_t dmaConfig;
 191:../I2C_DebugConsole.c ****     CyU3PReturnStatus_t Status;
 192:../I2C_DebugConsole.c ****     CyU3PSemaphore ThreadSignal;
 193:../I2C_DebugConsole.c ****     void* StackPtr;
 194:../I2C_DebugConsole.c **** 
 195:../I2C_DebugConsole.c ****     if (I2C_DebugEnabled) return CY_U3P_ERROR_ALREADY_STARTED;
 675              		.loc 1 195 0
 676 0014 2C329FE5 		ldr	r3, .L40
 677 0018 003093E5 		ldr	r3, [r3, #0]
 678 001c 000053E3 		cmp	r3, #0
 679 0020 0100000A 		beq	.L38
 680              		.loc 1 195 0 is_stmt 0 discriminator 1
 681 0024 4330A0E3 		mov	r3, #67
 682 0028 830000EA 		b	.L39
 683              	.L38:
 196:../I2C_DebugConsole.c **** 
 197:../I2C_DebugConsole.c ****     Status = CyU3PI2cInit();    // Start the I2C driver
 684              		.loc 1 197 0 is_stmt 1
 685 002c FEFFFFEB 		bl	CyU3PI2cInit
 686 0030 08000BE5 		str	r0, [fp, #-8]
 198:../I2C_DebugConsole.c ****     CheckStatus("CyU3PI2cInit", Status);
 687              		.loc 1 198 0
 688 0034 10029FE5 		ldr	r0, .L40+4
 689 0038 08101BE5 		ldr	r1, [fp, #-8]
 690 003c FEFFFFEB 		bl	CheckStatus
 199:../I2C_DebugConsole.c **** 
 200:../I2C_DebugConsole.c ****     i2cConfig.bitRate    = CY_FX_USBI2C_I2C_BITRATE;
 691              		.loc 1 200 0
 692 0040 08329FE5 		ldr	r3, .L40+8
 693 0044 1C300BE5 		str	r3, [fp, #-28]
 201:../I2C_DebugConsole.c ****     i2cConfig.busTimeout = -1;
 694              		.loc 1 201 0
 695 0048 0030E0E3 		mvn	r3, #0
 696 004c 14300BE5 		str	r3, [fp, #-20]
 202:../I2C_DebugConsole.c ****     i2cConfig.dmaTimeout = -1;
 697              		.loc 1 202 0
 698 0050 0030E0E3 		mvn	r3, #0
 699 0054 B0314BE1 		strh	r3, [fp, #-16]	@ movhi
 203:../I2C_DebugConsole.c ****     i2cConfig.isDma      = CyTrue;
 700              		.loc 1 203 0
 701 0058 0130A0E3 		mov	r3, #1
 702 005c 18300BE5 		str	r3, [fp, #-24]
 204:../I2C_DebugConsole.c ****     Status = CyU3PI2cSetConfig(&i2cConfig, NULL);
 703              		.loc 1 204 0
 704 0060 1C304BE2 		sub	r3, fp, #28
 705 0064 0300A0E1 		mov	r0, r3
 706 0068 0010A0E3 		mov	r1, #0
 707 006c FEFFFFEB 		bl	CyU3PI2cSetConfig
 708 0070 08000BE5 		str	r0, [fp, #-8]
 205:../I2C_DebugConsole.c ****     CheckStatus("Set I2C Config", Status);
 709              		.loc 1 205 0
 710 0074 D8019FE5 		ldr	r0, .L40+12
 711 0078 08101BE5 		ldr	r1, [fp, #-8]
 712 007c FEFFFFEB 		bl	CheckStatus
 206:../I2C_DebugConsole.c **** 
 207:../I2C_DebugConsole.c ****     // Create MANUAL DMA channels to send and receive data from the I2C IO block
 208:../I2C_DebugConsole.c ****     CyU3PMemSet((uint8_t *)&dmaConfig, 0, sizeof(dmaConfig));
 713              		.loc 1 208 0
 714 0080 38304BE2 		sub	r3, fp, #56
 715 0084 0300A0E1 		mov	r0, r3
 716 0088 0010A0E3 		mov	r1, #0
 717 008c 1C20A0E3 		mov	r2, #28
 718 0090 FEFFFFEB 		bl	CyU3PMemSet
 209:../I2C_DebugConsole.c ****     // Get a set of buffers to output debug messages
 210:../I2C_DebugConsole.c ****     dmaConfig.size = CY_U3P_DEBUG_DMA_BUFFER_SIZE;
 719              		.loc 1 210 0
 720 0094 013CA0E3 		mov	r3, #256
 721 0098 B8334BE1 		strh	r3, [fp, #-56]	@ movhi
 211:../I2C_DebugConsole.c ****     dmaConfig.count = 0;
 722              		.loc 1 211 0
 723 009c 0030A0E3 		mov	r3, #0
 724 00a0 B6334BE1 		strh	r3, [fp, #-54]	@ movhi
 212:../I2C_DebugConsole.c ****     dmaConfig.prodSckId = CY_U3P_CPU_SOCKET_PROD;
 725              		.loc 1 212 0
 726 00a4 AC319FE5 		ldr	r3, .L40+16
 727 00a8 B4334BE1 		strh	r3, [fp, #-52]	@ movhi
 213:../I2C_DebugConsole.c ****     dmaConfig.consSckId = CY_U3P_LPP_SOCKET_I2C_CONS;
 728              		.loc 1 213 0
 729 00ac 0230A0E3 		mov	r3, #2
 730 00b0 B2334BE1 		strh	r3, [fp, #-50]	@ movhi
 214:../I2C_DebugConsole.c ****     dmaConfig.dmaMode = CY_U3P_DMA_MODE_BYTE;
 731              		.loc 1 214 0
 732 00b4 0030A0E3 		mov	r3, #0
 733 00b8 28304BE5 		strb	r3, [fp, #-40]
 215:../I2C_DebugConsole.c ****     Status = CyU3PDmaChannelCreate(&I2C_DebugTXHandle, CY_U3P_DMA_TYPE_MANUAL_OUT, &dmaConfig);
 734              		.loc 1 215 0
 735 00bc 38304BE2 		sub	r3, fp, #56
 736 00c0 94019FE5 		ldr	r0, .L40+20
 737 00c4 0410A0E3 		mov	r1, #4
 738 00c8 0320A0E1 		mov	r2, r3
 739 00cc FEFFFFEB 		bl	CyU3PDmaChannelCreate
 740 00d0 08000BE5 		str	r0, [fp, #-8]
 216:../I2C_DebugConsole.c ****     CheckStatus("CyU3PDmaChannelCreate(I2C_TX)", Status);
 741              		.loc 1 216 0
 742 00d4 84019FE5 		ldr	r0, .L40+24
 743 00d8 08101BE5 		ldr	r1, [fp, #-8]
 744 00dc FEFFFFEB 		bl	CheckStatus
 217:../I2C_DebugConsole.c ****     // Console In Buffer will be assigned manually
 218:../I2C_DebugConsole.c ****     dmaConfig.size = I2C_CONSOLEIN_BUFFER_SIZE; // 0 should work here, but CyU3PDmaChannelCreate sa
 745              		.loc 1 218 0
 746 00e0 1030A0E3 		mov	r3, #16
 747 00e4 B8334BE1 		strh	r3, [fp, #-56]	@ movhi
 219:../I2C_DebugConsole.c ****     dmaConfig.count = 0;
 748              		.loc 1 219 0
 749 00e8 0030A0E3 		mov	r3, #0
 750 00ec B6334BE1 		strh	r3, [fp, #-54]	@ movhi
 220:../I2C_DebugConsole.c ****     dmaConfig.prodSckId = CY_U3P_LPP_SOCKET_I2C_PROD;
 751              		.loc 1 220 0
 752 00f0 0530A0E3 		mov	r3, #5
 753 00f4 B4334BE1 		strh	r3, [fp, #-52]	@ movhi
 221:../I2C_DebugConsole.c ****     dmaConfig.consSckId = CY_U3P_CPU_SOCKET_CONS;
 754              		.loc 1 221 0
 755 00f8 3F3CA0E3 		mov	r3, #16128
 756 00fc B2334BE1 		strh	r3, [fp, #-50]	@ movhi
 222:../I2C_DebugConsole.c ****     Status = CyU3PDmaChannelCreate(&I2C_DebugRXHandle, CY_U3P_DMA_TYPE_MANUAL_IN, &dmaConfig);
 757              		.loc 1 222 0
 758 0100 38304BE2 		sub	r3, fp, #56
 759 0104 58019FE5 		ldr	r0, .L40+28
 760 0108 0310A0E3 		mov	r1, #3
 761 010c 0320A0E1 		mov	r2, r3
 762 0110 FEFFFFEB 		bl	CyU3PDmaChannelCreate
 763 0114 08000BE5 		str	r0, [fp, #-8]
 223:../I2C_DebugConsole.c ****     CheckStatus("CyU3PDmaChannelCreate(I2C_RX)", Status);
 764              		.loc 1 223 0
 765 0118 48019FE5 		ldr	r0, .L40+32
 766 011c 08101BE5 		ldr	r1, [fp, #-8]
 767 0120 FEFFFFEB 		bl	CheckStatus
 224:../I2C_DebugConsole.c **** 
 225:../I2C_DebugConsole.c ****     // Create a Mutex and a Queue for the I2C_Console to use
 226:../I2C_DebugConsole.c ****     Status = CyU3PMutexCreate(&I2C_DebugLock, CYU3P_NO_INHERIT);
 768              		.loc 1 226 0
 769 0124 40019FE5 		ldr	r0, .L40+36
 770 0128 0010A0E3 		mov	r1, #0
 771 012c 0020A0E3 		mov	r2, #0
 772 0130 3830A0E3 		mov	r3, #56
 773 0134 FEFFFFEB 		bl	_txe_mutex_create
 774 0138 08000BE5 		str	r0, [fp, #-8]
 227:../I2C_DebugConsole.c ****     CheckStatus("I2C_Debug Mutex", Status);
 775              		.loc 1 227 0
 776 013c 2C019FE5 		ldr	r0, .L40+40
 777 0140 08101BE5 		ldr	r1, [fp, #-8]
 778 0144 FEFFFFEB 		bl	CheckStatus
 228:../I2C_DebugConsole.c ****     Status = CyU3PQueueCreate(&I2C_DebugQueue, sizeof (CyU3PDmaBuffer_t), Queue, sizeof(Queue));
 779              		.loc 1 228 0
 780 0148 6030A0E3 		mov	r3, #96
 781 014c 00308DE5 		str	r3, [sp, #0]
 782 0150 3C30A0E3 		mov	r3, #60
 783 0154 04308DE5 		str	r3, [sp, #4]
 784 0158 14019FE5 		ldr	r0, .L40+44
 785 015c 0010A0E3 		mov	r1, #0
 786 0160 0C20A0E3 		mov	r2, #12
 787 0164 0C319FE5 		ldr	r3, .L40+48
 788 0168 FEFFFFEB 		bl	_txe_queue_create
 789 016c 08000BE5 		str	r0, [fp, #-8]
 229:../I2C_DebugConsole.c ****     CheckStatus("I2C_Debug Queue", Status);
 790              		.loc 1 229 0
 791 0170 04019FE5 		ldr	r0, .L40+52
 792 0174 08101BE5 		ldr	r1, [fp, #-8]
 793 0178 FEFFFFEB 		bl	CheckStatus
 230:../I2C_DebugConsole.c **** 
 231:../I2C_DebugConsole.c ****     // I need to create a thread that will manage the Queue
 232:../I2C_DebugConsole.c ****     // I also need a signal to let me know that this thread is running
 233:../I2C_DebugConsole.c ****     Status = CyU3PSemaphoreCreate(&ThreadSignal, 0);
 794              		.loc 1 233 0
 795 017c 58304BE2 		sub	r3, fp, #88
 796 0180 0300A0E1 		mov	r0, r3
 797 0184 0010A0E3 		mov	r1, #0
 798 0188 0020A0E3 		mov	r2, #0
 799 018c 2030A0E3 		mov	r3, #32
 800 0190 FEFFFFEB 		bl	_txe_semaphore_create
 801 0194 08000BE5 		str	r0, [fp, #-8]
 234:../I2C_DebugConsole.c ****     CheckStatus("ThreadSignal SemaphoreCreate", Status);
 802              		.loc 1 234 0
 803 0198 E0009FE5 		ldr	r0, .L40+56
 804 019c 08101BE5 		ldr	r1, [fp, #-8]
 805 01a0 FEFFFFEB 		bl	CheckStatus
 235:../I2C_DebugConsole.c ****     StackPtr = CyU3PMemAlloc(DEBUG_THREAD_STACK_SIZE);
 806              		.loc 1 235 0
 807 01a4 020BA0E3 		mov	r0, #2048
 808 01a8 FEFFFFEB 		bl	CyU3PMemAlloc
 809 01ac 0C000BE5 		str	r0, [fp, #-12]
 236:../I2C_DebugConsole.c ****     Status = CyU3PThreadCreate(&I2C_DebugThread,        // Handle to my Application Thread
 810              		.loc 1 236 0
 811 01b0 58304BE2 		sub	r3, fp, #88
 812 01b4 0C201BE5 		ldr	r2, [fp, #-12]
 813 01b8 00208DE5 		str	r2, [sp, #0]
 814 01bc 022BA0E3 		mov	r2, #2048
 815 01c0 04208DE5 		str	r2, [sp, #4]
 816 01c4 0620A0E3 		mov	r2, #6
 817 01c8 08208DE5 		str	r2, [sp, #8]
 818 01cc 0620A0E3 		mov	r2, #6
 819 01d0 0C208DE5 		str	r2, [sp, #12]
 820 01d4 0020A0E3 		mov	r2, #0
 821 01d8 10208DE5 		str	r2, [sp, #16]
 822 01dc 0120A0E3 		mov	r2, #1
 823 01e0 14208DE5 		str	r2, [sp, #20]
 824 01e4 A820A0E3 		mov	r2, #168
 825 01e8 18208DE5 		str	r2, [sp, #24]
 826 01ec 90009FE5 		ldr	r0, .L40+60
 827 01f0 90109FE5 		ldr	r1, .L40+64
 828 01f4 90209FE5 		ldr	r2, .L40+68
 829 01f8 FEFFFFEB 		bl	_txe_thread_create
 830 01fc 08000BE5 		str	r0, [fp, #-8]
 237:../I2C_DebugConsole.c ****             "30:I2C_Debug_Thread",                      // Thread ID and name
 238:../I2C_DebugConsole.c ****             I2C_ConsoleThread,                          // Thread entry function
 239:../I2C_DebugConsole.c ****             (uint32_t)&ThreadSignal,                    // Parameter passed to Thread
 240:../I2C_DebugConsole.c ****             StackPtr,                                   // Pointer to the allocated thread stack
 241:../I2C_DebugConsole.c ****             DEBUG_THREAD_STACK_SIZE,                    // Allocated thread stack size
 242:../I2C_DebugConsole.c ****             DEBUG_THREAD_PRIORITY,                      // Thread priority
 243:../I2C_DebugConsole.c ****             DEBUG_THREAD_PRIORITY,                      // = Thread priority so no preemption
 244:../I2C_DebugConsole.c ****             CYU3P_NO_TIME_SLICE,                        // Time slice no supported
 245:../I2C_DebugConsole.c ****             CYU3P_AUTO_START                            // Start the thread immediately
 246:../I2C_DebugConsole.c ****             );
 247:../I2C_DebugConsole.c ****     CheckStatus("Create I2C_Debug_Thread", Status);
 831              		.loc 1 247 0
 832 0200 88009FE5 		ldr	r0, .L40+72
 833 0204 08101BE5 		ldr	r1, [fp, #-8]
 834 0208 FEFFFFEB 		bl	CheckStatus
 248:../I2C_DebugConsole.c **** 
 249:../I2C_DebugConsole.c ****     // Wait for the thread to be set up
 250:../I2C_DebugConsole.c ****     Status = CyU3PSemaphoreGet(&ThreadSignal, CYU3P_WAIT_FOREVER);
 835              		.loc 1 250 0
 836 020c 58304BE2 		sub	r3, fp, #88
 837 0210 0300A0E1 		mov	r0, r3
 838 0214 0010E0E3 		mvn	r1, #0
 839 0218 FEFFFFEB 		bl	_txe_semaphore_get
 840 021c 08000BE5 		str	r0, [fp, #-8]
 251:../I2C_DebugConsole.c **** 
 252:../I2C_DebugConsole.c ****     I2C_DebugTraceLevel = TraceLevel;
 841              		.loc 1 252 0
 842 0220 6C309FE5 		ldr	r3, .L40+76
 843 0224 5D205BE5 		ldrb	r2, [fp, #-93]
 844 0228 0020C3E5 		strb	r2, [r3, #0]
 253:../I2C_DebugConsole.c **** 
 254:../I2C_DebugConsole.c ****     I2C_DebugEnabled = CyTrue;
 845              		.loc 1 254 0
 846 022c 14309FE5 		ldr	r3, .L40
 847 0230 0120A0E3 		mov	r2, #1
 848 0234 002083E5 		str	r2, [r3, #0]
 255:../I2C_DebugConsole.c **** 
 256:../I2C_DebugConsole.c ****     return Status;
 849              		.loc 1 256 0
 850 0238 08301BE5 		ldr	r3, [fp, #-8]
 851              	.L39:
 257:../I2C_DebugConsole.c **** }
 852              		.loc 1 257 0
 853 023c 0300A0E1 		mov	r0, r3
 854 0240 04D04BE2 		sub	sp, fp, #4
 855 0244 0088BDE8 		ldmfd	sp!, {fp, pc}
 856              	.L41:
 857              		.align	2
 858              	.L40:
 859 0248 00000000 		.word	I2C_DebugEnabled
 860 024c D0000000 		.word	.LC11
 861 0250 801A0600 		.word	400000
 862 0254 E0000000 		.word	.LC12
 863 0258 013F0000 		.word	16129
 864 025c 00000000 		.word	I2C_DebugTXHandle
 865 0260 F0000000 		.word	.LC13
 866 0264 00000000 		.word	I2C_DebugRXHandle
 867 0268 10010000 		.word	.LC14
 868 026c 00000000 		.word	I2C_DebugLock
 869 0270 30010000 		.word	.LC15
 870 0274 00000000 		.word	I2C_DebugQueue
 871 0278 00000000 		.word	Queue
 872 027c 40010000 		.word	.LC16
 873 0280 50010000 		.word	.LC17
 874 0284 00000000 		.word	I2C_DebugThread
 875 0288 70010000 		.word	.LC18
 876 028c 00000000 		.word	I2C_ConsoleThread
 877 0290 84010000 		.word	.LC19
 878 0294 00000000 		.word	I2C_DebugTraceLevel
 879              		.cfi_endproc
 880              	.LFE3:
 882              		.text
 883              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 I2C_DebugConsole.c
C:\Users\John\AppData\Local\Temp\ccINLCYc.s:22     .bss.I2C_DebugThread:00000000 $d
C:\Users\John\AppData\Local\Temp\ccINLCYc.s:25     .bss.I2C_DebugThread:00000000 I2C_DebugThread
C:\Users\John\AppData\Local\Temp\ccINLCYc.s:28     .bss.I2C_DebugLock:00000000 $d
C:\Users\John\AppData\Local\Temp\ccINLCYc.s:31     .bss.I2C_DebugLock:00000000 I2C_DebugLock
C:\Users\John\AppData\Local\Temp\ccINLCYc.s:34     .bss.I2C_DebugQueue:00000000 $d
C:\Users\John\AppData\Local\Temp\ccINLCYc.s:37     .bss.I2C_DebugQueue:00000000 I2C_DebugQueue
C:\Users\John\AppData\Local\Temp\ccINLCYc.s:40     .bss.I2C_DebugTXHandle:00000000 $d
C:\Users\John\AppData\Local\Temp\ccINLCYc.s:43     .bss.I2C_DebugTXHandle:00000000 I2C_DebugTXHandle
C:\Users\John\AppData\Local\Temp\ccINLCYc.s:46     .bss.I2C_DebugRXHandle:00000000 $d
C:\Users\John\AppData\Local\Temp\ccINLCYc.s:49     .bss.I2C_DebugRXHandle:00000000 I2C_DebugRXHandle
                            *COM*:00000004 I2C_DebugEnabled
C:\Users\John\AppData\Local\Temp\ccINLCYc.s:53     .bss.Queue:00000000 $d
C:\Users\John\AppData\Local\Temp\ccINLCYc.s:56     .bss.Queue:00000000 Queue
C:\Users\John\AppData\Local\Temp\ccINLCYc.s:61     .bss.I2C_DebugTraceLevel:00000000 I2C_DebugTraceLevel
C:\Users\John\AppData\Local\Temp\ccINLCYc.s:62     .bss.I2C_DebugTraceLevel:00000000 $d
C:\Users\John\AppData\Local\Temp\ccINLCYc.s:64     .rodata:00000000 $d
C:\Users\John\AppData\Local\Temp\ccINLCYc.s:74     .text.I2C_DebugPrint:00000000 $a
C:\Users\John\AppData\Local\Temp\ccINLCYc.s:77     .text.I2C_DebugPrint:00000000 I2C_DebugPrint
C:\Users\John\AppData\Local\Temp\ccINLCYc.s:236    .text.I2C_DebugPrint:00000198 $d
C:\Users\John\AppData\Local\Temp\ccINLCYc.s:254    .text.Restart_I2C:00000000 $a
C:\Users\John\AppData\Local\Temp\ccINLCYc.s:257    .text.Restart_I2C:00000000 Restart_I2C
C:\Users\John\AppData\Local\Temp\ccINLCYc.s:318    .text.Restart_I2C:00000084 $d
C:\Users\John\AppData\Local\Temp\ccINLCYc.s:346    .text.I2C_ConsoleThread:00000000 $a
C:\Users\John\AppData\Local\Temp\ccINLCYc.s:349    .text.I2C_ConsoleThread:00000000 I2C_ConsoleThread
C:\Users\John\AppData\Local\Temp\ccINLCYc.s:614    .text.I2C_ConsoleThread:000002c8 $d
C:\Users\John\AppData\Local\Temp\ccINLCYc.s:655    .text.I2C_DebugInit:00000000 $a
C:\Users\John\AppData\Local\Temp\ccINLCYc.s:658    .text.I2C_DebugInit:00000000 I2C_DebugInit
C:\Users\John\AppData\Local\Temp\ccINLCYc.s:859    .text.I2C_DebugInit:00000248 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
_tx_thread_identify
_txe_mutex_get
CyU3PDmaBufferAlloc
CheckStatus
MyDebugSNPrint
CyU3PDebugPrint
_txe_queue_send
CyU3PDmaBufferFree
_txe_mutex_put
glDebugTraceLevel
CyU3PI2cDeInit
CyU3PI2cInit
CyU3PI2cSetConfig
CyU3PDmaChannelReset
_txe_semaphore_put
_txe_queue_receive
CyU3PI2cSendCommand
CyU3PMemSet
CyU3PDmaChannelSetupRecvBuffer
CyU3PDmaChannelWaitForCompletion
GotConsoleInput
_tx_thread_sleep
CyU3PDmaChannelSetupSendBuffer
CyU3PI2cWaitForBlockXfer
_txe_queue_front_send
CyU3PDmaChannelCreate
_txe_mutex_create
_txe_queue_create
_txe_semaphore_create
CyU3PMemAlloc
_txe_thread_create
_txe_semaphore_get
