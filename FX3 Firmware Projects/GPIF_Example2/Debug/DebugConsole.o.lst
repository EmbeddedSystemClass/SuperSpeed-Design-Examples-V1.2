   1              		.cpu arm926ej-s
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.file	"DebugConsole.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.global	glDebugTxEnabled
  17              		.section	.bss.glDebugTxEnabled,"aw",%nobits
  18              		.align	2
  21              	glDebugTxEnabled:
  22 0000 00000000 		.space	4
  23              		.comm	glUARTtoCPU_Handle,172,4
  24              		.comm	ConsoleInBuffer,32,4
  25              		.comm	ConsoleInIndex,4,4
  26              		.comm	glCounter,80,4
  27              		.global	MAXCLOCKVALUE
  28              		.section	.data.MAXCLOCKVALUE,"aw",%progbits
  29              		.align	2
  32              	MAXCLOCKVALUE:
  33 0000 0A000000 		.word	10
  34              		.comm	ClockValue,4,4
  35              		.comm	Toggle,1,1
  36              		.global	EventName
  37              		.section	.rodata
  38              		.align	2
  39              	.LC0:
  40 0000 434F4E4E 		.ascii	"CONNECT\000"
  40      45435400 
  41              		.align	2
  42              	.LC1:
  43 0008 44495343 		.ascii	"DISCONNECT\000"
  43      4F4E4E45 
  43      435400
  44 0013 00       		.align	2
  45              	.LC2:
  46 0014 53555350 		.ascii	"SUSPEND\000"
  46      454E4400 
  47              		.align	2
  48              	.LC3:
  49 001c 52455355 		.ascii	"RESUME\000"
  49      4D4500
  50 0023 00       		.align	2
  51              	.LC4:
  52 0024 52455345 		.ascii	"RESET\000"
  52      5400
  53 002a 0000     		.align	2
  54              	.LC5:
  55 002c 5345545F 		.ascii	"SET_CONFIGURATION\000"
  55      434F4E46 
  55      49475552 
  55      4154494F 
  55      4E00
  56 003e 0000     		.align	2
  57              	.LC6:
  58 0040 53504545 		.ascii	"SPEED\000"
  58      4400
  59 0046 0000     		.align	2
  60              	.LC7:
  61 0048 5345545F 		.ascii	"SET_INTERFACE\000"
  61      494E5445 
  61      52464143 
  61      4500
  62 0056 0000     		.align	2
  63              	.LC8:
  64 0058 5345545F 		.ascii	"SET_EXIT_LATENCY\000"
  64      45584954 
  64      5F4C4154 
  64      454E4359 
  64      00
  65 0069 000000   		.align	2
  66              	.LC9:
  67 006c 534F465F 		.ascii	"SOF_ITP\000"
  67      49545000 
  68              		.align	2
  69              	.LC10:
  70 0074 55534552 		.ascii	"USER_EP0_XFER_COMPLETE\000"
  70      5F455030 
  70      5F584645 
  70      525F434F 
  70      4D504C45 
  71 008b 00       		.align	2
  72              	.LC11:
  73 008c 56425553 		.ascii	"VBUS_VALID\000"
  73      5F56414C 
  73      494400
  74 0097 00       		.align	2
  75              	.LC12:
  76 0098 56425553 		.ascii	"VBUS_REMOVED\000"
  76      5F52454D 
  76      4F564544 
  76      00
  77 00a5 000000   		.align	2
  78              	.LC13:
  79 00a8 484F5354 		.ascii	"HOSTMODE_CONNECT\000"
  79      4D4F4445 
  79      5F434F4E 
  79      4E454354 
  79      00
  80 00b9 000000   		.align	2
  81              	.LC14:
  82 00bc 484F5354 		.ascii	"HOSTMODE_DISCONNECT\000"
  82      4D4F4445 
  82      5F444953 
  82      434F4E4E 
  82      45435400 
  83              		.align	2
  84              	.LC15:
  85 00d0 4F54475F 		.ascii	"OTG_CHANGE\000"
  85      4348414E 
  85      474500
  86 00db 00       		.align	2
  87              	.LC16:
  88 00dc 4F54475F 		.ascii	"OTG_VBUS_CHG\000"
  88      56425553 
  88      5F434847 
  88      00
  89 00e9 000000   		.align	2
  90              	.LC17:
  91 00ec 4F54475F 		.ascii	"OTG_SRP\000"
  91      53525000 
  92              		.align	2
  93              	.LC18:
  94 00f4 45505F55 		.ascii	"EP_UNDERRUN\000"
  94      4E444552 
  94      52554E00 
  95              		.align	2
  96              	.LC19:
  97 0100 4C494E4B 		.ascii	"LINK_RECOVERY\000"
  97      5F524543 
  97      4F564552 
  97      5900
  98 010e 0000     		.align	2
  99              	.LC20:
 100 0110 55534233 		.ascii	"USB3_LINKFAIL\000"
 100      5F4C494E 
 100      4B464149 
 100      4C00
 101 011e 0000     		.align	2
 102              	.LC21:
 103 0120 53535F43 		.ascii	"SS_COMP_ENTRY\000"
 103      4F4D505F 
 103      454E5452 
 103      5900
 104 012e 0000     		.align	2
 105              	.LC22:
 106 0130 53535F43 		.ascii	"SS_COMP_EXIT\000"
 106      4F4D505F 
 106      45584954 
 106      00
 107              		.section	.data.EventName,"aw",%progbits
 108              		.align	2
 111              	EventName:
 112 0000 00000000 		.word	.LC0
 113 0004 08000000 		.word	.LC1
 114 0008 14000000 		.word	.LC2
 115 000c 1C000000 		.word	.LC3
 116 0010 24000000 		.word	.LC4
 117 0014 2C000000 		.word	.LC5
 118 0018 40000000 		.word	.LC6
 119 001c 48000000 		.word	.LC7
 120 0020 58000000 		.word	.LC8
 121 0024 6C000000 		.word	.LC9
 122 0028 74000000 		.word	.LC10
 123 002c 8C000000 		.word	.LC11
 124 0030 98000000 		.word	.LC12
 125 0034 A8000000 		.word	.LC13
 126 0038 BC000000 		.word	.LC14
 127 003c D0000000 		.word	.LC15
 128 0040 DC000000 		.word	.LC16
 129 0044 EC000000 		.word	.LC17
 130 0048 F4000000 		.word	.LC18
 131 004c 00010000 		.word	.LC19
 132 0050 10010000 		.word	.LC20
 133 0054 20010000 		.word	.LC21
 134 0058 30010000 		.word	.LC22
 135              		.section	.rodata
 136 013d 000000   		.align	2
 137              	.LC23:
 138 0140 0D0A4576 		.ascii	"\015\012Event received = %s\015\012\000"
 138      656E7420 
 138      72656365 
 138      69766564 
 138      203D2025 
 139              		.section	.text.DebugPrintEvent,"ax",%progbits
 140              		.align	2
 141              		.global	DebugPrintEvent
 143              	DebugPrintEvent:
 144              	.LFB0:
 145              		.file 1 "../DebugConsole.c"
   1:../DebugConsole.c **** /*
   2:../DebugConsole.c ****  * DebugConsole.c
   3:../DebugConsole.c ****  *
   4:../DebugConsole.c ****  *      Author: john@usb-by-example.com
   5:../DebugConsole.c ****  */
   6:../DebugConsole.c **** 
   7:../DebugConsole.c **** #include "Application.h"
   8:../DebugConsole.c **** 
   9:../DebugConsole.c **** extern void CheckStatus(char* StringPtr, CyU3PReturnStatus_t Status);
  10:../DebugConsole.c **** extern CyU3PEvent CallbackEvent;			// Used by Callback to signal Main()
  11:../DebugConsole.c **** extern void StopApplication(void);
  12:../DebugConsole.c **** extern void StartApplication(void);
  13:../DebugConsole.c **** 
  14:../DebugConsole.c **** CyBool_t glDebugTxEnabled = CyFalse;	// Set true once I can output messages to the Console
  15:../DebugConsole.c **** CyU3PDmaChannel glUARTtoCPU_Handle;		// Handle needed by Uart Callback routine
  16:../DebugConsole.c **** char ConsoleInBuffer[32];				// Buffer for user Console Input
  17:../DebugConsole.c **** uint32_t ConsoleInIndex;				// Index into ConsoleIn buffer
  18:../DebugConsole.c **** uint32_t glCounter[20];					// Counters used to monitor GPIF
  19:../DebugConsole.c **** uint32_t MAXCLOCKVALUE = 10;
  20:../DebugConsole.c **** uint32_t ClockValue;	// Used to Set/Display GPIF clock
  21:../DebugConsole.c **** uint8_t Toggle;
  22:../DebugConsole.c **** 
  23:../DebugConsole.c **** // For Debug and education display the name of the Event
  24:../DebugConsole.c **** const char* EventName[] = {
  25:../DebugConsole.c **** 	    "CONNECT", "DISCONNECT", "SUSPEND", "RESUME", "RESET", "SET_CONFIGURATION", "SPEED",
  26:../DebugConsole.c **** 	    "SET_INTERFACE", "SET_EXIT_LATENCY", "SOF_ITP", "USER_EP0_XFER_COMPLETE", "VBUS_VALID",
  27:../DebugConsole.c **** 	    "VBUS_REMOVED", "HOSTMODE_CONNECT", "HOSTMODE_DISCONNECT", "OTG_CHANGE", "OTG_VBUS_CHG",
  28:../DebugConsole.c **** 	    "OTG_SRP", "EP_UNDERRUN", "LINK_RECOVERY", "USB3_LINKFAIL", "SS_COMP_ENTRY", "SS_COMP_EXIT"
  29:../DebugConsole.c **** };
  30:../DebugConsole.c **** 
  31:../DebugConsole.c **** void DebugPrintEvent(uint32_t ActualEvents)
  32:../DebugConsole.c **** {
 146              		.loc 1 32 0
 147              		.cfi_startproc
 148              		@ args = 0, pretend = 0, frame = 16
 149              		@ frame_needed = 1, uses_anonymous_args = 0
 150 0000 00482DE9 		stmfd	sp!, {fp, lr}
 151              	.LCFI0:
 152              		.cfi_def_cfa_offset 8
 153              		.cfi_offset 11, -8
 154              		.cfi_offset 14, -4
 155 0004 04B08DE2 		add	fp, sp, #4
 156              	.LCFI1:
 157              		.cfi_def_cfa 11, 4
 158 0008 10D04DE2 		sub	sp, sp, #16
 159 000c 10000BE5 		str	r0, [fp, #-16]
  33:../DebugConsole.c **** 	uint32_t Index = 0;
 160              		.loc 1 33 0
 161 0010 0030A0E3 		mov	r3, #0
 162 0014 08300BE5 		str	r3, [fp, #-8]
  34:../DebugConsole.c **** 	ActualEvents &= USB_EVENTS;
 163              		.loc 1 34 0
 164 0018 10301BE5 		ldr	r3, [fp, #-16]
 165 001c FF34C3E3 		bic	r3, r3, #-16777216
 166 0020 0235C3E3 		bic	r3, r3, #8388608
 167 0024 10300BE5 		str	r3, [fp, #-16]
  35:../DebugConsole.c **** 	while (ActualEvents)
 168              		.loc 1 35 0
 169 0028 100000EA 		b	.L2
 170              	.L4:
  36:../DebugConsole.c **** 	{
  37:../DebugConsole.c **** 		if (ActualEvents & 1) DebugPrint(4, "\r\nEvent received = %s\r\n", EventName[Index]);
 171              		.loc 1 37 0
 172 002c 10301BE5 		ldr	r3, [fp, #-16]
 173 0030 013003E2 		and	r3, r3, #1
 174 0034 000053E3 		cmp	r3, #0
 175 0038 0600000A 		beq	.L3
 176              		.loc 1 37 0 is_stmt 0 discriminator 1
 177 003c 40309FE5 		ldr	r3, .L5
 178 0040 08201BE5 		ldr	r2, [fp, #-8]
 179 0044 023193E7 		ldr	r3, [r3, r2, asl #2]
 180 0048 0400A0E3 		mov	r0, #4
 181 004c 34109FE5 		ldr	r1, .L5+4
 182 0050 0320A0E1 		mov	r2, r3
 183 0054 FEFFFFEB 		bl	CyU3PDebugPrint
 184              	.L3:
  38:../DebugConsole.c **** 		Index++;
 185              		.loc 1 38 0 is_stmt 1
 186 0058 08301BE5 		ldr	r3, [fp, #-8]
 187 005c 013083E2 		add	r3, r3, #1
 188 0060 08300BE5 		str	r3, [fp, #-8]
  39:../DebugConsole.c **** 		ActualEvents >>= 1;
 189              		.loc 1 39 0
 190 0064 10301BE5 		ldr	r3, [fp, #-16]
 191 0068 A330A0E1 		mov	r3, r3, lsr #1
 192 006c 10300BE5 		str	r3, [fp, #-16]
 193              	.L2:
  35:../DebugConsole.c **** 	{
 194              		.loc 1 35 0 discriminator 1
 195 0070 10301BE5 		ldr	r3, [fp, #-16]
 196 0074 000053E3 		cmp	r3, #0
 197 0078 EBFFFF1A 		bne	.L4
  40:../DebugConsole.c **** 	}
  41:../DebugConsole.c **** }
 198              		.loc 1 41 0
 199 007c 04D04BE2 		sub	sp, fp, #4
 200              		@ sp needed
 201 0080 0088BDE8 		ldmfd	sp!, {fp, pc}
 202              	.L6:
 203              		.align	2
 204              	.L5:
 205 0084 00000000 		.word	EventName
 206 0088 40010000 		.word	.LC23
 207              		.cfi_endproc
 208              	.LFE0:
 210              		.section	.rodata
 211              		.align	2
 212              	.LC24:
 213 0158 70636C6B 		.ascii	"pclk\000"
 213      00
 214 015d 000000   		.align	2
 215              	.LC25:
 216 0160 52657365 		.ascii	"Reset CPLD\000"
 216      74204350 
 216      4C4400
 217 016b 00       		.align	2
 218              	.LC26:
 219 016c 0D0A5265 		.ascii	"\015\012Restarting application\000"
 219      73746172 
 219      74696E67 
 219      20617070 
 219      6C696361 
 220 0185 000000   		.align	2
 221              	.LC27:
 222 0188 74687265 		.ascii	"threads\000"
 222      61647300 
 223              		.align	2
 224              	.LC28:
 225 0190 0D0A466F 		.ascii	"\015\012Found: '%s'\000"
 225      756E643A 
 225      20272573 
 225      2700
 226 019e 0000     		.align	2
 227              	.LC29:
 228 01a0 72657365 		.ascii	"reset\000"
 228      7400
 229 01a6 0000     		.align	2
 230              	.LC30:
 231 01a8 0D0A5245 		.ascii	"\015\012RESETTING CPU\015\012\000"
 231      53455454 
 231      494E4720 
 231      4350550D 
 231      0A00
 232 01ba 0000     		.align	2
 233              	.LC31:
 234 01bc 63706C64 		.ascii	"cpld\000"
 234      00
 235 01c1 000000   		.align	2
 236              	.LC32:
 237 01c4 0D0A546F 		.ascii	"\015\012Toggle CPLD RESET, now = %d\015\012\000"
 237      67676C65 
 237      2043504C 
 237      44205245 
 237      5345542C 
 238              		.align	2
 239              	.LC33:
 240 01e4 67706966 		.ascii	"gpif\000"
 240      00
 241 01e9 000000   		.align	2
 242              	.LC34:
 243 01ec 47657420 		.ascii	"Get GPIF State\000"
 243      47504946 
 243      20537461 
 243      746500
 244 01fb 00       		.align	2
 245              	.LC35:
 246 01fc 0D0A4750 		.ascii	"\015\012GPIF State = %d\015\012\000"
 246      49462053 
 246      74617465 
 246      203D2025 
 246      640D0A00 
 247              		.align	2
 248              	.LC36:
 249 0210 496E7075 		.ascii	"Input: '%s'\015\012\000"
 249      743A2027 
 249      2573270D 
 249      0A00
 250              		.section	.text.ParseCommand,"ax",%progbits
 251              		.align	2
 252              		.global	ParseCommand
 254              	ParseCommand:
 255              	.LFB1:
  42:../DebugConsole.c **** 
  43:../DebugConsole.c **** void ParseCommand(void)
  44:../DebugConsole.c **** {
 256              		.loc 1 44 0
 257              		.cfi_startproc
 258              		@ args = 0, pretend = 0, frame = 24
 259              		@ frame_needed = 1, uses_anonymous_args = 0
 260 0000 00482DE9 		stmfd	sp!, {fp, lr}
 261              	.LCFI2:
 262              		.cfi_def_cfa_offset 8
 263              		.cfi_offset 11, -8
 264              		.cfi_offset 14, -4
 265 0004 04B08DE2 		add	fp, sp, #4
 266              	.LCFI3:
 267              		.cfi_def_cfa 11, 4
 268 0008 30D04DE2 		sub	sp, sp, #48
  45:../DebugConsole.c **** 	// User has entered a command, process it
  46:../DebugConsole.c ****     CyU3PReturnStatus_t Status = CY_U3P_SUCCESS;
 269              		.loc 1 46 0
 270 000c 0030A0E3 		mov	r3, #0
 271 0010 08300BE5 		str	r3, [fp, #-8]
  47:../DebugConsole.c **** 
  48:../DebugConsole.c ****     if (strncmp("pclk", ConsoleInBuffer, 4) == 0)
 272              		.loc 1 48 0
 273 0014 A0029FE5 		ldr	r0, .L18
 274 0018 A0129FE5 		ldr	r1, .L18+4
 275 001c 0420A0E3 		mov	r2, #4
 276 0020 FEFFFFEB 		bl	strncmp
 277 0024 0030A0E1 		mov	r3, r0
 278 0028 000053E3 		cmp	r3, #0
 279 002c 2800001A 		bne	.L8
  49:../DebugConsole.c **** 	{
  50:../DebugConsole.c **** 		if (ConsoleInBuffer[4] == '-') ClockValue++;
 280              		.loc 1 50 0
 281 0030 88329FE5 		ldr	r3, .L18+4
 282 0034 0430D3E5 		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 283 0038 2D0053E3 		cmp	r3, #45
 284 003c 0400001A 		bne	.L9
 285              		.loc 1 50 0 is_stmt 0 discriminator 1
 286 0040 7C329FE5 		ldr	r3, .L18+8
 287 0044 003093E5 		ldr	r3, [r3]
 288 0048 012083E2 		add	r2, r3, #1
 289 004c 70329FE5 		ldr	r3, .L18+8
 290 0050 002083E5 		str	r2, [r3]
 291              	.L9:
  51:../DebugConsole.c **** 		// For CPLD board, with a -7 XC2C128 the maximum frequency with margin is 80MHz
  52:../DebugConsole.c **** 		if ((ConsoleInBuffer[4] == '+') && (ClockValue > MAXCLOCKVALUE)) ClockValue--;
 292              		.loc 1 52 0 is_stmt 1
 293 0054 64329FE5 		ldr	r3, .L18+4
 294 0058 0430D3E5 		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 295 005c 2B0053E3 		cmp	r3, #43
 296 0060 0A00001A 		bne	.L10
 297              		.loc 1 52 0 is_stmt 0 discriminator 1
 298 0064 58329FE5 		ldr	r3, .L18+8
 299 0068 002093E5 		ldr	r2, [r3]
 300 006c 54329FE5 		ldr	r3, .L18+12
 301 0070 003093E5 		ldr	r3, [r3]
 302 0074 030052E1 		cmp	r2, r3
 303 0078 0400009A 		bls	.L10
 304 007c 40329FE5 		ldr	r3, .L18+8
 305 0080 003093E5 		ldr	r3, [r3]
 306 0084 012043E2 		sub	r2, r3, #1
 307 0088 34329FE5 		ldr	r3, .L18+8
 308 008c 002083E5 		str	r2, [r3]
 309              	.L10:
  53:../DebugConsole.c **** 		// It is not sufficient to Stop and Restart the GPIF clocks since the DMA buffers waiting at GPIF
  54:../DebugConsole.c **** 		// Safest is to STOP and START the application again so that the DMA channel is re-initialized
  55:../DebugConsole.c **** 		// Need to RESET the CPLD since it will move to an unknown state with no clocks
  56:../DebugConsole.c **** 		Status = CyU3PGpioSetValue(CPLD_RESET, 1);		// Drive CPLD_RESET
 310              		.loc 1 56 0 is_stmt 1
 311 0090 1B00A0E3 		mov	r0, #27
 312 0094 0110A0E3 		mov	r1, #1
 313 0098 FEFFFFEB 		bl	CyU3PGpioSetValue
 314 009c 08000BE5 		str	r0, [fp, #-8]
  57:../DebugConsole.c ****     	CheckStatus("Reset CPLD", Status);
 315              		.loc 1 57 0
 316 00a0 24029FE5 		ldr	r0, .L18+16
 317 00a4 08101BE5 		ldr	r1, [fp, #-8]
 318 00a8 FEFFFFEB 		bl	CheckStatus
  58:../DebugConsole.c ****     	// Temporarily turn off "Successful" messages while application restarts
  59:../DebugConsole.c ****     	CyU3PDebugSetTraceLevel(6);
 319              		.loc 1 59 0
 320 00ac 0600A0E3 		mov	r0, #6
 321 00b0 FEFFFFEB 		bl	CyU3PDebugSetTraceLevel
  60:../DebugConsole.c **** 		StopApplication();
 322              		.loc 1 60 0
 323 00b4 FEFFFFEB 		bl	StopApplication
  61:../DebugConsole.c **** 		DebugPrint(4, "\r\nRestarting application");
 324              		.loc 1 61 0
 325 00b8 0400A0E3 		mov	r0, #4
 326 00bc 0C129FE5 		ldr	r1, .L18+20
 327 00c0 FEFFFFEB 		bl	CyU3PDebugPrint
  62:../DebugConsole.c **** 		StartApplication();
 328              		.loc 1 62 0
 329 00c4 FEFFFFEB 		bl	StartApplication
  63:../DebugConsole.c ****     	CyU3PDebugSetTraceLevel(8);
 330              		.loc 1 63 0
 331 00c8 0800A0E3 		mov	r0, #8
 332 00cc FEFFFFEB 		bl	CyU3PDebugSetTraceLevel
 333 00d0 740000EA 		b	.L11
 334              	.L8:
  64:../DebugConsole.c **** 	}
  65:../DebugConsole.c **** 	else if (!strcmp("threads", ConsoleInBuffer))
 335              		.loc 1 65 0
 336 00d4 F8019FE5 		ldr	r0, .L18+24
 337 00d8 E0119FE5 		ldr	r1, .L18+4
 338 00dc FEFFFFEB 		bl	strcmp
 339 00e0 0030A0E1 		mov	r3, r0
 340 00e4 000053E3 		cmp	r3, #0
 341 00e8 2D00001A 		bne	.L12
 342              	.LBB2:
  66:../DebugConsole.c **** 	{
  67:../DebugConsole.c **** 		CyU3PThread *ThisThread, *NextThread;
  68:../DebugConsole.c **** 		char* ThreadName;
  69:../DebugConsole.c **** 		// First find out who I am
  70:../DebugConsole.c **** 		ThisThread = CyU3PThreadIdentify();
 343              		.loc 1 70 0
 344 00ec FEFFFFEB 		bl	_tx_thread_identify
 345 00f0 0C000BE5 		str	r0, [fp, #-12]
  71:../DebugConsole.c **** 		tx_thread_info_get(ThisThread, &ThreadName, NULL, NULL, NULL, NULL, NULL, &NextThread, NULL);
 346              		.loc 1 71 0
 347 00f4 14304BE2 		sub	r3, fp, #20
 348 00f8 0020A0E3 		mov	r2, #0
 349 00fc 00208DE5 		str	r2, [sp]
 350 0100 0020A0E3 		mov	r2, #0
 351 0104 04208DE5 		str	r2, [sp, #4]
 352 0108 0020A0E3 		mov	r2, #0
 353 010c 08208DE5 		str	r2, [sp, #8]
 354 0110 10204BE2 		sub	r2, fp, #16
 355 0114 0C208DE5 		str	r2, [sp, #12]
 356 0118 0020A0E3 		mov	r2, #0
 357 011c 10208DE5 		str	r2, [sp, #16]
 358 0120 0C001BE5 		ldr	r0, [fp, #-12]
 359 0124 0310A0E1 		mov	r1, r3
 360 0128 0020A0E3 		mov	r2, #0
 361 012c 0030A0E3 		mov	r3, #0
 362 0130 FEFFFFEB 		bl	_txe_thread_info_get
  72:../DebugConsole.c **** 		// Now, using the Thread linked list, look for other threads until I find myself again
  73:../DebugConsole.c **** 		while (NextThread != ThisThread)
 363              		.loc 1 73 0
 364 0134 150000EA 		b	.L13
 365              	.L14:
  74:../DebugConsole.c **** 		{
  75:../DebugConsole.c **** 			tx_thread_info_get(NextThread, &ThreadName, NULL, NULL, NULL, NULL, NULL, &NextThread, NULL);
 366              		.loc 1 75 0
 367 0138 10201BE5 		ldr	r2, [fp, #-16]
 368 013c 14304BE2 		sub	r3, fp, #20
 369 0140 0010A0E3 		mov	r1, #0
 370 0144 00108DE5 		str	r1, [sp]
 371 0148 0010A0E3 		mov	r1, #0
 372 014c 04108DE5 		str	r1, [sp, #4]
 373 0150 0010A0E3 		mov	r1, #0
 374 0154 08108DE5 		str	r1, [sp, #8]
 375 0158 10104BE2 		sub	r1, fp, #16
 376 015c 0C108DE5 		str	r1, [sp, #12]
 377 0160 0010A0E3 		mov	r1, #0
 378 0164 10108DE5 		str	r1, [sp, #16]
 379 0168 0200A0E1 		mov	r0, r2
 380 016c 0310A0E1 		mov	r1, r3
 381 0170 0020A0E3 		mov	r2, #0
 382 0174 0030A0E3 		mov	r3, #0
 383 0178 FEFFFFEB 		bl	_txe_thread_info_get
  76:../DebugConsole.c **** 			DebugPrint(4, "\r\nFound: '%s'", ThreadName);
 384              		.loc 1 76 0
 385 017c 14301BE5 		ldr	r3, [fp, #-20]
 386 0180 0400A0E3 		mov	r0, #4
 387 0184 4C119FE5 		ldr	r1, .L18+28
 388 0188 0320A0E1 		mov	r2, r3
 389 018c FEFFFFEB 		bl	CyU3PDebugPrint
 390              	.L13:
  73:../DebugConsole.c **** 		{
 391              		.loc 1 73 0 discriminator 1
 392 0190 10201BE5 		ldr	r2, [fp, #-16]
 393 0194 0C301BE5 		ldr	r3, [fp, #-12]
 394 0198 030052E1 		cmp	r2, r3
 395 019c E5FFFF1A 		bne	.L14
 396              	.LBE2:
 397 01a0 400000EA 		b	.L11
 398              	.L12:
  77:../DebugConsole.c **** 		}
  78:../DebugConsole.c **** 	}
  79:../DebugConsole.c **** 	else if (!strcmp("reset", ConsoleInBuffer))
 399              		.loc 1 79 0
 400 01a4 30019FE5 		ldr	r0, .L18+32
 401 01a8 10119FE5 		ldr	r1, .L18+4
 402 01ac FEFFFFEB 		bl	strcmp
 403 01b0 0030A0E1 		mov	r3, r0
 404 01b4 000053E3 		cmp	r3, #0
 405 01b8 0700001A 		bne	.L15
  80:../DebugConsole.c **** 	{
  81:../DebugConsole.c **** 		DebugPrint(4, "\r\nRESETTING CPU\r\n");
 406              		.loc 1 81 0
 407 01bc 0400A0E3 		mov	r0, #4
 408 01c0 18119FE5 		ldr	r1, .L18+36
 409 01c4 FEFFFFEB 		bl	CyU3PDebugPrint
  82:../DebugConsole.c **** 		CyU3PThreadSleep(100);
 410              		.loc 1 82 0
 411 01c8 6400A0E3 		mov	r0, #100
 412 01cc FEFFFFEB 		bl	_tx_thread_sleep
  83:../DebugConsole.c **** 		CyU3PDeviceReset(CyFalse);
 413              		.loc 1 83 0
 414 01d0 0000A0E3 		mov	r0, #0
 415 01d4 FEFFFFEB 		bl	CyU3PDeviceReset
 416 01d8 320000EA 		b	.L11
 417              	.L15:
  84:../DebugConsole.c **** 	}
  85:../DebugConsole.c **** 	else if (!strcmp("cpld", ConsoleInBuffer))
 418              		.loc 1 85 0
 419 01dc 00019FE5 		ldr	r0, .L18+40
 420 01e0 D8109FE5 		ldr	r1, .L18+4
 421 01e4 FEFFFFEB 		bl	strcmp
 422 01e8 0030A0E1 		mov	r3, r0
 423 01ec 000053E3 		cmp	r3, #0
 424 01f0 1300001A 		bne	.L16
 425              	.LBB3:
  86:../DebugConsole.c **** 	{
  87:../DebugConsole.c **** 		CyBool_t State;
  88:../DebugConsole.c **** 		CyU3PGpioSimpleGetValue(CPLD_RESET, &State);
 426              		.loc 1 88 0
 427 01f4 18304BE2 		sub	r3, fp, #24
 428 01f8 1B00A0E3 		mov	r0, #27
 429 01fc 0310A0E1 		mov	r1, r3
 430 0200 FEFFFFEB 		bl	CyU3PGpioSimpleGetValue
  89:../DebugConsole.c **** 		State = !State;
 431              		.loc 1 89 0
 432 0204 18301BE5 		ldr	r3, [fp, #-24]
 433 0208 000053E3 		cmp	r3, #0
 434 020c 0030A013 		movne	r3, #0
 435 0210 0130A003 		moveq	r3, #1
 436 0214 FF3003E2 		and	r3, r3, #255
 437 0218 18300BE5 		str	r3, [fp, #-24]
  90:../DebugConsole.c **** 		CyU3PGpioSetValue(CPLD_RESET, State);
 438              		.loc 1 90 0
 439 021c 18301BE5 		ldr	r3, [fp, #-24]
 440 0220 1B00A0E3 		mov	r0, #27
 441 0224 0310A0E1 		mov	r1, r3
 442 0228 FEFFFFEB 		bl	CyU3PGpioSetValue
  91:../DebugConsole.c **** 		DebugPrint(4, "\r\nToggle CPLD RESET, now = %d\r\n", State);
 443              		.loc 1 91 0
 444 022c 18301BE5 		ldr	r3, [fp, #-24]
 445 0230 0400A0E3 		mov	r0, #4
 446 0234 AC109FE5 		ldr	r1, .L18+44
 447 0238 0320A0E1 		mov	r2, r3
 448 023c FEFFFFEB 		bl	CyU3PDebugPrint
 449              	.LBE3:
 450 0240 180000EA 		b	.L11
 451              	.L16:
  92:../DebugConsole.c **** 	}
  93:../DebugConsole.c **** 	else if (!strcmp("gpif", ConsoleInBuffer))
 452              		.loc 1 93 0
 453 0244 A0009FE5 		ldr	r0, .L18+48
 454 0248 70109FE5 		ldr	r1, .L18+4
 455 024c FEFFFFEB 		bl	strcmp
 456 0250 0030A0E1 		mov	r3, r0
 457 0254 000053E3 		cmp	r3, #0
 458 0258 0E00001A 		bne	.L17
 459              	.LBB4:
  94:../DebugConsole.c **** 	{
  95:../DebugConsole.c **** 		uint8_t State = 0xFF;
 460              		.loc 1 95 0
 461 025c 0030E0E3 		mvn	r3, #0
 462 0260 19304BE5 		strb	r3, [fp, #-25]
  96:../DebugConsole.c **** 		Status = CyU3PGpifGetSMState(&State);
 463              		.loc 1 96 0
 464 0264 19304BE2 		sub	r3, fp, #25
 465 0268 0300A0E1 		mov	r0, r3
 466 026c FEFFFFEB 		bl	CyU3PGpifGetSMState
 467 0270 08000BE5 		str	r0, [fp, #-8]
  97:../DebugConsole.c **** 		CheckStatus("Get GPIF State", Status);
 468              		.loc 1 97 0
 469 0274 74009FE5 		ldr	r0, .L18+52
 470 0278 08101BE5 		ldr	r1, [fp, #-8]
 471 027c FEFFFFEB 		bl	CheckStatus
  98:../DebugConsole.c **** 		DebugPrint(4, "\r\nGPIF State = %d\r\n", State);
 472              		.loc 1 98 0
 473 0280 19305BE5 		ldrb	r3, [fp, #-25]	@ zero_extendqisi2
 474 0284 0400A0E3 		mov	r0, #4
 475 0288 64109FE5 		ldr	r1, .L18+56
 476 028c 0320A0E1 		mov	r2, r3
 477 0290 FEFFFFEB 		bl	CyU3PDebugPrint
 478              	.LBE4:
 479 0294 030000EA 		b	.L11
 480              	.L17:
  99:../DebugConsole.c **** 	}
 100:../DebugConsole.c **** 	else DebugPrint(4, "Input: '%s'\r\n", &ConsoleInBuffer[0]);
 481              		.loc 1 100 0
 482 0298 0400A0E3 		mov	r0, #4
 483 029c 54109FE5 		ldr	r1, .L18+60
 484 02a0 18209FE5 		ldr	r2, .L18+4
 485 02a4 FEFFFFEB 		bl	CyU3PDebugPrint
 486              	.L11:
 101:../DebugConsole.c **** 	ConsoleInIndex = 0;
 487              		.loc 1 101 0
 488 02a8 4C309FE5 		ldr	r3, .L18+64
 489 02ac 0020A0E3 		mov	r2, #0
 490 02b0 002083E5 		str	r2, [r3]
 102:../DebugConsole.c **** }
 491              		.loc 1 102 0
 492 02b4 04D04BE2 		sub	sp, fp, #4
 493              		@ sp needed
 494 02b8 0088BDE8 		ldmfd	sp!, {fp, pc}
 495              	.L19:
 496              		.align	2
 497              	.L18:
 498 02bc 58010000 		.word	.LC24
 499 02c0 00000000 		.word	ConsoleInBuffer
 500 02c4 00000000 		.word	ClockValue
 501 02c8 00000000 		.word	MAXCLOCKVALUE
 502 02cc 60010000 		.word	.LC25
 503 02d0 6C010000 		.word	.LC26
 504 02d4 88010000 		.word	.LC27
 505 02d8 90010000 		.word	.LC28
 506 02dc A0010000 		.word	.LC29
 507 02e0 A8010000 		.word	.LC30
 508 02e4 BC010000 		.word	.LC31
 509 02e8 C4010000 		.word	.LC32
 510 02ec E4010000 		.word	.LC33
 511 02f0 EC010000 		.word	.LC34
 512 02f4 FC010000 		.word	.LC35
 513 02f8 10020000 		.word	.LC36
 514 02fc 00000000 		.word	ConsoleInIndex
 515              		.cfi_endproc
 516              	.LFE1:
 518              		.section	.rodata
 519 021e 0000     		.align	2
 520              	.LC37:
 521 0220 256300   		.ascii	"%c\000"
 522              		.section	.text.UartCallback,"ax",%progbits
 523              		.align	2
 524              		.global	UartCallback
 526              	UartCallback:
 527              	.LFB2:
 103:../DebugConsole.c **** 
 104:../DebugConsole.c **** void UartCallback(CyU3PUartEvt_t Event, CyU3PUartError_t Error)
 105:../DebugConsole.c **** // Handle characters typed in by the developer
 106:../DebugConsole.c **** {
 528              		.loc 1 106 0
 529              		.cfi_startproc
 530              		@ args = 0, pretend = 0, frame = 24
 531              		@ frame_needed = 1, uses_anonymous_args = 0
 532 0000 00482DE9 		stmfd	sp!, {fp, lr}
 533              	.LCFI4:
 534              		.cfi_def_cfa_offset 8
 535              		.cfi_offset 11, -8
 536              		.cfi_offset 14, -4
 537 0004 04B08DE2 		add	fp, sp, #4
 538              	.LCFI5:
 539              		.cfi_def_cfa 11, 4
 540 0008 18D04DE2 		sub	sp, sp, #24
 541 000c 0020A0E1 		mov	r2, r0
 542 0010 0130A0E1 		mov	r3, r1
 543 0014 15204BE5 		strb	r2, [fp, #-21]
 544 0018 16304BE5 		strb	r3, [fp, #-22]
 107:../DebugConsole.c **** 	CyU3PDmaBuffer_t ConsoleInDmaBuffer;
 108:../DebugConsole.c **** 	char InputChar;
 109:../DebugConsole.c **** 	if (Event == CY_U3P_UART_EVENT_RX_DONE)
 545              		.loc 1 109 0
 546 001c 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 547 0020 000053E3 		cmp	r3, #0
 548 0024 3300001A 		bne	.L20
 110:../DebugConsole.c ****     {
 111:../DebugConsole.c **** 		CyU3PDmaChannelSetWrapUp(&glUARTtoCPU_Handle);
 549              		.loc 1 111 0
 550 0028 D0009FE5 		ldr	r0, .L25
 551 002c FEFFFFEB 		bl	CyU3PDmaChannelSetWrapUp
 112:../DebugConsole.c **** 		CyU3PDmaChannelGetBuffer(&glUARTtoCPU_Handle, &ConsoleInDmaBuffer, CYU3P_NO_WAIT);
 552              		.loc 1 112 0
 553 0030 14304BE2 		sub	r3, fp, #20
 554 0034 C4009FE5 		ldr	r0, .L25
 555 0038 0310A0E1 		mov	r1, r3
 556 003c 0020A0E3 		mov	r2, #0
 557 0040 FEFFFFEB 		bl	CyU3PDmaChannelGetBuffer
 113:../DebugConsole.c **** 		InputChar = (char)*ConsoleInDmaBuffer.buffer;
 558              		.loc 1 113 0
 559 0044 14301BE5 		ldr	r3, [fp, #-20]
 560 0048 0030D3E5 		ldrb	r3, [r3]
 561 004c 05304BE5 		strb	r3, [fp, #-5]
 114:../DebugConsole.c **** 		DebugPrint(4, "%c", InputChar);			// Echo the character
 562              		.loc 1 114 0
 563 0050 05305BE5 		ldrb	r3, [fp, #-5]	@ zero_extendqisi2
 564 0054 0400A0E3 		mov	r0, #4
 565 0058 A4109FE5 		ldr	r1, .L25+4
 566 005c 0320A0E1 		mov	r2, r3
 567 0060 FEFFFFEB 		bl	CyU3PDebugPrint
 115:../DebugConsole.c **** 		// On CR, signal Main loop to process the command entered by the user.  Should NOT do this in a C
 116:../DebugConsole.c **** 		if (InputChar == 0x0d) CyU3PEventSet(&CallbackEvent, USER_COMMAND_AVAILABLE, CYU3P_EVENT_OR);
 568              		.loc 1 116 0
 569 0064 05305BE5 		ldrb	r3, [fp, #-5]	@ zero_extendqisi2
 570 0068 0D0053E3 		cmp	r3, #13
 571 006c 0400001A 		bne	.L22
 572              		.loc 1 116 0 is_stmt 0 discriminator 1
 573 0070 90009FE5 		ldr	r0, .L25+8
 574 0074 1710A0E3 		mov	r1, #23
 575 0078 0020A0E3 		mov	r2, #0
 576 007c FEFFFFEB 		bl	_txe_event_flags_set
 577 0080 180000EA 		b	.L23
 578              	.L22:
 117:../DebugConsole.c **** 		else
 118:../DebugConsole.c **** 		{
 119:../DebugConsole.c **** 			ConsoleInBuffer[ConsoleInIndex] = InputChar | 0x20;		// Save character as lower case (for compar
 579              		.loc 1 119 0 is_stmt 1
 580 0084 80309FE5 		ldr	r3, .L25+12
 581 0088 003093E5 		ldr	r3, [r3]
 582 008c 05205BE5 		ldrb	r2, [fp, #-5]
 583 0090 202082E3 		orr	r2, r2, #32
 584 0094 FF1002E2 		and	r1, r2, #255
 585 0098 70209FE5 		ldr	r2, .L25+16
 586 009c 0310C2E7 		strb	r1, [r2, r3]
 120:../DebugConsole.c **** 			if (ConsoleInIndex++ < sizeof(ConsoleInBuffer)) ConsoleInBuffer[ConsoleInIndex] = 0;
 587              		.loc 1 120 0
 588 00a0 64309FE5 		ldr	r3, .L25+12
 589 00a4 003093E5 		ldr	r3, [r3]
 590 00a8 011083E2 		add	r1, r3, #1
 591 00ac 58209FE5 		ldr	r2, .L25+12
 592 00b0 001082E5 		str	r1, [r2]
 593 00b4 1F0053E3 		cmp	r3, #31
 594 00b8 0500008A 		bhi	.L24
 595              		.loc 1 120 0 is_stmt 0 discriminator 1
 596 00bc 48309FE5 		ldr	r3, .L25+12
 597 00c0 003093E5 		ldr	r3, [r3]
 598 00c4 44209FE5 		ldr	r2, .L25+16
 599 00c8 0010A0E3 		mov	r1, #0
 600 00cc 0310C2E7 		strb	r1, [r2, r3]
 601 00d0 040000EA 		b	.L23
 602              	.L24:
 121:../DebugConsole.c **** 			else ConsoleInIndex--;
 603              		.loc 1 121 0 is_stmt 1
 604 00d4 30309FE5 		ldr	r3, .L25+12
 605 00d8 003093E5 		ldr	r3, [r3]
 606 00dc 012043E2 		sub	r2, r3, #1
 607 00e0 24309FE5 		ldr	r3, .L25+12
 608 00e4 002083E5 		str	r2, [r3]
 609              	.L23:
 122:../DebugConsole.c **** 		}
 123:../DebugConsole.c **** 		CyU3PDmaChannelDiscardBuffer(&glUARTtoCPU_Handle);
 610              		.loc 1 123 0
 611 00e8 10009FE5 		ldr	r0, .L25
 612 00ec FEFFFFEB 		bl	CyU3PDmaChannelDiscardBuffer
 124:../DebugConsole.c **** 		CyU3PUartRxSetBlockXfer(1);
 613              		.loc 1 124 0
 614 00f0 0100A0E3 		mov	r0, #1
 615 00f4 FEFFFFEB 		bl	CyU3PUartRxSetBlockXfer
 616              	.L20:
 125:../DebugConsole.c ****     }
 126:../DebugConsole.c **** }
 617              		.loc 1 126 0
 618 00f8 04D04BE2 		sub	sp, fp, #4
 619              		@ sp needed
 620 00fc 0088BDE8 		ldmfd	sp!, {fp, pc}
 621              	.L26:
 622              		.align	2
 623              	.L25:
 624 0100 00000000 		.word	glUARTtoCPU_Handle
 625 0104 20020000 		.word	.LC37
 626 0108 00000000 		.word	CallbackEvent
 627 010c 00000000 		.word	ConsoleInIndex
 628 0110 00000000 		.word	ConsoleInBuffer
 629              		.cfi_endproc
 630              	.LFE2:
 632              		.section	.rodata
 633 0223 00       		.align	2
 634              	.LC38:
 635 0224 43795533 		.ascii	"CyU3PUartInit\000"
 635      50556172 
 635      74496E69 
 635      7400
 636 0232 0000     		.align	2
 637              	.LC39:
 638 0234 43795533 		.ascii	"CyU3PUartSetConfig\000"
 638      50556172 
 638      74536574 
 638      436F6E66 
 638      696700
 639 0247 00       		.align	2
 640              	.LC40:
 641 0248 43795533 		.ascii	"CyU3PUartTxSetBlockXfer\000"
 641      50556172 
 641      74547853 
 641      6574426C 
 641      6F636B58 
 642              		.align	2
 643              	.LC41:
 644 0260 436F6E73 		.ascii	"ConsoleOutEnabled\000"
 644      6F6C654F 
 644      7574456E 
 644      61626C65 
 644      6400
 645 0272 0000     		.align	2
 646              	.LC42:
 647 0274 43795533 		.ascii	"CyU3PUartRxSetBlockXfer\000"
 647      50556172 
 647      74527853 
 647      6574426C 
 647      6F636B58 
 648              		.align	2
 649              	.LC43:
 650 028c 43726561 		.ascii	"CreateDebugRxDmaChannel\000"
 650      74654465 
 650      62756752 
 650      78446D61 
 650      4368616E 
 651              		.align	2
 652              	.LC44:
 653 02a4 436F6E73 		.ascii	"ConsoleInEnabled\000"
 653      6F6C6549 
 653      6E456E61 
 653      626C6564 
 653      00
 654 02b5 000000   		.section	.text.InitializeDebugConsole,"ax",%progbits
 655              		.align	2
 656              		.global	InitializeDebugConsole
 658              	InitializeDebugConsole:
 659              	.LFB3:
 127:../DebugConsole.c **** 
 128:../DebugConsole.c **** // Spin up the DEBUG Console, Out and In
 129:../DebugConsole.c **** CyU3PReturnStatus_t InitializeDebugConsole(void)
 130:../DebugConsole.c **** {
 660              		.loc 1 130 0
 661              		.cfi_startproc
 662              		@ args = 0, pretend = 0, frame = 56
 663              		@ frame_needed = 1, uses_anonymous_args = 0
 664 0000 00482DE9 		stmfd	sp!, {fp, lr}
 665              	.LCFI6:
 666              		.cfi_def_cfa_offset 8
 667              		.cfi_offset 11, -8
 668              		.cfi_offset 14, -4
 669 0004 04B08DE2 		add	fp, sp, #4
 670              	.LCFI7:
 671              		.cfi_def_cfa 11, 4
 672 0008 38D04DE2 		sub	sp, sp, #56
 131:../DebugConsole.c ****     CyU3PUartConfig_t uartConfig;
 132:../DebugConsole.c ****     CyU3PDmaChannelConfig_t dmaConfig;
 133:../DebugConsole.c ****     CyU3PReturnStatus_t Status = CY_U3P_SUCCESS;
 673              		.loc 1 133 0
 674 000c 0030A0E3 		mov	r3, #0
 675 0010 08300BE5 		str	r3, [fp, #-8]
 134:../DebugConsole.c **** 
 135:../DebugConsole.c ****     Status = CyU3PUartInit();										// Start the UART driver
 676              		.loc 1 135 0
 677 0014 FEFFFFEB 		bl	CyU3PUartInit
 678 0018 08000BE5 		str	r0, [fp, #-8]
 136:../DebugConsole.c ****     CheckStatus("CyU3PUartInit", Status);							// This will not display since we're not connected 
 679              		.loc 1 136 0
 680 001c 78019FE5 		ldr	r0, .L32
 681 0020 08101BE5 		ldr	r1, [fp, #-8]
 682 0024 FEFFFFEB 		bl	CheckStatus
 137:../DebugConsole.c **** 
 138:../DebugConsole.c ****     CyU3PMemSet ((uint8_t *)&uartConfig, 0, sizeof (uartConfig));
 683              		.loc 1 138 0
 684 0028 20304BE2 		sub	r3, fp, #32
 685 002c 0300A0E1 		mov	r0, r3
 686 0030 0010A0E3 		mov	r1, #0
 687 0034 1820A0E3 		mov	r2, #24
 688 0038 FEFFFFEB 		bl	CyU3PMemSet
 139:../DebugConsole.c **** 	uartConfig.baudRate = CY_U3P_UART_BAUDRATE_115200;				// Default for ClearConnex ClearTerminal
 689              		.loc 1 139 0
 690 003c 5C319FE5 		ldr	r3, .L32+4
 691 0040 10300BE5 		str	r3, [fp, #-16]
 140:../DebugConsole.c **** 	uartConfig.stopBit  = CY_U3P_UART_ONE_STOP_BIT;
 692              		.loc 1 140 0
 693 0044 0130A0E3 		mov	r3, #1
 694 0048 0C304BE5 		strb	r3, [fp, #-12]
 141:../DebugConsole.c **** 	uartConfig.txEnable = CyTrue;
 695              		.loc 1 141 0
 696 004c 0130A0E3 		mov	r3, #1
 697 0050 20300BE5 		str	r3, [fp, #-32]
 142:../DebugConsole.c **** 	uartConfig.rxEnable = CyTrue;
 698              		.loc 1 142 0
 699 0054 0130A0E3 		mov	r3, #1
 700 0058 1C300BE5 		str	r3, [fp, #-28]
 143:../DebugConsole.c **** 	uartConfig.isDma    = CyTrue;
 701              		.loc 1 143 0
 702 005c 0130A0E3 		mov	r3, #1
 703 0060 14300BE5 		str	r3, [fp, #-20]
 144:../DebugConsole.c **** 	Status = CyU3PUartSetConfig(&uartConfig, UartCallback);			// Configure the UART hardware
 704              		.loc 1 144 0
 705 0064 20304BE2 		sub	r3, fp, #32
 706 0068 0300A0E1 		mov	r0, r3
 707 006c 30119FE5 		ldr	r1, .L32+8
 708 0070 FEFFFFEB 		bl	CyU3PUartSetConfig
 709 0074 08000BE5 		str	r0, [fp, #-8]
 145:../DebugConsole.c ****     CheckStatus("CyU3PUartSetConfig", Status);
 710              		.loc 1 145 0
 711 0078 28019FE5 		ldr	r0, .L32+12
 712 007c 08101BE5 		ldr	r1, [fp, #-8]
 713 0080 FEFFFFEB 		bl	CheckStatus
 146:../DebugConsole.c **** 
 147:../DebugConsole.c ****     Status = CyU3PUartTxSetBlockXfer(0xFFFFFFFF);					// Send as much data as I need to
 714              		.loc 1 147 0
 715 0084 0000E0E3 		mvn	r0, #0
 716 0088 FEFFFFEB 		bl	CyU3PUartTxSetBlockXfer
 717 008c 08000BE5 		str	r0, [fp, #-8]
 148:../DebugConsole.c ****     CheckStatus("CyU3PUartTxSetBlockXfer", Status);
 718              		.loc 1 148 0
 719 0090 14019FE5 		ldr	r0, .L32+16
 720 0094 08101BE5 		ldr	r1, [fp, #-8]
 721 0098 FEFFFFEB 		bl	CheckStatus
 149:../DebugConsole.c **** 
 150:../DebugConsole.c **** 	Status = CyU3PDebugInit(CY_U3P_LPP_SOCKET_UART_CONS, 8);		// Attach the Debug driver above the UAR
 722              		.loc 1 150 0
 723 009c 0300A0E3 		mov	r0, #3
 724 00a0 0810A0E3 		mov	r1, #8
 725 00a4 FEFFFFEB 		bl	CyU3PDebugInit
 726 00a8 08000BE5 		str	r0, [fp, #-8]
 151:../DebugConsole.c **** 	if (Status == CY_U3P_SUCCESS) glDebugTxEnabled = CyTrue;
 727              		.loc 1 151 0
 728 00ac 08301BE5 		ldr	r3, [fp, #-8]
 729 00b0 000053E3 		cmp	r3, #0
 730 00b4 0200001A 		bne	.L28
 731              		.loc 1 151 0 is_stmt 0 discriminator 1
 732 00b8 F0309FE5 		ldr	r3, .L32+20
 733 00bc 0120A0E3 		mov	r2, #1
 734 00c0 002083E5 		str	r2, [r3]
 735              	.L28:
 152:../DebugConsole.c ****     CheckStatus("ConsoleOutEnabled", Status);						// First console display message
 736              		.loc 1 152 0 is_stmt 1
 737 00c4 E8009FE5 		ldr	r0, .L32+24
 738 00c8 08101BE5 		ldr	r1, [fp, #-8]
 739 00cc FEFFFFEB 		bl	CheckStatus
 153:../DebugConsole.c **** 	CyU3PDebugPreamble(CyFalse);									// Skip preamble, debug info is targeted for a person
 740              		.loc 1 153 0
 741 00d0 0000A0E3 		mov	r0, #0
 742 00d4 FEFFFFEB 		bl	CyU3PDebugPreamble
 154:../DebugConsole.c **** 
 155:../DebugConsole.c **** 	// Now setup a DMA channel to receive characters from the Uart Rx
 156:../DebugConsole.c ****     Status = CyU3PUartRxSetBlockXfer(1);
 743              		.loc 1 156 0
 744 00d8 0100A0E3 		mov	r0, #1
 745 00dc FEFFFFEB 		bl	CyU3PUartRxSetBlockXfer
 746 00e0 08000BE5 		str	r0, [fp, #-8]
 157:../DebugConsole.c ****     CheckStatus("CyU3PUartRxSetBlockXfer", Status);
 747              		.loc 1 157 0
 748 00e4 CC009FE5 		ldr	r0, .L32+28
 749 00e8 08101BE5 		ldr	r1, [fp, #-8]
 750 00ec FEFFFFEB 		bl	CheckStatus
 158:../DebugConsole.c **** 	CyU3PMemSet((uint8_t *)&dmaConfig, 0, sizeof(dmaConfig));
 751              		.loc 1 158 0
 752 00f0 3C304BE2 		sub	r3, fp, #60
 753 00f4 0300A0E1 		mov	r0, r3
 754 00f8 0010A0E3 		mov	r1, #0
 755 00fc 1C20A0E3 		mov	r2, #28
 756 0100 FEFFFFEB 		bl	CyU3PMemSet
 159:../DebugConsole.c **** 	dmaConfig.size  		= 16;									// Minimum size allowed, I only need 1 byte
 757              		.loc 1 159 0
 758 0104 1030A0E3 		mov	r3, #16
 759 0108 BC334BE1 		strh	r3, [fp, #-60]	@ movhi
 160:../DebugConsole.c **** 	dmaConfig.count 		= 1;									// I can't type faster than the Uart Callback routine!
 760              		.loc 1 160 0
 761 010c 0130A0E3 		mov	r3, #1
 762 0110 BA334BE1 		strh	r3, [fp, #-58]	@ movhi
 161:../DebugConsole.c **** 	dmaConfig.prodSckId		= CY_U3P_LPP_SOCKET_UART_PROD;
 763              		.loc 1 161 0
 764 0114 0630A0E3 		mov	r3, #6
 765 0118 B8334BE1 		strh	r3, [fp, #-56]	@ movhi
 162:../DebugConsole.c **** 	dmaConfig.consSckId 	= CY_U3P_CPU_SOCKET_CONS;
 766              		.loc 1 162 0
 767 011c 3F3CA0E3 		mov	r3, #16128
 768 0120 B6334BE1 		strh	r3, [fp, #-54]	@ movhi
 163:../DebugConsole.c **** 	dmaConfig.dmaMode 		= CY_U3P_DMA_MODE_BYTE;
 769              		.loc 1 163 0
 770 0124 0030A0E3 		mov	r3, #0
 771 0128 2C304BE5 		strb	r3, [fp, #-44]
 164:../DebugConsole.c **** 	dmaConfig.notification	= CY_U3P_DMA_CB_PROD_EVENT;
 772              		.loc 1 164 0
 773 012c 0830A0E3 		mov	r3, #8
 774 0130 28300BE5 		str	r3, [fp, #-40]
 165:../DebugConsole.c **** 	Status = CyU3PDmaChannelCreate(&glUARTtoCPU_Handle, CY_U3P_DMA_TYPE_MANUAL_IN, &dmaConfig);
 775              		.loc 1 165 0
 776 0134 3C304BE2 		sub	r3, fp, #60
 777 0138 7C009FE5 		ldr	r0, .L32+32
 778 013c 0310A0E3 		mov	r1, #3
 779 0140 0320A0E1 		mov	r2, r3
 780 0144 FEFFFFEB 		bl	CyU3PDmaChannelCreate
 781 0148 08000BE5 		str	r0, [fp, #-8]
 166:../DebugConsole.c ****     CheckStatus("CreateDebugRxDmaChannel", Status);
 782              		.loc 1 166 0
 783 014c 6C009FE5 		ldr	r0, .L32+36
 784 0150 08101BE5 		ldr	r1, [fp, #-8]
 785 0154 FEFFFFEB 		bl	CheckStatus
 167:../DebugConsole.c ****     if (Status != CY_U3P_SUCCESS) CyU3PDmaChannelDestroy(&glUARTtoCPU_Handle);
 786              		.loc 1 167 0
 787 0158 08301BE5 		ldr	r3, [fp, #-8]
 788 015c 000053E3 		cmp	r3, #0
 789 0160 0200000A 		beq	.L29
 790              		.loc 1 167 0 is_stmt 0 discriminator 1
 791 0164 50009FE5 		ldr	r0, .L32+32
 792 0168 FEFFFFEB 		bl	CyU3PDmaChannelDestroy
 793 016c 060000EA 		b	.L30
 794              	.L29:
 168:../DebugConsole.c ****     else
 169:../DebugConsole.c ****     {
 170:../DebugConsole.c **** 		Status = CyU3PDmaChannelSetXfer(&glUARTtoCPU_Handle, 0);
 795              		.loc 1 170 0 is_stmt 1
 796 0170 44009FE5 		ldr	r0, .L32+32
 797 0174 0010A0E3 		mov	r1, #0
 798 0178 FEFFFFEB 		bl	CyU3PDmaChannelSetXfer
 799 017c 08000BE5 		str	r0, [fp, #-8]
 171:../DebugConsole.c **** 		CheckStatus("ConsoleInEnabled", Status);
 800              		.loc 1 171 0
 801 0180 3C009FE5 		ldr	r0, .L32+40
 802 0184 08101BE5 		ldr	r1, [fp, #-8]
 803 0188 FEFFFFEB 		bl	CheckStatus
 804              	.L30:
 172:../DebugConsole.c ****     }
 173:../DebugConsole.c ****     return Status;
 805              		.loc 1 173 0
 806 018c 08301BE5 		ldr	r3, [fp, #-8]
 174:../DebugConsole.c **** }
 807              		.loc 1 174 0
 808 0190 0300A0E1 		mov	r0, r3
 809 0194 04D04BE2 		sub	sp, fp, #4
 810              		@ sp needed
 811 0198 0088BDE8 		ldmfd	sp!, {fp, pc}
 812              	.L33:
 813              		.align	2
 814              	.L32:
 815 019c 24020000 		.word	.LC38
 816 01a0 00C20100 		.word	115200
 817 01a4 00000000 		.word	UartCallback
 818 01a8 34020000 		.word	.LC39
 819 01ac 48020000 		.word	.LC40
 820 01b0 00000000 		.word	glDebugTxEnabled
 821 01b4 60020000 		.word	.LC41
 822 01b8 74020000 		.word	.LC42
 823 01bc 00000000 		.word	glUARTtoCPU_Handle
 824 01c0 8C020000 		.word	.LC43
 825 01c4 A4020000 		.word	.LC44
 826              		.cfi_endproc
 827              	.LFE3:
 829              		.text
 830              	.Letext0:
 831              		.file 2 "c:\\program files (x86)\\cypress\\ez-usb fx3 sdk\\1.3\\arm gcc\\arm-none-eabi\\include\\s
 832              		.file 3 "C:\\Program Files (x86)\\Cypress\\EZ-USB FX3 SDK\\1.3\\/firmware/u3p_firmware/inc/cyu3typ
 833              		.file 4 "C:\\Program Files (x86)\\Cypress\\EZ-USB FX3 SDK\\1.3\\/firmware/u3p_firmware/inc/tx_port
 834              		.file 5 "C:\\Program Files (x86)\\Cypress\\EZ-USB FX3 SDK\\1.3\\/firmware/u3p_firmware/inc/tx_api.
 835              		.file 6 "C:\\Program Files (x86)\\Cypress\\EZ-USB FX3 SDK\\1.3\\/firmware/u3p_firmware/inc/cyu3dma
 836              		.file 7 "C:\\Program Files (x86)\\Cypress\\EZ-USB FX3 SDK\\1.3\\/firmware/u3p_firmware/inc/cyu3err
 837              		.file 8 "C:\\Program Files (x86)\\Cypress\\EZ-USB FX3 SDK\\1.3\\/firmware/u3p_firmware/inc/cyu3uar
DEFINED SYMBOLS
                            *ABS*:00000000 DebugConsole.c
C:\Users\nikl\AppData\Local\Temp\ccKoB5mL.s:21     .bss.glDebugTxEnabled:00000000 glDebugTxEnabled
C:\Users\nikl\AppData\Local\Temp\ccKoB5mL.s:18     .bss.glDebugTxEnabled:00000000 $d
                            *COM*:000000ac glUARTtoCPU_Handle
                            *COM*:00000020 ConsoleInBuffer
                            *COM*:00000004 ConsoleInIndex
                            *COM*:00000050 glCounter
C:\Users\nikl\AppData\Local\Temp\ccKoB5mL.s:32     .data.MAXCLOCKVALUE:00000000 MAXCLOCKVALUE
C:\Users\nikl\AppData\Local\Temp\ccKoB5mL.s:29     .data.MAXCLOCKVALUE:00000000 $d
                            *COM*:00000004 ClockValue
                            *COM*:00000001 Toggle
C:\Users\nikl\AppData\Local\Temp\ccKoB5mL.s:111    .data.EventName:00000000 EventName
C:\Users\nikl\AppData\Local\Temp\ccKoB5mL.s:38     .rodata:00000000 $d
C:\Users\nikl\AppData\Local\Temp\ccKoB5mL.s:108    .data.EventName:00000000 $d
C:\Users\nikl\AppData\Local\Temp\ccKoB5mL.s:140    .text.DebugPrintEvent:00000000 $a
C:\Users\nikl\AppData\Local\Temp\ccKoB5mL.s:143    .text.DebugPrintEvent:00000000 DebugPrintEvent
C:\Users\nikl\AppData\Local\Temp\ccKoB5mL.s:205    .text.DebugPrintEvent:00000084 $d
C:\Users\nikl\AppData\Local\Temp\ccKoB5mL.s:251    .text.ParseCommand:00000000 $a
C:\Users\nikl\AppData\Local\Temp\ccKoB5mL.s:254    .text.ParseCommand:00000000 ParseCommand
C:\Users\nikl\AppData\Local\Temp\ccKoB5mL.s:498    .text.ParseCommand:000002bc $d
C:\Users\nikl\AppData\Local\Temp\ccKoB5mL.s:523    .text.UartCallback:00000000 $a
C:\Users\nikl\AppData\Local\Temp\ccKoB5mL.s:526    .text.UartCallback:00000000 UartCallback
C:\Users\nikl\AppData\Local\Temp\ccKoB5mL.s:624    .text.UartCallback:00000100 $d
C:\Users\nikl\AppData\Local\Temp\ccKoB5mL.s:655    .text.InitializeDebugConsole:00000000 $a
C:\Users\nikl\AppData\Local\Temp\ccKoB5mL.s:658    .text.InitializeDebugConsole:00000000 InitializeDebugConsole
C:\Users\nikl\AppData\Local\Temp\ccKoB5mL.s:815    .text.InitializeDebugConsole:0000019c $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
CyU3PDebugPrint
strncmp
CyU3PGpioSetValue
CheckStatus
CyU3PDebugSetTraceLevel
StopApplication
StartApplication
strcmp
_tx_thread_identify
_txe_thread_info_get
_tx_thread_sleep
CyU3PDeviceReset
CyU3PGpioSimpleGetValue
CyU3PGpifGetSMState
CyU3PDmaChannelSetWrapUp
CyU3PDmaChannelGetBuffer
_txe_event_flags_set
CyU3PDmaChannelDiscardBuffer
CyU3PUartRxSetBlockXfer
CallbackEvent
CyU3PUartInit
CyU3PMemSet
CyU3PUartSetConfig
CyU3PUartTxSetBlockXfer
CyU3PDebugInit
CyU3PDebugPreamble
CyU3PDmaChannelCreate
CyU3PDmaChannelDestroy
CyU3PDmaChannelSetXfer
